
import { 
    get{{baseName}}, 
    post{{baseName}},
    get{{baseName}}List , 
    delete{{baseName}} , 
    update{{baseName}} 
} from '../../api';

import {

    ADD_{{#lambda.uppercase}}{{baseName}}{{/lambda.uppercase}}_REQUEST,
    FETCH_{{#lambda.uppercase}}{{baseName}}{{/lambda.uppercase}}_REQUEST,
    LIST_{{#lambda.uppercase}}{{baseName}}{{/lambda.uppercase}}_REQUEST,
    UPDATE_{{#lambda.uppercase}}{{baseName}}{{/lambda.uppercase}}_REQUEST,
    DELETE_{{#lambda.uppercase}}{{baseName}}{{/lambda.uppercase}}_REQUEST,

    add{{baseName}}Failure,
    add{{baseName}}Success,

    fetch{{baseName}}Failure,
    fetch{{baseName}}Success,
    
    list{{baseName}}Failure,
    list{{baseName}}Success,

    update{{baseName}}Failure,
    update{{baseName}}Success,
    
    delete{{baseName}}Failure,
    delete{{baseName}}Success,
    
} from '../actions/{{baseName}}ApiAction';

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com

Powered by Swagger Codegen: http://swagger.io

Generator version: ({{{generatorVersion}}})

Template file: typescript-redux-query/apiREST.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description: {{#description}}{{.}}{{/description}}{{^description}}{{baseName}}{{/description}}
*/

export const {{baseName}}Middleware = ({ dispatch }) => (next) => async (action) => {
    console.log("{{baseName}} MIDDLEWARE: " + JSON.stringify(action) )
    next(action);

    switch (action.type) {

        case ADD_{{#lambda.uppercase}}{{baseName}}{{/lambda.uppercase}}_REQUEST:
            try {
                const response = post{{baseName}}(action.payload);
                dispatch(add{{baseName}}Success(response.body));
            } catch (error) {
                dispatch(add{{baseName}}Failure(error.message));
            }
            break;

        case LIST_{{#lambda.uppercase}}{{baseName}}{{/lambda.uppercase}}_REQUEST:
            try {
                const response = get{{baseName}}List();
                dispatch(list{{baseName}}Success(response.body));
            } catch (error) {
                dispatch(list{{baseName}}Failure(error.message));
            }
            break;


        case FETCH_{{#lambda.uppercase}}{{baseName}}{{/lambda.uppercase}}_REQUEST:
            try {
                const response = get{{baseName}}(action.id);
                dispatch(fetch{{baseName}}Success(response.body));
            } catch (error) {
                dispatch(fetch{{baseName}}Failure(error.message));
            }
            break;

        case UPDATE_{{#lambda.uppercase}}{{baseName}}{{/lambda.uppercase}}_REQUEST:
            try {
                const { id, {{baseName}} } = action.payload;
                const response = update{{baseName}}(id);
                dispatch(update{{baseName}}Success(response.body));
            } catch (error) {
                dispatch(update{{baseName}}Failure(error.message));
            }
            break;

        case DELETE_{{#lambda.uppercase}}{{baseName}}{{/lambda.uppercase}}_REQUEST:
            try {
                const { id, {{baseName}} } = action.payload;
                const response = delete{{baseName}}(id);
                dispatch(delete{{baseName}}Success(response.body));
            } catch (error) {
                dispatch(delete{{baseName}}Failure(error.message));
            }
            break;

        default:
            break;
    }
};

