import { ErrorMessage, Field, Formik, FormikHelpers, FormikValues } from 'formik';
import React from 'react';
import { Form as BSForm, Accordion, Col, Nav, Row, Spinner } from 'react-bootstrap';
import { FaCheckCircle, FaCogs, FaRegPlusSquare } from 'react-icons/fa';
import CoolButton from '../../../../components/CoolButton';
import * as Yup from 'yup';
import { {{classname}}, {{#models}}{{#model}}{{#hasEnums}}{{#vars}}{{#isEnum}}{{classname}}{{#lambda.pascalcase}}{{baseName}}Enum{{/lambda.pascalcase}}{{^last}}, {{/last}}{{/isEnum}}{{/vars}}{{/hasEnums}}{{/model}}{{/models}} } from '../../../model';
import { useAdd{{classname}}Mutation } from '../../services/{{classname}}Service';

/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com/thorapi

Powered by Swagger Codegen: http://swagger.io

Generated Details:
**GENERATOR VERSION:** {{{generatorVersion}}}
**GENERATED DATE:** {{generatedDate}}
**GENERATOR CLASS:** {{generatorClass}}

Template file: typescript-redux-query/modelForm.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description: {{#description}}{{.}}{{/description}}{{^description}}{{classname}}{{/description}}
*/

{/* ENUMS FOR FORM VALIDATIONS */}
{{#models}}{{#model}}
    
{{#hasEnums}}
{{#vars}}
{{#isEnum}}

const {{#lambda.pascalcase}}{{baseName}}{{/lambda.pascalcase}}Validation = () => { 
  return(
    [
{{#allowableValues}}
      {{#enumVars}}{{{value}}}{{^last}}, {{/last}}{{/enumVars}}
{{/allowableValues}}
    ]
  )
};
{{/isEnum}}
{{/vars}}
{{/hasEnums}}

{{/model}}{{/models}}

{/* MUSTACHE FORM VALIDATIONS */}
const validationSchema = Yup.object().shape({
{{#models}}{{#model}}
    {{#allVars}}
    {{^isContainer}}
    {{#isPrimitiveType}}{{#isBoolean}}{{baseName}}: Yup.boolean(){{/isBoolean}}{{^isBoolean}} {{#lambda.camelcase}}{{baseName}}{{/lambda.camelcase}}: Yup.{{#lambda.lowercase}}{{datatype}}{{/lambda.lowercase}}(){{/isBoolean}}{{#isEnum}}.oneOf({{#lambda.pascalcase}}{{baseName}}{{/lambda.pascalcase}}Validation(), 'Invalid value selected for {{name}}'){{/isEnum}}
    {{#isEmail}}.email(){{/isEmail}}
    {{#isBoolean}}.oneOf([true], "The {{name}} value must be true."){{/isBoolean}}
    {{#required}}.required('{{name}} is required.'){{/required}}
    {{#isReadOnly}}{{/isReadOnly}}
    {{#pattern}}.matches( {{pattern}}, '{{name}} must match the provided pattern {{description}}' ){{/pattern}},
    {{/isPrimitiveType}}
    {{/isContainer}}
    {{/allVars}}    
{{#oneOf}}<br>ONEOF * {{{.}}}{{/oneOf}}{{/model}}{{/models}}
});

const {{classname}}Form: React.FC = () => {
  const [add{{classname}}, add{{classname}}Result] = useAdd{{classname}}Mutation();

  const initialValues: {{classname}} = {
    {{#models}}{{#model}}{{#allVars}}{{^isContainer}}{{#isPrimitiveType}}{{^isEnum}}
    {{#isBoolean}}{{name}} : {{defaultValue}},{{/isBoolean}}
    {{#isString}}{{name}} : {{#example}}'{{example}}'{{/example}},{{/isString}}
    {{^isString}}{{^isInteger}}{{^isLong}}{{^isFloat}}{{^isDouble}}{{^isBoolean}}{{name}} : new Date(), {{/isBoolean}}{{/isDouble}}{{/isFloat}}{{/isLong}}{{/isInteger}}{{/isString}}
    {{#isInteger}}{{name}} : 0, {{/isInteger}}
    {{#isFloat}}{{name}} : 0.0, {{/isFloat}}
    {{#isDouble}}{{name}} : 0.00, {{/isDouble}}
    {{#isLong}}{{name}} : 0, {{/isLong}}
    {{/isEnum}}
    {{#isEnum}}{{name}} :   {{classname}}{{#lambda.pascalcase}}{{baseName}}{{/lambda.pascalcase}}Enum[Object.keys({{classname}}{{#lambda.pascalcase}}{{baseName}}{{/lambda.pascalcase}}Enum)[0]]{{^last}}, 
    {{/last}}{{/isEnum}}{{/isPrimitiveType}}{{/isContainer}}{{/allVars}}{{/model}}{{/models}}
  };

  const handleSubmit = (values: FormikValues,
    { setSubmitting }: FormikHelpers<{{classname}}>) => {
    setTimeout(() => {
      console.log(values);
      add{{classname}}(values);
      setSubmitting(false);
    }, 500);
  }

  return (
    <div>
      <Formik
        validateOnBlur={true}
        initialValues={initialValues}
        validationSchema={validationSchema}
        onSubmit={handleSubmit}
      >

        {({ isSubmitting, isValid, errors, setFieldValue, touched, setFieldTouched, handleSubmit }) => (
          <form onSubmit={handleSubmit} className="form">

                    <Accordion
                      defaultActiveKey="1"
                    >
                      <Accordion.Item eventKey="0">
                        <Accordion.Header><FaCogs size={36}/></Accordion.Header>
                        <Accordion.Body>
                          errors: {JSON.stringify(errors)}
                          <br />
                          touched: {JSON.stringify(touched)}
                          <br />
                          add{{classname}}Result: {JSON.stringify(add{{classname}}Result)}
                        </Accordion.Body>
                      </Accordion.Item>

                      <Accordion.Item eventKey="1">
                        <Accordion.Header><FaRegPlusSquare  size={36}/> Add New {{classname}}</Accordion.Header>
                        <Accordion.Body>

        {/* MUSTACHE FORM FIELDS */}
{{#models}}{{#model}}
{{#allVars}}{{^isContainer}}{{#isPrimitiveType}}
        
            <label htmlFor="{{baseName}}" className="nice-form-control">
              <b>{{#lambda.uncamelize}}{{baseName}}{{/lambda.uncamelize}}: {touched.{{#lambda.camelcase}}{{baseName}}{{/lambda.camelcase}} && !errors.{{#lambda.camelcase}}{{baseName}}{{/lambda.camelcase}} && (<span className="okCheck"><FaCheckCircle /> looks good!</span>)}</b>
              
              {{^isString}}{{^isBoolean}}{{^isEnum}}{{#isInteger}}
          {/*{{baseName}} INTEGER FIELD */}
              <Field name="{{#lambda.camelcase}}{{baseName}}{{/lambda.camelcase}}" type="text"
                className={errors.{{#lambda.camelcase}}{{baseName}}{{/lambda.camelcase}}  ? 'form-control field-error' : ' nice-form-control form-control'} />
          {{/isInteger}}{{/isEnum}}{{/isBoolean}}{{/isString}}
              {{^isString}}{{^isBoolean}}{{^isEnum}}{{#isFloat}}
          {/*{{baseName}} FLOAT FIELD */}
              <Field name="{{#lambda.camelcase}}{{baseName}}{{/lambda.camelcase}}" type="text"
                className={errors.{{#lambda.camelcase}}{{baseName}}{{/lambda.camelcase}}  ? 'form-control field-error' : ' nice-form-control form-control'} />
          {{/isFloat}}{{/isEnum}}{{/isBoolean}}{{/isString}}
          {{^isString}}{{^isBoolean}}{{^isEnum}}{{^isInteger}}{{^isFloat}}{{^isLong}}
          {/*{{baseName}} DATE FIELD */}
              <Field name="{{#lambda.camelcase}}{{baseName}}{{/lambda.camelcase}}" type="date"
                className={errors.{{#lambda.camelcase}}{{baseName}}{{/lambda.camelcase}}  ? 'form-control field-error' : ' nice-form-control form-control'} />
          {{/isLong}}{{/isFloat}}{{/isInteger}}{{/isEnum}}{{/isBoolean}}{{/isString}}{{#isString}}{{^isEnum}}
          {/* {{baseName}}  TEXT FIELD */}
              <Field name="{{#lambda.camelcase}}{{baseName}}{{/lambda.camelcase}}" type="text"
                className={errors.{{#lambda.camelcase}}{{baseName}}{{/lambda.camelcase}}  ? 'form-control field-error' : ' nice-form-control form-control'} />    
          {{/isEnum}}{{/isString}}{{#isBoolean}}
          {/* CHECKBOX FIELD */}
              <BSForm.Check
                required
                id="{{#lambda.camelcase}}{{baseName}}{{/lambda.camelcase}}"
                name="{{#lambda.camelcase}}{{baseName}}{{/lambda.camelcase}}"
                onChange={e => {
                  setFieldTouched('{{#lambda.camelcase}}{{baseName}}{{/lambda.camelcase}}', true);
                  setFieldValue('{{#lambda.camelcase}}{{baseName}}{{/lambda.camelcase}}', e.target.checked);
                }}
                isInvalid={!!errors.{{#lambda.camelcase}}{{baseName}}{{/lambda.camelcase}} }                  
                className={errors.{{#lambda.camelcase}}{{baseName}}{{/lambda.camelcase}}  ? 'error ' : ''} />
          {{/isBoolean}}
          {{#isEnum}}
          {/* DROPDOWN FOR ENUM */}
              <BSForm.Select
                name="{{baseName}}"
                className={errors.{{#lambda.camelcase}}{{baseName}}{{/lambda.camelcase}} ? 'form-control field-error' : 'nice-form-control form-control'}
                onChange={e => {
                  setFieldTouched('{{#lambda.camelcase}}{{baseName}}{{/lambda.camelcase}}', true);
                  setFieldValue('{{#lambda.camelcase}}{{baseName}}{{/lambda.camelcase}}', e.target.value);
                }}
              >
                <option value="" label="Select {{#lambda.uncamelize}}{{baseName}}{{/lambda.uncamelize}}" />
                <{{#lambda.pascalcase}}{{baseName}}{{/lambda.pascalcase}}Lookup />
              </BSForm.Select>
              {{/isEnum}}
              <ErrorMessage className='error' name="{{#lambda.camelcase}}{{baseName}}{{/lambda.camelcase}}" component="span" />
            </label>

{{/isPrimitiveType}}{{/isContainer}}{{/allVars}} 
<br /><br />

                    <CoolButton
                      variant={(touched && isValid) ? (isSubmitting ? 'disabled' : 'success') : 'warning'}
                      type="submit"
                      onClick={() => { }}
                    >
                      {isSubmitting && (
                        <Spinner
                          style={ { float: "left" } }
                          as="span"
                          animation="grow"
                          variant="light"
                          aria-hidden="true"
                        />
                      )}
                      <FaCheckCircle size={30} /> Create New {{classname}}
                    </CoolButton>


                        </Accordion.Body>
                      </Accordion.Item>
                    </Accordion>

          </form>
        )}
    </Formik>
    </div >
  );
};

{{#hasEnums}}
{{#vars}}
{{#isEnum}}
/*

lowercase {{#lambda.lowercase}}{{baseName}}Lookup{{/lambda.lowercase}}
uppercase {{#lambda.uppercase}}{{baseName}}Lookup{{/lambda.uppercase}}
snakecase {{#lambda.snakecase}}{{baseName}}Lookup{{/lambda.snakecase}}
pascalcase {{#lambda.pascalcase}}{{baseName}}Lookup{{/lambda.pascalcase}}
camelcase {{#lambda.camelcase}}{{baseName}}Lookup{{/lambda.camelcase}}
kebabcase {{#lambda.kebabcase}}{{baseName}}Lookup{{/lambda.kebabcase}}


*/

{{#isString}}
const {{#lambda.pascalcase}}{{baseName}}{{/lambda.pascalcase}}Lookup = () => { 
  return(
  <>
{{#allowableValues}}
    {{#enumVars}}
    
    <option value={{{value}}} label='{{#lambda.uncamelize}}{{name}}{{/lambda.uncamelize}}' />{{^-last}}{{/-last}}
    
    {{/enumVars}}
{{/allowableValues}}
  </>
  )
};
{{/isString}}

{{^isString}}
const {{#lambda.pascalcase}}{{baseName}}{{/lambda.pascalcase}}Lookup = () => { 
  return(
  <>
{{#allowableValues}}
    {{#enumVars}}
    
    <option value='{{{value}}}' label='{{name}}' />{{^-last}}{{/-last}}
    
    {{/enumVars}}
{{/allowableValues}}
  </>
  )
};
{{/isString}}


{{/isEnum}}
{{/vars}}
{{/hasEnums}}

{{#oneOf}}<br>ONEOF * {{{.}}}{{/oneOf}}{{/model}}{{/models}}

export default {{classname}}Form;
