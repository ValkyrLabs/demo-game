openapi: 3.0.1

# ThorAPI Enhanced Sections
info:
externalDocs:
servers:
tags:
paths:


components:
  parameters:
    id:
      name: id
      in: path
      required: true
      description: The unique identifier of the object to retrieve.
      schema:
        type: string
        format: uuid

  schemas:

    #TestInclude: DOES NOT WORK WITH CURRENT CODEGEN
    #  type: object
    #  description: test the include of a component
    #  properties:
    #    audioFile:
    #      $ref: './audio.yaml#/Audio'
    #    description:
    #      type: string

    ## Backup System - experimental
    BackupConfig:
      type: object
      description: System backup configuration for backup jobs workstation and server
      properties:
        name:
          type: string

        description:
          type: string
          description: source code only backup of test workspace
        
        remoteConfigUrl:
          type: string
          format: url
          description: basically a callback url

        runNumber:
          type: integer
          description: the number of times this has been run before

        percentComplete:
          type: integer
          description: 0-100 percentage of compleion of this backup if known
          
        type:
          description: the type of backup ie Workstation or Server
          type: string
          enum:
            - workstation
            - server
            - desktop
            - laptop
            - device            
        
        priorityLevel:
          type: string
          enum:
            - low
            - medium
            - high
            - critical

        backupDir:
          type: string
          example: /users/jax/project-one
          description: path to the folder that will be backed up

        workingDir:
          type: string
          example: /users/jax/project-one
          description: path to the folder that will be backed up

        skiplist:
          type: string
          description: a json string describing the items to skip in the backup set
          example: node_modules, etc.
          

    ## 6D Management System
    StrategicPriority:
      type: object
      description: Organization-Wide Strategic Priorities
      properties:
        name:
          type: string
        description:
          type: string
          description: high-level description of the strategic priority          
        priorityLevel:
          type: string
          enum:
            - low
            - medium
            - high
            - critical
        imageUrl:
          type: string
          description: URL for the strategic priority
          format: url
          example: https://strategic-images.irl/image.png
        
        startDate:
          type: string
          format: date
        targetDate:
          type: string
          format: date

        goals:
          type: array
          items:
            $ref: '#/components/schemas/Goal'         
        status:
          type: string
          enum: 
            - Not-Started
            - In-Progress
            - Complete
    
    KeyMetric:
      type: object
      description: A Key Metric for Tracking Strategy Results
      properties:
        goalId:
          type: string
          format: uuid
        metricName:
          type: string
        metricValue:
          type: float
          description: actual value of the metric
        targetValue:
          type: float          
          description: expected value of the metric

    Goal:
      type: object
      description: A Strategic Goal
      properties:
        strategicPriorityId:
          type: string
          format: uuid
          description: The strategic priority that this goal supports.
        name:
          type: string
          description: the name of the goal
        description:
          type: string
          description: the description of the goal
        keyMetrics:
          type: array
          items:
            $ref: '#/components/schemas/KeyMetric'          
          description: measurements used to track success
        goalDependencies:
          type: array
          items:
            $ref: '#/components/schemas/GoalDependency'
        expectedOutcome:
          type: string
          description: the positive expected outcome of the goal
          example: faster code execution
        risks:
          type: string
          description: description of the risk if the goal is not successful
          example: lower stock price
        timeline:
          type: string

    GoalDependency:
      type: object
      description: A dependency that a goal depends upon
      properties:
        goalId:
          type: string
          format: uuid
        dependencyOrder:
          type: integer
          description: the order in which this dependency exists
        dependencyName:
          type: string
          description: the name of the dependency

## DEMO GAME
    Game:
      type: object
      description: A DEMO GAME
      properties:
        name: 
          type: string
          description: the name of the game
        weapons:
          type: map
          items:
            $ref: '#/components/schemas/GameWeaponIDX'

    GameWeaponIDX:
      type: object
      description: IDX object that links weapons to games
      properties:
        gameId:
          type: string
          format: uuid
        weaponId:
          type: string
          format: uuid

    Weapon:
      type: object
      description: DEMO weapon that can be used for the game
      properties:
        name: 
          type: string
          description: the name of the weapon
        game:
          $ref: '#/components/schemas/GameWeaponIDX'
        harmLevel:
          type: integer
          description: the the damage output level the weapon can have
          minimum: 0
          maximum: 100
        weight:
          type: integer
          description: how much one of these weapons weighs in lbs
        color:
          type: string
          enum:
            - BLACK
            - CAMO-AIRFORCE
            - CAMO-MARINE
            - CAMO-NAVY
            - CAMO-ARMY
            - GRAY
            - OLIVE
            - SILVER
            - GOLD            
            - EXOTIC
        weaponType:
          type: string
          enum:
            - BALLISTiC
            - PROJECTILE
            - FIRE
            - KINETIC
            - NUCLEAR
            - MUNITIONS
            - MELEE
            - AIRCRAFT            
            - VESSELS
            - BOWS
            - SLINGS
          description: the type of the weapon



    ## SecureField KMS - the ultimate encryption solution
    SecureKey:
      type: object
      description: SecureKey is the KMS for the SecureField keys 
      x-valkyrai-service: microservice
      properties:
        notes:
          description: any notes about the key
          type: string
          maxLength: 1000
          example: "This key was generated by the system"

        algorithm:
          description: the algorithm used for encryption/decryption
          type: string

        version:
          description: the version of this key
          type: string

        keyHash:
          description: the searchable hash of the key itself
          type: string
          minLength: 10
          maxLength: 100

        cipherWorkCost:
          description: the exponential strength of the BCrypt hashing used by the Hashing cipher
          example: 12
          type: integer
          minimum: 10
          maximum: 35
        
        keyValue:
          description: the key itself
          type: string
          minLength: 10
         # x-thorapi-secureField: true

        status:
          type: string
          enum:
            - ACTIVE
            - DEFAULT            
            - ARCHIVED
            - REVOKED
            - INVALID
          x-enum-descriptions:
            - Key is actively used
            - Key is the default to use when no specif key is provided
            - Key is not being used but still valid
            - Key is revoked and MUST NOT be used
            - Key is invalid and will not work
          x-enum-varnames:
            - keyActive
            - keyDefault
            - keyArchived
            - keyRevoked
            - keyInvalid
      required:
        - algorithm
        - version
        - keyValue
        - status

    Build:
      type: object
      description: Represents a ThorAPI build including success or failure
      properties:
        name:
          type: string
        applicationId:
          type: string
          format: uuid
        status:
          type: string
          enum:
            - PENDING
            - RUNNING
            - SUCCESS
            - FAILURE
        projectPath:
          type: string
        testEnumCodegen:
          type: integer
          format: int32
          enum:
            - 0
            - 10
            - 1000
          x-enum-descriptions:
            - 'zero balance'
            - 'money for lunch'
            - 'get on that plane'
          x-enum-varnames:
            - broke
            - poor
            - rich
        mavenHome:
          type: string
          
        outputs:
          type: array
          items:
            $ref: '#/components/schemas/BuildOutput'

        dependencies:
          type: array
          items:
            $ref: '#/components/schemas/Depend'
      required:
        - name
        - status
        - projectPath
        - mavenHome

    BuildOutput:
      type: object
      description: TODO BuildOutput CLASS DESCRIPTION   
      properties:
        applicationId:
          type: string
          format: uuid      
        buildId:
          type: string
          format: uuid
        lastSuccessfulRun:
          type: string
          format: date-time
        success:
          type: boolean
        output:
          type: string
        solutions:
          type: array
          items:
            $ref: '#/components/schemas/Solution'
      required:
        - buildId
        - timestamp
        - success
        - output

    # because this is a "leaf" object in the heirarchy 
    # no need for it to duplicate the "BaseEntity" fields    
    Solution:
      type: object
      description: TODO Solution CLASS DESCRIPTION   
      properties:
        buildOutputId:
          type: string
          format: uuid
        description:
          type: string
        appliedFix:
          type: boolean
      required:
        - buildOutputId
        - description
        - appliedFix

    # because this is a "leaf" object in the heirarchy 
    # no need for it to duplicate the "BaseEntity" fields
    Depend:
      type: object
      description: TODO Depend CLASS DESCRIPTION   
      properties:
        groupId:
          type: string
        artifactId:
          type: string
        version:
          type: string
        scope:
          type: string
        status:
          type: string
          enum:
            - UP_TO_DATE
            - OUTDATED
            - MISSING
        buildId:
          type: string
          format: uuid
      required:
        - groupId
        - artifactId
        - version

## VALKYRAI SYSTEM

    LlmDetails:
      type: object
      description: TODO LlmDetails CLASS DESCRIPTION   
      properties:
        name:
          type: string
          description: The name of the LLM
        version:
          type: string
          description: The vendor-specific version of the LLM
          example: v3.0.3-B8
        notes:
          type: string
          description: Notes on the LLM implementation
        role:
          type: string
          enum: [user, assistant]
          description: the user role to set for the target LLM
        provider:
          type: string
          enum: [valkyrai, openai, llama, phi, gemma, mistral, claude, gemini, other]
        apiType:
          type: string
          enum: [openai, ollama, other]

        initialPrompt:
          maxLength: 5000
          minLength: 64
          type: string
          description: the initial prompt to instruct the LLM how to behave
          example: You are a helpful assistant

        apiKey:
          maxLength: 1024
          minLength: 16
          type: string
          description: the api-key to access the llm
          format: password
          example: D6ObBZ599Z3xkuohG3/cogxZYwhxdVyLlIAPanlO35I=
          x-thorapi-secureField: true

        credential:
          type: string
          description: the user name to access the LLM
          x-thorapi-secureField: true

        credentialPassword:
          maxLength: 35
          minLength: 8
          type: string
          description: the password to access the LLM
          format: password
          example: c@nnotBeH@ckd!
          x-field-extra-annotation:
            "@SecureField(encryptionType = SecureField.EncryptionType.HASHED, strength = 10)"

        url:
          type: string
          format: url
          description: the URL to connect to the LLM api
        requestParameters:
          type: string
          description: request parameters to send to the service
        meta:
          type: string
          description: metadata in any text format to be used in client code
      xml:
        name: LLMDetails

    Workflow:
      type: object
      description: ValkyrAI Workflow object manages execution and state of automation workflows
      properties:
        name:
          type: string
          description: short description of this workflow
          example: Customer Email Workflow      
        description:
          type: string
          description: detailed description of this workflow
          example: this workflow is designed to keep customers in the loop
        role:
          type: string
          enum: [user, assistant, system]
          description: the role with permissions to execute the workfow as
        schedule:
          type: string
          example: '*/20 * * * * ?'
          description: cron string to determine when this runs
        meta:
          type: string
          description: metadata in any text format to be used in client code
        tasks:
          description: an array of Tasks to be performed
          type: array
          items:
            $ref: '#/components/schemas/Task'         
        state:
          description: an array stateful objects to be used in the workflow
          type: array
          items:
            $ref: '#/components/schemas/WorkflowState'             
        status:
          description: last known status of the workflow
          type: string
          enum: [ running, stopped, ready, warning, error, disabled ]                 
      xml:
        name: Workflow

    WorkflowState:
      type: object
      description: ValkyrAI Workflow State object holds the state container for a workflow
      properties:
        workflowId:
          type: string
          format: uuid
          description: The workflow this state is participating in
        name:
          description: name of the property that holds the value
          type: string
        value:
          description: value of the property
          type: array
          items:
            type: DataObject
    
    Task:
      type: object
      description: ValkyrAI Task object manages execution and state of automation workflows
      properties:
        description:
          type: string
        workflowId:
          type: string
          format: uuid
          description: The workflow this state is participating in
        role:
          type: string
          enum: [user, assistant]
          description: override the workflow role for specific task -login to a system- the role with permissions -temporary user is created
        modules:
          description: an array of ExecModules to be processed
          type: array
          items:
            $ref: '#/components/schemas/ExecModule'              
        status:
          description: last known status of the task
          type: string
          enum: [ running, stopped, ready, good, warning, error, disabled]            
      xml:
        name: Task

    
    ExecModule:
      type: object
      description: ExecModule is the execution unit of the ValkyrAI Workflow Engine
      properties:
        systemId:
          type: string
          format: uuid
          description: UUID of the system object being mutated/read (if any)
                  
        taskId:
          type: string
          format: uuid
          description: The task this module is executing in
        
        role:
          description: the RBAC role to use in mutating/reading any system object
          type: string
          enum: [ anonymous, user, admin ]
        
        name:
          description: the name of the module
          example: EmailSendModule, OpenApiSpecImportModule
          type: string
        
        notes:
          description: notes about the module
          type: string
        
        integrationAccount:
            $ref: '#/components/schemas/IntegrationAccount'

        className:
          description: the name of the implementation class for this module
          example: EmailModule, PipelineModule, RestApiModule
          type: string          
          
          # pick fields must be populated from a simple string list object at the same endpoint
          x-thorapi-dataField: pick~getAvailableVmodules
          
        moduleType:
          description: the type of module
          type: string
          enum: [ broadcast, io, reader, writer, transformer ]
        moduleData:
          type: string
          maxLength: 3000
          description: json for configuring the module
        status:
          description: last known status of the module
          type: string
          enum: [ running, stopped, ready, good, warning, error, disabled]
        specs:
          description: an array of OpenAPI specs to be referenced by the Tasks/Modules
          type: array
          items:
            $ref: '#/components/schemas/OasOpenAPISpec'          
      xml:
        name: ExecModule

    EventLog:
      type: object
      description: Logs specific Workflow Related Events 
      properties:
        eventDetails:
          type: string
          description: detailed event description
        status:
          type: string
          enum: [ok, error, disabled]
          description: status for event
      xml:
        name: EventLog

    Application:
      type: object
      description: Application represents a logical system
      properties:
        name:
          type: string
          description: name of the application
        description:
          type: string
          description: detailed description of the application
        isTemplate:
          type: boolean
          description: whether this Application is a Template
        type:
          type: string
          enum: [ full-stack, automation, agent, service, front-end, mobile, ci-cd, lambda ]
          description: type of application
        status:
          type: string
          enum: [ready, deployed, staging, error, disabled]
          description: status for event
        entrypointUrl:
          type: string
          format: url
          description: the url to the 'homepage' or service endpoint
        contentMedia:
          type: array
          items:
            $ref: '#/components/schemas/ContentMediaLink'
      xml:
        name: Application


## Practical Magic - tools for life in 2025

# RPA-like local instances
# 

    ReferralLink:
      type: object
      description: revenue generating link with embedded referral code
      properties:
        name:
          type: string
          description: the name of the product or service being referred
        link:
          type: string
          format: url
          description: the referral link url
        description:
          type: string
          description: high-level description of the resource
        referralType:
          type: string
          enum:
            - internal
            - product
            - service
            - media
            - other

## OAS 3 Objects to allow for ValkyrAI magic

    OasOpenAPISpec:
      type: object
      description: An OAS Specification Object (OAS3)
      required:
        - sourcePath
        - sourceType
      properties:
        execModuleId:
          type: string
          format: uuid
          description: optionally link this spec to an executable
        sourceDetails:
          type: string
          description: available additional details or information on the source of this spec (license, authors, etc.)
        sourcePath:
          type: string
          description: the path to the source of this spec
        sourceType:
          type: string
          enum: [valkyrlabs, github, self, gitlab, bitbucket, vendor, notfound ]
          description: the type of source for this spec
        openapi:
          type: string
          enum:
            - "3.0.0"
            - "3.0.1"
            - "3.0.2"
            - "3.1.0"
          x-enum-descriptions:
            - '3.0.0'
            - '3.0.1'
            - '3.0.2'
            - '3.1.0'
        info:
          $ref: '#/components/schemas/OasInfo'
        servers:
          type: array
          items:
            $ref: '#/components/schemas/OasServer'
        paths:
          type: array
          items:
            $ref: '#/components/schemas/OasPath'
        components:
          $ref: '#/components/schemas/OasComponents'
            
    OasInfo:
      type: object
      description: info on the OAS Spec
      properties:
        oasOpenAPISpecId:
          type: string
          format: uuid
        title:
          type: string
        description:
          type: string
        version:
          type: string

    OasServer:
      type: object
      description: a server in the OAS Spec
      properties:
        oasOpenAPISpecId:
          type: string
          format: uuid
        url:
          type: string
        description:
          type: string

    OasComponents:
      type: object
      description: Components object that holds reusable schemas, parameters, responses, examples, and more
      properties:
        oasOpenAPISpecId:
          type: string
          format: uuid
        schemas:
          type: array
          items:
            $ref: '#/components/schemas/OasObjectSchema'
        securitySchemes:
          type: array
          items:
            $ref: '#/components/schemas/OasSecurityScheme'
    
    OasSecurityScheme:
      type: object
      description: a security scheme to access the api
      properties:
        oasComponentsId:
          type: string
          format: uuid    
        name:
          type: string
          description: the name of the security scheme
    
    OasPath:
      type: object
      description: a path in the OAS Spec
      properties:
        path:
          type: string
          description: the URI of the path (e.g., /some/path/to/object)
        oasOpenAPISpecId:
          type: string
          format: uuid
        summary:
          type: string
        description:
          type: string
        get:
          $ref: '#/components/schemas/OasOperation'
        put:
          $ref: '#/components/schemas/OasOperation'
        post:
          $ref: '#/components/schemas/OasOperation'
        delete:
          $ref: '#/components/schemas/OasOperation'

    OasOperation:
      type: object
      description: an operation in the OAS Spec
      properties:
        description:
          type: string
          description: description of the application
        oasPathId:
          type: string
          format: uuid
        summary:
          type: string
        operationId:
          type: string
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/OasParameter'
        responses:
          type: array
          items:
            $ref: '#/components/schemas/OasResponse'

    OasParameter:
      type: object
      description: a parameter to a request in the OAS Spec
      properties:
        oasOperationId:
          type: string
          format: uuid
        name:
          type: string
        location:
          type: string
          enum:
            - query
            - header
            - path
            - cookie
        description:
          type: string
        required:
          type: boolean
        schema:
          $ref: '#/components/schemas/OasObjectSchema'

    OasResponse:
      type: object
      description: a response in the OAS Spec
      properties:
        oasOperationId:
          type: string
          format: uuid      
        description:
          type: string
        content:
          type: array
          items:
            $ref: '#/components/schemas/OasObjectSchema'

    OasObjectSchema:
      type: object
      description: a schema object in the OAS Spec
      properties:
        oasComponentsId:
          type: string
          format: uuid    
        oasParameterId:
          type: string
          format: uuid
        oasResponseId:
          type: string
          format: uuid
        type:
          type: string
        format:
          type: string

        oasEnum:
          type: array
          items:
            $ref: '#/components/schemas/OasEnum'
        required:
          type: array
          items:
            $ref: '#/components/schemas/OasRequired'

    OasRequired:
      type: object
      description: a required item in the OAS Spec
      properties:
        oasObjectSchemaId:
          type: string
          format: uuid
        type:
          type: string
    
    
    OasEnum:
      type: object
      description: an enum in the OAS Spec
      properties:
        oasObjectSchemaId:
          type: string
          format: uuid
        type:
          type: string

### LEGACY Stack
    Stack:
      required:
        - name
        - schemaData
      type: object
      description: A Stack is a runnable configuration for an Application
      properties:
        execModuleId:
          type: string
          format: uuid
        category:
          type: string
          description: category of generated output
          enum:
            - Full Stack
            - Front End
            - API
            - Data Library
            - Infrastructure
            - Documentation
        name:
          type: string
          description: Name of the service API displayed in the UI
          example: My New Stack
        artifactId:
          maxLength: 256
          type: string
          description: 'Name of the output build file(s) ie: mvn ArtifactID'
          example: valkyrai
        applicationId:
          type: string
          format: uuid
          description: Id of the Application that this Stack belongs to, if any
        adminServerHost:
          maxLength: 256
          type: string
          description: host (FQDN) name of to connect to the admin server -- do not
            include 'http(s):' or slashes
          example: www.mycompany.com
          x-thorapi-dataField: fieldGroup=admin-config, advanced=true
        adminServerPort:
          maxLength: 256
          type: string
          description: port of to connect to the admin server
          example: "8009"
          x-thorapi-dataField: fieldGroup=admin-config, advanced=true
        hostName:
          maxLength: 256
          type: string
          description: host of this service (FQDN) -- do not include 'http(s):' or
            slashes
          example: localhost
          x-thorapi-dataField: fieldGroup=service-config, advanced=true
        hostPort:
          maxLength: 5
          type: string
          description: port of this service
          example: "8099"
          x-thorapi-dataField: fieldGroup=service-config, advanced=true
        orgName:
          maxLength: 256
          type: string
          description: the name of the organization owner of the service used in classpath
          example: Valkyr Labs Inc.
          x-thorapi-dataField: fieldGroup=github-settings, advanced=true
        gitUser:
          maxLength: 256
          type: string
          description: The name of the git USER or ORG to push generated stack code
          example: Valkyr Labs Inc
          x-thorapi-dataField: fieldGroup=github-settings, advanced=true
        gitRepo:
          maxLength: 256
          type: string
          description: The repository where the output Project will be pushed after
            generation
          example: MyValkyrAIApp
          x-thorapi-dataField: fieldGroup=github-settings, advanced=true
        skipSwaggerGen:
          type: boolean
          description: Whether to skip Swagger API build during Generation
          default: false
          x-thorapi-dataField: fieldGroup=generator-config, advanced=true
        skipJavaGen:
          type: boolean
          description: Whether to skip Java Services and DAO build during Generation
          default: false
          x-thorapi-dataField: fieldGroup=generator-config, advanced=true
        skipDbGen:
          type: boolean
          description: Whether to skip Database Modification during Generation
          default: false
          x-thorapi-dataField: fieldGroup=generator-config, advanced=true
        skipReactGen:
          type: boolean
          description: Whether to skip React Front End during Generation
          default: false
          x-thorapi-dataField: fieldGroup=generator-config, advanced=true
        dbGenDropTable:
          type: boolean
          description: Will rename and any conflicting pre-existing tables during
            generation
          default: true
          x-thorapi-dataField: fieldGroup=generator-config, advanced=true
        
        thorApiSecureKey:
          maxLength: 2560
          type: string
          description: Secure key used to encrypt the data in the new platform
          example: =W34sdcwdsfwC34W34sdcwdsfwC34W34sdcwdsfw=
          x-thorapi-secureField: true

        dbUrl:
          maxLength: 256
          type: string
          description: database url for the system
          example: jdbc:mysql//db.myco.com
          x-thorapi-dataField: fieldGroup=database-config
        dbName:
          maxLength: 256
          type: string
          description: 'db name (schema name) for the system NOTE: must exist prior
            to initialization'
          example: ValkyrAIApp1
          x-thorapi-dataField: fieldGroup=database-config
        dbUser:
          maxLength: 256
          type: string
          description: database user for the system
          example: igniteuser
          x-thorapi-dataField: fieldGroup=database-config
          x-thorapi-secureField: true

        dbPassword:
          maxLength: 256
          type: string
          description: database password for the system
          format: password
          example: hard2Gu3ss
          x-thorapi-dataField: fieldGroup=database-config
          x-thorapi-secureField: true

        schemaName:
          maxLength: 256
          type: string
          description: 'Name of the DB Schema to connect to  NOTE: must exist prior
            to initialization'
          example: starter
          x-thorapi-dataField: advanced=true, fieldGroup=database-config

        language:
          type: string
          description: Backend Stack Service Language
          enum:
            - valkyrai_java_spring
            - valkyrai_kotlin_spring

        templateRepo:
          type: string
          description: Stack template repo
          enum:
            - java_spring
            - typescript_rtk_bootstrap

        schemaData:
          maxLength: 1000000
          minLength: 20
          type: string
          description: YAML Swagger/OpenAPI Schema
          example: <your schema here>
          
        schemaFileName:
          maxLength: 256
          type: string
          description: File name containing Schema definition
          example: ignite_commerce.yml
       
        status:
          type: string
          description: Current Stack status
          enum:
            - available
            - syntax_error
            - compilation_error
            - runtime_error
            - database_error
            - locked
      
      xml:
        name: Stack

## Sage Chat API
    ChatMessage:
      type: object
      description: A Chat message sent to a recipient
      properties:
        sessionId:
          type: string
        connected:
          type: boolean
          description: if this chat message is conencted to a service (ws)
        json:
          type: string
          maxLength: 3000
        sourceType:
          type: string
          description: type of the message source
          enum:
            - api
            - server_log
            - p2p
        sourceOwner:
          type: string
          format: uuid
        role:
          type: string
          enum: [user, assistant]
        content:
          maxLength: 100000
          minLength: 10
          type: string
          description: the message to send to the chat service
          example: What is the next step for our adventure?

    ChatResponse:
      type: object
      description: Chatresponse from the other side of the communication
      properties:
        sessionId:
          type: string
        json:
          type: string
          maxLength: 3000
        sourceType:
          type: string
          description: type of the message source
          enum:
            - api
            - server_log
            - p2p
        sourceOwner:
          type: string
          format: uuid
        role:
          type: string
          enum: [user, assistant]
        content:
          maxLength: 100000
          minLength: 10
          type: string
          description: the response fro the chat service
          example: We must cross the mighty Mississippi

## Basic Functionality Section
    Reaction:
      required:
        - target
        - value
      type: object
      description: Reaction allows for tagging any content in the system with an emoji
      properties:
        targetObject:
          type: string
          format: uuid
          description: UUID of the system object
          example: ABC234
        reaction:
          type: string
          description: the reaction to the item
          enum:
            - like
            - dislike
            - neutral
            - angry
            - sad
            - question
          example: "neutral"

    Principal:
      required:
        - email
        - password
        - username
      type: object
      description: The Valkyr Principal. Represents a user, service, or agent in the system with preferences and privileges.
      properties:
        firstName:
          type: string
          description: first name of user (encrypted)
          example: Peace
          x-thorapi-dataField: fieldGroup=personal-details
          x-thorapi-secureField: true

        middleName:
          type: string
          description: middle name of user
          example: Love
          x-thorapi-dataField: fieldGroup=personal-details
          x-thorapi-secureField: true          

        lastName:
          type: string
          description: last name of user (encrypted)
          example: Harmony
          x-thorapi-secureField: true

        username:
          maxLength: 60
          minLength: 5
          type: string
          description: Your account user name
          example: Sparky
          x-thorapi-dataField: fieldGroup=personal-details, unique=true
        
        password:
          minLength: 8
          type: string
          description: Your account password
          format: password
          example: HardToGuess1980
          x-field-extra-annotation:
            "@SecureField(encryptionType = SecureField.EncryptionType.HASHED, strength = 10)"

        fingerprint:
          type: string
          description: Encrypted identity (Facial Recognition, Fingerprint Scanner,
            etc.)
          readOnly: true
          example: DK$DFSJaraDD
          x-thorapi-dataField: advanced=true
          x-thorapi-secureField: true

        federalIdentification:
          pattern: ^\d{3}-\d{2}-\d{4}$
          default: 333-22-4444
          type: string
          description: SSN or a 10 digit federal government ID (encrypted)
          example: "111-22-3333"
          x-thorapi-secureField: true

        residenceCountry:
          minLength: 3

          type: string
          description: Country of residence 3-character code
          example: USA
          x-thorapi-dataField: advanced=true
          x-thorapi-secureField: true

        stateIdentification:
          minLength: 10
          # maxLength: 10
          pattern: ^\d{10}$
          type: string
          description: Driver's License or a 10 digit state government ID
          example: 3333333333
          default: 2222222222
          x-thorapi-dataField: advanced=true
          x-thorapi-secureField: true

        residenceState:
          minLength: 2
          # maxLength: 2
          type: string
          description: State of residence 2-character code (USA)
          example: CA
          x-thorapi-dataField: advanced=true
          x-thorapi-secureField: true

        email:
          pattern: ^.+@[^.].*.[a-z]{2,}$
          type: string
          description: The main email address for the user (encrypted)
          format: email
          example: wiley.coyote@acme-corp.com
          x-thorapi-dataField: unique=true
          # x-thorapi-secureField: true

        social:
          type: string
          description: The username for your primary social account (if any)
          format: url
          example: https://twitter.com/ValkyrAI
          x-thorapi-secureField: true

        bio:
          type: string
          description: More in-depth information about you and your account
          maxLength: 100000

        notes:
          type: string
          example: Notes about this account
          maxLength: 100000

        avatarUrl:
          type: string
          description: URL for the user avatar image
          format: url
          example: https://img.com/mypic.png
        
        # for now one per user
        organizationId:
          type: string
          format: uuid

        organization:
          $ref: '#/components/schemas/Organization'
          
        addresses:
          type: array
          items:
            $ref: '#/components/schemas/Address'

        acceptedCookies:
          type: boolean
          description: Whether the user accepted the use of cookies
          default: false
          x-thorapi-dataField: advanced=true, fieldGroup=signup

        acceptedTos:
          type: boolean
          description: Whether the user accepted the terms of service
          default: false
          x-thorapi-dataField: advanced=true, fieldGroup=signup

        # Spring Security section
        enabled:
          type: boolean
          description: Spring Security User field whether the user is enabled
          default: true
          x-thorapi-dataField: advanced=true, fieldGroup=accountStatus
        credentialNonExpired:
          type: boolean
          description: Spring Security User field whether the user's login credentials
            have expired
          default: true
          x-thorapi-dataField: advanced=true, fieldGroup=accountStatus
        accountEnabled:
          type: boolean
          description: Spring Security User field whether the user account is enabled
          default: true
          x-thorapi-dataField: advanced=true, fieldGroup=accountStatus
        accountNonLocked:
          type: boolean
          description: Spring Security User field whether the user account is locked
          default: true
          x-thorapi-dataField: advanced=true, fieldGroup=accountStatus
        accountNonExpired:
          type: boolean
          description: Spring Security User field whether the user account has expired
          default: false
          x-thorapi-dataField: advanced=true, fieldGroup=accountStatus

        roles:
          x-thorapi-dataField: advanced=true, fieldGroup=accountStatus
          description: the granted roles (or null if the granted authority cannot be expressed as a String with sufficient precision).
          type: array
          items:
            $ref: '#/components/schemas/Role'

        authorityList:
          x-thorapi-dataField: advanced=true, fieldGroup=accountStatus
          description: the granted authorities (or null if the granted authority cannot be expressed as a String with sufficient precision).
          type: array
          items:
            $ref: '#/components/schemas/Authority'
          
      xml:
        name: User

    Organization:
      required:
        - name
      type: object
      description: TODO Organization CLASS DESCRIPTION
      properties:
        name:
          type: string
          example: ACME Corp Inc.
        homePage:
          type: string
          format: url
          example: https://www.acme-corp.com
        phone:
          type: string
          example: 415-867-5309
        addressId:
          type: string
          format: uuid
        address:
          $ref: '#/components/schemas/Address'  
      xml:
        name: Organization

    Address:
      required:
        - city
        - name
        - state
        - street1
        - postal_code
      type: object
      description: TODO Address CLASS DESCRIPTION
      properties:
        hasWifi:
          type: boolean
        principalId:
          type: string
          format: uuid
        addressType:
          type: string
          description: The type of address
          enum:
            - home
            - mail
            - work
            - school
            - other
          example: "home"         

        name:
          type: string
          description: full name of addressee
          example: Henry Johnson
          x-thorapi-dataField: advanced=true
          x-thorapi-secureField: true

        street1:
          type: string
          description: street address line 1
          example: 123 Daydream Blvd.
        
        street2:
          type: string
          description: street address line 2
          example: Apt. 7

        city:
          type: string
          description: full name of city
          example: San Francisco
          x-thorapi-dataField: advanced=true
          x-thorapi-secureField: true
          
        state:
          minLength: 2
          type: string
          description: State of residence 2-character code (USA)
          example: CA
          x-thorapi-dataField: advanced=true
          x-thorapi-secureField: true
        
        country:
          maxLength: 3
          minLength: 3
          example: USA
          type: string
          description: 3 character country code (upper case) 
        
        postal_code:
          maxLength: 10
          minLength: 10
          type: string
          pattern: ^\d{5}-\d{4}$
          description: 5+4 digit zip code
          example: "94210-0000"
      
      xml:
        name: Address
  
## CMS

    ContentData:
      type: object
      description: TODO ContentData CLASS DESCRIPTION
      required:
        - name
      properties:
        authorName:
          type: string
          example: Jimjam McYoyo
        title:
          type: string
          example: Amazing Things Happened
        subtitle:
          type: string
          example: Many detailed things about all the things that hapened.
        contentUrl:
          type: string
          example: The url to the location of the full content
          maxLength: 500
          minLength: 8

        contentData:
          type: string
          example: The full content
          maxLength: 500000
          minLength: 1
        
        contentType:
          type: string
          example: CodeGen
          enum:
            - plaintext
            - markdown
            - json
            - yaml
            - audio
            - video
            - url
            - binary
                 
        thumbnailImage:
          type: string
          description: The large image (optional) for your content
          format: url
          example: https://valkyrlabs.com/assets/VALKYR_LABS_INC_LOGO-BKV9JIdt.png
        largeImage:
          type: string
          description: The large image (optional) for your content
          format: url
          example: https://valkyrlabs.com/assets/VALKYR_LABS_INC_LOGO-BKV9JIdt.png
        category:
          type: string
          example: CodeGen
          enum:
            - CodeGen
            - DOCS
            - BLOG
            - Product
            - SECURITY
            - Event            

        status:
          type: string
          example: editing
          enum:
            - holding
            - editing
            - published
        releaseDate:
          type:  string
          format: "date-time"
          description: the release date (used to automate publishing)
        contentMedia:
          type: array
          description: media contained in or referenced by the content
          items:
            $ref: '#/components/schemas/ContentMediaLink'
        principalId:
          description: the author or attibuted entity
          type: string
          format: uuid
        principal:
          description: the author object
          $ref: '#/components/schemas/Principal'
      xml:
        name: ContentData

    ContentMediaLink:
      type: object
      description: link to images, videos, audio, and other content media
      required:
        - contentId
      properties:
        applicationId:
          type: string
          format: uuid      
          description: used when linked to an Application
        contentDataId:
          type: string
          format: uuid
          description: used when linked to ContentData
        contentUse:
          type: string
          description: specialized usage for the media object if any
          enum:
            - none
            - screenshot
            - selfie
            - portrait
            - promotional
            - informational
            - entertainment
            - product
            - support
            - training
          
        contentType:
          type: string
          description: content type of the media object
          enum:
            - image
            - icon
            - video
            - audio
            - text
            - json
            - yaml
            - xml
            - markdown
            - spreadsheet
            - pdf
        mediaUrl: 
          type: string
          format: url
          description: url to the media object

## Ratings (formerly CSAT)

    Rating:
      type: object
      description: TODO Rating CLASS DESCRIPTION
      required:
        - contentId
      properties:
        targetType:
          type: string
          enum:
            - homepage
            - blog
            - product
            - none
          description: target object type for the rating and comments
        contentId:
          type: string
          format: uuid
          description: The unique identifier for the content item
        comments:
          type: string
          example: Your real feelings
          maxLength: 100000
        url:
          type: string
          example: The URL of the rating record is about
          maxLength: 500
        rating:
          type:  "integer"
          format: "int64"
          minimum: 0
          maximum: 10
      xml:
        name: Rating


    ## THORUX Section    

    UserPreferences:
      type: object
      description: Various System User Preferences
      properties:
        preference:
          type: string
          description: The value of the User Preferences
          example: "darquartz"
        preferenceType:
          type: string
          description: The type of the preference
          enum:
            - ux-layout
            - ux-mode
            - ux-theme
            - measurement

    ThorUXMeta:
      type: object
      description: Metadata for ThorUX components.
      properties:
        thoruxComponents:
          type: string
          description: Temporary string holder for config data.
          example: "theme: odin, locale: en"

    ThorUXComponent:
      type: object
      description: TODO ThorUXComponent CLASS DESCRIPTION
      properties:
        componentType:
          type: string
          description: The type of the UX component.
          example: "button"
        status:
          type: string
          description: The status of the component in the UX.
          enum:
            - ready
            - pending
            - disabled 
            - hidden
          example: "ready"
        settings:
          type: string
          description: The option for the component in the UX.
          enum:
            - opt1
            - opt2
            - opt3 
            - opt4
          example: "opt1"

    ## Spring Security section
    Login:
      type: object
      description: TODO Login CLASS DESCRIPTION
      properties:
        username:
          type: string
          maxLength: 64
        password:
          type: string
          x-starter-secureField: true
        description:
          type: string

    Logout:
      type: object
      description: Logout functionality
      properties:
        description:
          type: string
          
    PersistentLogin:
      type: object
      description: Persistent Login for Spring Security
      properties:
        username:
          type: string
          maxLength: 64
        series:
          type: string
          maxLength: 64
        token:
          type: string
          maxLength: 64
        lastUsed:
          type: string
          format: date-time
      required:
        - username
        - series
        - token
        - last_used

    Role:
      type: object
      description: A Role for a Principal in the system
      properties:
        principalId:
          type: string
          format: uuid
        roleName:
          type: string
          description: the role
          enum:
            - ANONYMOUS
            - USER
            - STAFF 
            - ADMIN
          x-enum-descriptions:
            - Anonymous User
            - Authenticated User
            - Staff Role
            - Admin Role
          x-enum-varnames:
            - ROLE_ANONYMOUS
            - ROLE_USER
            - ROLE_STAFF
            - ROLE_ADMIN
          default: ANONYMOUS
          
    Authority:
      type: object
      description: TODO Authority CLASS DESCRIPTION
      properties:
        principalId:
          type: string
          format: uuid
        username:
          type: string
          maxLength: 50
        authority:
          type: string
          maxLength: 50
      required:
        - username
        - authority

    AclSid:
      type: object
      description: System ID of the ACL
      properties:
        sid:
          type: string
          maxLength: 245
          nullable: true
        principal:
          type: string
          format: uuid
          nullable: true

    AclClass:
      type: object
      description: Problematic class for ACL
      properties:
        className:
          type: string
          maxLength: 245
          nullable: true

    AclObjectIdentity:
      type: object
      description: ACL identity for an object
      properties:
        objectIdClass:
          type: string
          format: uuid
          nullable: true
        objectIdIdentity:
          type: string
          format: uuid
          nullable: true
        parentObject:
          type: string
          format: uuid
          nullable: true
        ownerSid:
          type: string
          format: uuid
          nullable: true
        entriesInheriting:
          type: integer
          format: int32
          nullable: true

    AclEntry:
      type: object
      description: TODO AclEntry CLASS DESCRIPTION
      properties:
        aclObjectOdentity:
          type: string
          format: uuid
          nullable: true
        aceOrder:
          type: integer
          format: int32
          nullable: true
        sid:
          type: string
          format: uuid
          nullable: true
        mask:
          type: integer
          format: int32
          nullable: true
        granting:
          type: integer
          format: int32
          nullable: true
        auditSuccess:
          type: integer
          format: int32
          nullable: true
        auditFailure:
          type: integer
          format: int32
          nullable: true

    IntegrationAccount:
      type: object
      description: An integration account to authenticate workflows with various systems
      properties:
        execModuleId:
          type: string
          format: uuid
        accountName:
          type: string
          description: account name
          example: STRIPE, Shopify, Gmail, X.com
        
        username:
          type: string
          description: account username
          example: STRIPE, Shopify, Gmail, X.com

        password:
          type: string
          description: account password - encrypted
          x-starter-secureField: true
        
        accountId:
          type: "string"
          x-starter-secureField: true
        
        
        status:
          type: string
          description: Integration Connection Status
          enum:
            - ready
            - closed
            - executed
            - error
        
        verified:
          type: "boolean"
          default: false
      xml:
        name: Account
  
  ## SHEETSTER SECTION
  
    Workbook:
      type: object
      description: Sheetster Workbook Spreadsheet
      properties:
        name:
          type: string
          description: name of the workbook
          example: My Workbook
        sheets:
          type: array
          description: the sheets in the workbook
          items:
            $ref: '#/components/schemas/Sheet'
        formats:
          type: array
          description: the sheets in the workbook
          items:
            $ref: '#/components/schemas/Format'
        status:
          type: string
          enum:
            - OPEN
            - CLOSED            
            - ARCHIVED
            - ERROR
            - INVALID
          x-enum-descriptions:
            - Workbook is open and is actively used
            - Workbook is closed and not in use
            - Workbook is not being used but still valid
            - Workbook is in an error state
            - Workbook is invalid and will not work
          x-enum-varnames:
            - WorkbookOpen
            - WorkbookClosed
            - WorkbookArchived
            - WorkbookError
            - WorkbookInvalid            
      xml:
        name: Workbook

    Sheet:
      type: object
      description: Sheetster sheet
      properties:
        workbookId:
          type: string
          format: uuid      
          description: the workbook containing this sheet
          example: 3fa85f64-5717-4562-b3fc-2c963f66afa7
        name:
          type: string
        cells:
          type: array
          items:
            $ref: '#/components/schemas/Cell'
        rows:
          type: array
          items:
            $ref: '#/components/schemas/SheetRow'
        cols:
          type: array
          items:
            $ref: '#/components/schemas/SheetColumn'
        namedRanges:
          type: array
          items:
            $ref: '#/components/schemas/NamedRange'
        mergeRanges:
          type: array
          items:
            $ref: '#/components/schemas/MergeRange'
        blankRanges:
          type: array
          items:
            $ref: '#/components/schemas/BlankRange'
        charts:
            type: array
            items:
                $ref: '#/components/schemas/Chart'
        pivotTables:
          type: array
          items:
            $ref: '#/components/schemas/PivotTable'
      xml:
        name: Sheet
    
    Cell:
      type: object
      description: Sheetster spreadsheet cell
      properties:
        sheetId:
          type: string
          format: uuid      
          description: the sheet containing this cell
          example: 3fa85f64-5717-4562-b3fc-2c963f66afa6
        comment:
            type: string
            description: "Cell comment (if any)"
        hyperlink:
            type: string
            description: "If this cell is a hyperlink, store the target URL here"
        
        sheetRowId:
          type: string
          format: uuid
        row:
          $ref: '#/components/schemas/SheetRow'        
        
        sheetColumnId:
          type: string
          format: uuid
        column:
          $ref: '#/components/schemas/SheetColumn'        
        
        stringValue:
          type: string
        
        numberValue:
          type: number
          format: double

        formula:
          description: if this cell contains a formula calculated value
          $ref: '#/components/schemas/Formula'

        format:
          $ref: '#/components/schemas/Format'
      xml:
        name: Cell

    SheetRow:
      type: object
      description: Sheetster Spreadsheet Row
      properties:
        sheetId:
          type: string
          format: uuid      
          description: the sheet containing this row
          example: 3fa85f64-5717-4562-b3fc-2c963f66afa6
        rowIndex:
          type: integer
        hidden:
            type: boolean
        collapsed:
            type: boolean
        outlineLevel:
            type: integer
            description: "For nested grouping"          
        cells:
          type: array
          items:
            $ref: '#/components/schemas/Cell'

    SheetColumn:
      type: object
      description: Sheetster Spreadsheet Column
      properties:
        sheetId:
          type: string
          format: uuid      
          description: the sheet containing this column
          example: 3fa85f64-5717-4562-b3fc-2c963f66afa6
        colIndex:
          type: integer
        hidden:
            type: boolean
        collapsed:
            type: boolean
        outlineLevel:
            type: integer
            description: "For nested grouping"                    
        cells:
          type: array
          items:
            $ref: '#/components/schemas/Cell'

    NamedRange:
      type: object
      description: Sheetster Named CellRange
      properties:
        sheetId:
          type: string
          format: uuid      
          description: the sheet containing this named range
          example: 3fa85f64-5717-4562-b3fc-2c963f66afa6
        name:
          type: string
        startCell:
          $ref: '#/components/schemas/Cell'
        endCell:
          $ref: '#/components/schemas/Cell'

    MergeRange:
      type: object
      description: Sheetster Merged CellRange
      properties:
        sheetId:
          type: string
          format: uuid      
          description: the sheet containing this merged range
          example: 3fa85f64-5717-4562-b3fc-2c963f66afa6
        startCell:
          $ref: '#/components/schemas/Cell'
        endCell:
          $ref: '#/components/schemas/Cell'

    BlankRange:
      type: object
      properties:
        sheetId:
          type: string
          format: uuid      
          description: the sheet containing this blank range
          example: 3fa85f64-5717-4562-b3fc-2c963f66afa6
        startCell:
          $ref: '#/components/schemas/Cell'
        endCell:
          $ref: '#/components/schemas/Cell'

    Formula:
      type: object
      description: Sheetster Formula
      properties:
        workbookId:
          type: string
          format: uuid      
          description: the sheet where this formula will display
          example: 3fa85f64-5717-4562-b3fc-2c963f66afa7
        sheetId:
          type: string
          format: uuid      
          description: the sheet where this formula will display
          example: 3fa85f64-5717-4562-b3fc-2c963f66afa6
        expression:
          type: string
          description: the human readable formula string
          example: =sum(a1+b1)
        ptgRefs:
          description: the cell references in this formula
          type: array
          items:
            $ref: '#/components/schemas/PtgRef'
        calculatingPtgs:
          type: array
          description: the calculations in this formula
          items:
            $ref: '#/components/schemas/Ptg'

    PtgRef:
      type: object
      description: Sheetster Formula Reference
      properties:
        sheetId:
          type: string
          format: uuid      
        formulaId:
          type: string
        reference:
          type: string
        type:
          type: string
          enum:
            - PtgAdd
            - PtgSub
            - PtgMul
            - PtgDiv
          x-enum-descriptions:
            - Addition operation
            - Subtraction operation
            - Multiplication operation
            - Division operation
          x-enum-varnames:
            - ptgAdd
            - ptgSub
            - ptgMul
            - ptgDiv

    Ptg:
      type: object
      description: Sheetster Formula Function Reference
      properties:
        sheetId:
          type: string
          format: uuid      
        formulaId:
          type: string

        stringValue:
          type: string
        
        numberValue:
          type: number
          format: double

        type:
          type: string
          enum:
            - PtgInt
            - PtgStr
            - PtgAttr
            - PtgFunc
            - PtgFuncVar
            - PtgName
            - PtgRef
            - PtgArea
          x-enum-descriptions:
            - Integer constant in formula
            - String constant in formula
            - Attribute specifying formula behavior
            - Function reference in formula
            - Variable function reference in formula
            - Named reference in formula
            - Cell reference in formula
            - Area (range) reference in formula
          x-enum-varnames:
            - ptgInt
            - ptgStr
            - ptgAttr
            - ptgFunc
            - ptgFuncVar
            - ptgName
            - ptgRef
            - ptgArea

    PivotTable:
      type: object
      description: Sheetster PivotTable
      properties:
        sheetId:
          type: string
          format: uuid      
        sourceRange:
          $ref: '#/components/schemas/NamedRange'
        dataRange:
          $ref: '#/components/schemas/NamedRange'

    Format:
      type: object
      description: Sheetster Formatting Object
      properties:
        workbookId:
          type: string
          format: uuid      
          description: the workbook containing this format
          example: 3fa85f64-5717-4562-b3fc-2c963f66afa7
        fontWeight:
          type: integer
          enum:
            - 200
            - 400
            - 700
          x-enum-descriptions:
            - Light font weight
            - Regular font weight
            - Bold font weight
          x-enum-varnames:
            - fontWeightLight
            - fontWeightRegular
            - fontWeightBold
        fontSize:
          type: integer
          example: 20
        fontFace:
          type: string
          example: "Arial"
        underline:
          type: integer
          enum:
            - 0
            - 1
            - 2
            - 21
            - 22
          x-enum-descriptions:
            - No underline
            - Single underline
            - Double underline
            - Single accounting underline
            - Double accounting underline
          x-enum-varnames:
            - underlineNone
            - underlineSingle
            - underlineDouble
            - underlineSingleAccounting
            - underlineDoubleAccounting
        color:
          type: string
          enum:
            - Black
            - White
            - Red
            - BrightGreen
            - Blue
            - Yellow
            - Pink
            - Turquoise
            - DarkRed
            - Orange
            - DarkYellow
            - Green
            - Teal
            - LightBlue
            - Violet
            - Gray80
          x-enum-descriptions:
            - Black color
            - White color
            - Red color
            - Bright green color
            - Blue color
            - Yellow color
            - Pink color
            - Turquoise color
            - Dark red color
            - Orange color
            - Dark yellow color
            - Green color
            - Teal color
            - Light blue color
            - Violet color
            - 80% gray color
          x-enum-varnames:
            - colorBlack
            - colorWhite
            - colorRed
            - colorBrightGreen
            - colorBlue
            - colorYellow
            - colorPink
            - colorTurquoise
            - colorDarkRed
            - colorOrange
            - colorDarkYellow
            - colorGreen
            - colorTeal
            - colorLightBlue
            - colorViolet
            - colorGray80
        alignment-horizontal:
          type: string
          enum:
            - Left
            - Center
            - Right
            - Fill
            - Justify
            - CenterAcrossSelection
          x-enum-descriptions:
            - Left alignment
            - Center alignment
            - Right alignment
            - Fill alignment
            - Justified alignment
            - Center across selected cells
          x-enum-varnames:
            - alignLeft
            - alignCenter
            - alignRight
            - alignFill
            - alignJustify
            - alignCenterAcrossSelection
        alignment-vertical:
          type: string
          enum:
            - Top
            - Middle
            - Bottom
            - Justify
          x-enum-descriptions:
            - Align to top
            - Align to middle
            - Align to bottom
            - Justified alignment
          x-enum-varnames:
            - alignTop
            - alignMiddle
            - alignBottom
            - alignJustify
        pattern:
          type: integer
          enum:
            - 0
            - 1
            - 2
            - 3
            - 4
            - 5
            - 6
            - 7
            - 8
            - 9
          x-enum-descriptions:
            - No pattern
            - Filled pattern
            - Light fill pattern
            - Medium fill pattern
            - Heavy fill pattern
            - Horizontal stripes
            - Vertical stripes
            - Diagonal stripes
            - Diagonal stripes (alternative)
            - Checkerboard pattern
          x-enum-varnames:
            - patternNone
            - patternFilled
            - patternLightFill
            - patternMediumFill
            - patternHeavyFill
            - patternHorizontalStripes
            - patternVerticalStripes
            - patternDiagonalStripes
            - patternDiagonalStripesAlt
            - patternCheckerboard

        border-left:
          $ref: '#/components/schemas/Border'
        border-right:
              $ref: '#/components/schemas/Border'
        border-top:
              $ref: '#/components/schemas/Border'
        border-bottom:
              $ref: '#/components/schemas/Border'

    Border:
      type: object
      description: Sheetster Formatting Border
      properties:
        formatId:
          type: string
          format: uuid      
        style:
          type: string
          enum:
            - None
            - Thin
            - Medium
            - Dashed
            - Dotted
            - Thick
            - Double
            - Hair
            - MediumDashed
            - DashDot
            - MediumDashDot
            - DashDotDot
            - MediumDashDotDot
            - SlantedDashDot
          x-enum-descriptions:
            - No border
            - Thin border
            - Medium border
            - Dashed border
            - Dotted border
            - Thick border
            - Double border
            - Hairline border
            - Medium dashed border
            - Dash-dot border
            - Medium dash-dot border
            - Dash-dot-dot border
            - Medium dash-dot-dot border
            - Slanted dash-dot-dot border
          x-enum-varnames:
            - borderNone
            - borderThin
            - borderMedium
            - borderDashed
            - borderDotted
            - borderThick
            - borderDouble
            - borderHair
            - borderMediumDashed
            - borderDashDot
            - borderMediumDashDot
            - borderDashDotDot
            - borderMediumDashDotDot
            - borderSlantedDashDot
        color:
          type: string
          enum:
            - Black
            - Red
            - Blue
            - Yellow
            - Green
            - Teal
            - Gray50
          x-enum-descriptions:
            - Black color
            - Red color
            - Blue color
            - Yellow color
            - Green color
            - Teal color
            - 50% gray color
          x-enum-varnames:
            - colorBlack
            - colorRed
            - colorBlue
            - colorYellow
            - colorGreen
            - colorTeal
            - colorGray50

    Chart:
      type: object
      description: A spreadsheet chart that can be mapped to/from an OpenXLS ChartHandle.
      properties:
        sheetId:
          type: string
          format: uuid
          description: The UUID of the sheet containing this chart.
        name:
          type: string
          description: Internal name of the chart (like ChartHandle.getChartName()).
          example: "SalesPerformanceChart"
        chartType:
          type: string
          description: The type of chart, corresponding to ChartHandle chart type in OpenXLS.
          enum:
            - Area
            - Bar
            - Column
            - Line
            - Pie
            - Scatter
            - Radar
            - Doughnut
            - Stock
        title:
          type: string
          description: The main title displayed on the chart.
          example: "Monthly Sales Performance"
        axisLabelX:
          type: string
          description: Label for the X axis (if applicable).
          example: "Months"
        axisLabelY:
          type: string
          description: Label for the Y axis (if applicable).
          example: "Revenue (USD)"
        categoryRange:
          type: string
          description: Cell range for the category (X) axis labels. Matches e.g. "Sheet1!A2:A12"
          example: "Sheet1!A2:A12"
        series:
          type: array
          description: Data series definitions for this chart.
          items:
            $ref: '#/components/schemas/ChartSeries'
        embedded:
          type: boolean
          description: Whether chart is embedded in the sheet or is a separate chart sheet.
          default: true
        anchorCell:
          type: string
          description: Top-left cell position where the chart is anchored if embedded.
          example: "B2"
        anchorOffsetX:
          type: integer
          description: Optional offset in pixels from the anchor cell horizontally.
          example: 5
        anchorOffsetY:
          type: integer
          description: Optional offset in pixels from the anchor cell vertically.
          example: 10
        width:
          type: integer
          description: Width of the chart in pixels when embedded.
          example: 400
        height:
          type: integer
          description: Height of the chart in pixels when embedded.
          example: 300

    ChartSeries:
      type: object
      description: Represents one data series in the chart.
      properties:
        chartId:
          type: string
          format: uuid
        name:
          type: string
          description: Name or label of the series.
          example: "Product A"
        valuesRange:
          type: string
          description: The cell range for the data (y-values) in this series.
          example: "Sheet1!B2:B12"
        color:
          type: string
          description: Optional color or style hint for the series.
          example: "#ff9900"
        markerStyle:
          type: string
          description: For line/scatter charts, the style of the data markers.
          example: "Circle"
        showDataLabels:
          type: boolean
          description: Whether to display data labels on this series.
          default: false

    MediaObject:
      type: object
      description: Sheetster Embedded Media Object
      properties:
        sheetId:
          type: string
          format: uuid
        type:
          type: string
          enum:
            - Image
            - Audio
            - Video
            - Shape
          x-enum-descriptions:
            - Image media type
            - Audio media type
            - Video media type
            - Shape media type
          x-enum-varnames:
            - mediaImage
            - mediaAudio
            - mediaVideo
            - mediaShape
        url:
          type: string
        position:-row:
          type: integer
        position-col:
          type: integer

## CRM    
    Customer:
      description: Represents a customer entity for CRM.
      properties:
        customerId:
          type: string
          format: uuid
          description: Associated customer Principal ID.
        customer:
          $ref: '#/components/schemas/Principal'
        status:
          type: string
          enum: 
            - active
            - inactive
            - prospect
          description: Status of the customer.
        role:
          type: string
          enum: 
            - ceo
            - management
            - procurement
            - technical
          description: Role of the contact person within the customer account (e.g., CEO, Procurement, Technical Lead).
      required:
        - customerId

    Opportunity:
      type: object
      description: Represents a sales opportunity related to a customer.
      properties:
        customerId:
          type: string
          format: uuid
          description: The customer associated with the opportunity.
        customer:
          $ref: '#/components/schemas/Customer'
        description:
          type: string
          description: Description of the opportunity.
        totalValue:
          type: number
          format: double
          description: Expected total value of the opportunity.
        currentStatus:
          type: string
          enum: 
            - won          
            - open
            - lost
            - inactive
            - revive
            - legal
            - blocked                        
          description: Status of the opportunity.
        estimatedCloseDate:
          type: string
          format: date-time
          description: Estimated closing date for the opportunity.
      required:
        - customerId
        - description
        - status

    SalesActivity:
      type: object
      description: Represents a sales activity or engagement related to an opportunity.
      properties:
        opportunityId:
          type: string
          format: uuid
          description: The associated opportunity.
        type:
          type: string
          enum: 
            - call
            - meeting
            - email
            - follow-up
          description: Type of the sales activity.
        details:
          type: string
          description: Details about the activity.
        activityDate:
          type: string
          format: date-time
          description: Date and time of the activity.
        performedBy:
          type: string
          format: uuid
          description: The user who performed the activity.
      required:
        - opportunityId
        - type
        - activityDate
        - performedBy

    SalesPipeline:
      type: object
      description: Represents the stages in a sales pipeline.
      properties:
        name:
          type: string
          enum: 
            - lead
            - qualification
            - proposal
            - negotiation
            - closed
          description: Name of the sales stage (e.g., Lead, Qualification, Proposal, Negotiation, Closed).
        sequenceOrder:
          type: integer
          description: The order in which the stages are followed in the sales process.
      required:
        - name
        - order

    Invoice:
      type: object
      description: Represents an invoice sent to a customer.
      properties:
        invoiceId:
          type: string
          format: uuid
        customerId:
          type: string
          format: uuid
          description: The associated customer ID.
        invoiceDate:
          type: string
          format: date-time
        dueDate:
          type: string
          format: date-time
        amount:
          type: number
          format: double
        status:
          type: string
          enum: 
            - draft
            - sent
            - paid
            - overdue
            - canceled
      required:
        - invoiceId
        - customerId
        - invoiceDate
        - dueDate
        - amount
        - status

    Note:
      type: object
      description: Represents a note added to a CRM entity.
      properties:
        noteId:
          type: string
          format: uuid
        associatedEntityId:
          type: string
          format: uuid
          description: ID of the entity (Customer, Opportunity, etc.) the note is attached to.
        entityType:
          type: string
          enum: 
            - customer
            - opportunity
            - contact
            - sales-activity
          description: Type of the associated entity.
        content:
          type: string
          description: The actual note content.
        createdDate:
          type: string
          format: date-time
        createdBy:
          type: string
          format: uuid
          description: The user who created the note.
      required:
        - noteId
        - associatedEntityId
        - entityType
        - content
        - createdDate
        - createdBy

    Product:
      type: object
      description: Represents a product or service in the CRM.
      properties:
        productId:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        unitPrice:
          type: number
          format: double
        status:
          type: string
          enum: 
            - available
            - discontinued
            - out_of_stock
          description: Availability status of the product.
      required:
        - productId
        - name
        - unitPrice
        - status

    LineItem:
      type: object
      description: Represents an order lineitem in a customer order.
      properties:
        salesOrderId:
          type: string
          format: uuid
        productId:
          type: string
          format: uuid
        product:
          $ref: '#/components/schemas/Product'          
        lineItemAmount:
          type: number
          format: double
    
    SalesOrder:
      type: object
      description: Represents an order placed by a customer.
      properties:
        customerId:
          type: string
          format: uuid
          description: The customer who placed the order.
        orderItems:
          type: array
          items:
            $ref: '#/components/schemas/LineItem'
        totalAmount:
          type: number
          format: double
        orderDate:
          type: string
          format: date-time
        status:
          type: string
          enum: 
            - pending
            - shipped
            - delivered
            - canceled
      required:
        - orderId
        - customerId
        - totalAmount
        - orderDate
        - status

    Campaign:
      type: object
      description: Represents a marketing campaign.
      properties:
        campaignId:
          type: string
          format: uuid
        name:
          type: string
          description: Name of the campaign.
        notes:
          type: string
          description: Details about the campaign.
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        status:
          type: string
          enum: 
            - planned
            - active
            - completed
            - canceled
        budget:
          type: number
          format: double
          description: Budget for the campaign.
      required:
        - campaignId
        - name
        - startDate
        - endDate
        - status


  securitySchemes:

    thorapi_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://{username}.valkyrlabs.com:{port}/oauth
          scopes:
            write:items: modify owned items
            read:items: read owned items
