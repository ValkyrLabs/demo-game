openapi: 3.0.1
info:
  title: ValkyrAI CORE API
  description: The API for accessing ValkyrAI services
  termsOfService: https://valkyrlabs.com/tos/
  contact: {email: info@valkyrlabs.com}
  license: {name: AGPL 3.0, url: 'https://www.gnu.org/licenses/agpl-3.0.html'}
  version: 0.9.25
externalDocs: {description: Learn more about ValkyrAI, url: 'https://valkyrlabs.com/vai/docs'}
servers:
- {url: 'http://localhost:8080/v1', description: local server (uses live data)}
- {url: 'https://valkyrlabs.com/v1', description: production server}
tags:
- {name: admins, description: Secured Admin-only calls}
- {name: users, description: Operations available to regular users}
- {name: spreadsheets, description: Pertaining to spreadsheets operations}
paths:
  /BackupConfig:
    get:
      tags: [BackupConfig]
      summary: Retrieve a list of BackupConfigs
      description: Retrieves a list of BackupConfigs.
      x-spring-cacheable: true
      operationId: getBackupConfigList
      responses:
        '200':
          description: Successfully retrieved the list of BackupConfigs.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/BackupConfig'}
        '404': {description: No BackupConfigs were found.}
        '500': {description: Internal server error.}
    post:
      tags: [BackupConfig]
      summary: Create a new BackupConfig
      description: Creates a new BackupConfig.
      operationId: postBackupConfig
      requestBody:
        description: BackupConfig details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/BackupConfig'}
      responses:
        '201':
          description: BackupConfig created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/BackupConfig'}
        '400': {description: Invalid input.}
        '404': {description: BackupConfig not found.}
        '500': {description: Internal server error.}
  /BackupConfig/{id}:
    get:
      tags: [BackupConfig]
      summary: Retrieve a single BackupConfig
      description: Retrieves a single BackupConfig for a specific uid.
      x-spring-cacheable: true
      operationId: getBackupConfig
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the BackupConfig.
      responses:
        '200':
          description: Successfully retrieved the BackupConfig.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/BackupConfig'}
        '404': {description: BackupConfig not found.}
        '500': {description: Internal server error.}
    put:
      tags: [BackupConfig]
      summary: Update an existing BackupConfig
      description: Updates an existing BackupConfig.
      operationId: updateBackupConfig
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the BackupConfig.
      requestBody:
        description: Updated BackupConfig details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/BackupConfig'}
      responses:
        '200':
          description: BackupConfig updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/BackupConfig'}
        '400': {description: Invalid input.}
        '404': {description: BackupConfig not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [BackupConfig]
      summary: Delete a BackupConfig.
      description: Deletes a specific BackupConfig.
      operationId: deleteBackupConfig
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the BackupConfig.
      responses:
        '204': {description: BackupConfig deleted successfully.}
        '404': {description: BackupConfig not found.}
        '500': {description: Internal server error.}
  /Game:
    get:
      tags: [Game]
      summary: Retrieve a list of Games
      description: Retrieves a list of Games.
      x-spring-cacheable: true
      operationId: getGameList
      responses:
        '200':
          description: Successfully retrieved the list of Games.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/Game'}
        '404': {description: No Games were found.}
        '500': {description: Internal server error.}
    post:
      tags: [Game]
      summary: Create a new Game
      description: Creates a new Game.
      operationId: postGame
      requestBody:
        description: Game details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/Game'}
      responses:
        '201':
          description: Game created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Game'}
        '400': {description: Invalid input.}
        '404': {description: Game not found.}
        '500': {description: Internal server error.}
  /Game/{id}:
    get:
      tags: [Game]
      summary: Retrieve a single Game
      description: Retrieves a single Game for a specific uid.
      x-spring-cacheable: true
      operationId: getGame
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Game.
      responses:
        '200':
          description: Successfully retrieved the Game.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Game'}
        '404': {description: Game not found.}
        '500': {description: Internal server error.}
    put:
      tags: [Game]
      summary: Update an existing Game
      description: Updates an existing Game.
      operationId: updateGame
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Game.
      requestBody:
        description: Updated Game details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/Game'}
      responses:
        '200':
          description: Game updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Game'}
        '400': {description: Invalid input.}
        '404': {description: Game not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [Game]
      summary: Delete a Game.
      description: Deletes a specific Game.
      operationId: deleteGame
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Game.
      responses:
        '204': {description: Game deleted successfully.}
        '404': {description: Game not found.}
        '500': {description: Internal server error.}
  /Weapon:
    get:
      tags: [Weapon]
      summary: Retrieve a list of Weapons
      description: Retrieves a list of Weapons.
      x-spring-cacheable: true
      operationId: getWeaponList
      responses:
        '200':
          description: Successfully retrieved the list of Weapons.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/Weapon'}
        '404': {description: No Weapons were found.}
        '500': {description: Internal server error.}
    post:
      tags: [Weapon]
      summary: Create a new Weapon
      description: Creates a new Weapon.
      operationId: postWeapon
      requestBody:
        description: Weapon details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/Weapon'}
      responses:
        '201':
          description: Weapon created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Weapon'}
        '400': {description: Invalid input.}
        '404': {description: Weapon not found.}
        '500': {description: Internal server error.}
  /Weapon/{id}:
    get:
      tags: [Weapon]
      summary: Retrieve a single Weapon
      description: Retrieves a single Weapon for a specific uid.
      x-spring-cacheable: true
      operationId: getWeapon
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Weapon.
      responses:
        '200':
          description: Successfully retrieved the Weapon.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Weapon'}
        '404': {description: Weapon not found.}
        '500': {description: Internal server error.}
    put:
      tags: [Weapon]
      summary: Update an existing Weapon
      description: Updates an existing Weapon.
      operationId: updateWeapon
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Weapon.
      requestBody:
        description: Updated Weapon details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/Weapon'}
      responses:
        '200':
          description: Weapon updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Weapon'}
        '400': {description: Invalid input.}
        '404': {description: Weapon not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [Weapon]
      summary: Delete a Weapon.
      description: Deletes a specific Weapon.
      operationId: deleteWeapon
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Weapon.
      responses:
        '204': {description: Weapon deleted successfully.}
        '404': {description: Weapon not found.}
        '500': {description: Internal server error.}
  /StrategicPriority:
    get:
      tags: [StrategicPriority]
      summary: Retrieve a list of StrategicPrioritys
      description: Retrieves a list of StrategicPrioritys.
      x-spring-cacheable: true
      operationId: getStrategicPriorityList
      responses:
        '200':
          description: Successfully retrieved the list of StrategicPrioritys.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/StrategicPriority'}
        '404': {description: No StrategicPrioritys were found.}
        '500': {description: Internal server error.}
    post:
      tags: [StrategicPriority]
      summary: Create a new StrategicPriority
      description: Creates a new StrategicPriority.
      operationId: postStrategicPriority
      requestBody:
        description: StrategicPriority details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/StrategicPriority'}
      responses:
        '201':
          description: StrategicPriority created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/StrategicPriority'}
        '400': {description: Invalid input.}
        '404': {description: StrategicPriority not found.}
        '500': {description: Internal server error.}
  /StrategicPriority/{id}:
    get:
      tags: [StrategicPriority]
      summary: Retrieve a single StrategicPriority
      description: Retrieves a single StrategicPriority for a specific uid.
      x-spring-cacheable: true
      operationId: getStrategicPriority
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the StrategicPriority.
      responses:
        '200':
          description: Successfully retrieved the StrategicPriority.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/StrategicPriority'}
        '404': {description: StrategicPriority not found.}
        '500': {description: Internal server error.}
    put:
      tags: [StrategicPriority]
      summary: Update an existing StrategicPriority
      description: Updates an existing StrategicPriority.
      operationId: updateStrategicPriority
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the StrategicPriority.
      requestBody:
        description: Updated StrategicPriority details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/StrategicPriority'}
      responses:
        '200':
          description: StrategicPriority updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/StrategicPriority'}
        '400': {description: Invalid input.}
        '404': {description: StrategicPriority not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [StrategicPriority]
      summary: Delete a StrategicPriority.
      description: Deletes a specific StrategicPriority.
      operationId: deleteStrategicPriority
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the StrategicPriority.
      responses:
        '204': {description: StrategicPriority deleted successfully.}
        '404': {description: StrategicPriority not found.}
        '500': {description: Internal server error.}
  /Goal:
    get:
      tags: [Goal]
      summary: Retrieve a list of Goals
      description: Retrieves a list of Goals.
      x-spring-cacheable: true
      operationId: getGoalList
      responses:
        '200':
          description: Successfully retrieved the list of Goals.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/Goal'}
        '404': {description: No Goals were found.}
        '500': {description: Internal server error.}
    post:
      tags: [Goal]
      summary: Create a new Goal
      description: Creates a new Goal.
      operationId: postGoal
      requestBody:
        description: Goal details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/Goal'}
      responses:
        '201':
          description: Goal created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Goal'}
        '400': {description: Invalid input.}
        '404': {description: Goal not found.}
        '500': {description: Internal server error.}
  /Goal/{id}:
    get:
      tags: [Goal]
      summary: Retrieve a single Goal
      description: Retrieves a single Goal for a specific uid.
      x-spring-cacheable: true
      operationId: getGoal
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Goal.
      responses:
        '200':
          description: Successfully retrieved the Goal.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Goal'}
        '404': {description: Goal not found.}
        '500': {description: Internal server error.}
    put:
      tags: [Goal]
      summary: Update an existing Goal
      description: Updates an existing Goal.
      operationId: updateGoal
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Goal.
      requestBody:
        description: Updated Goal details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/Goal'}
      responses:
        '200':
          description: Goal updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Goal'}
        '400': {description: Invalid input.}
        '404': {description: Goal not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [Goal]
      summary: Delete a Goal.
      description: Deletes a specific Goal.
      operationId: deleteGoal
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Goal.
      responses:
        '204': {description: Goal deleted successfully.}
        '404': {description: Goal not found.}
        '500': {description: Internal server error.}
  /GoalDependency:
    get:
      tags: [GoalDependency]
      summary: Retrieve a list of GoalDependencys
      description: Retrieves a list of GoalDependencys.
      x-spring-cacheable: true
      operationId: getGoalDependencyList
      responses:
        '200':
          description: Successfully retrieved the list of GoalDependencys.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/GoalDependency'}
        '404': {description: No GoalDependencys were found.}
        '500': {description: Internal server error.}
    post:
      tags: [GoalDependency]
      summary: Create a new GoalDependency
      description: Creates a new GoalDependency.
      operationId: postGoalDependency
      requestBody:
        description: GoalDependency details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/GoalDependency'}
      responses:
        '201':
          description: GoalDependency created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/GoalDependency'}
        '400': {description: Invalid input.}
        '404': {description: GoalDependency not found.}
        '500': {description: Internal server error.}
  /GoalDependency/{id}:
    get:
      tags: [GoalDependency]
      summary: Retrieve a single GoalDependency
      description: Retrieves a single GoalDependency for a specific uid.
      x-spring-cacheable: true
      operationId: getGoalDependency
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the GoalDependency.
      responses:
        '200':
          description: Successfully retrieved the GoalDependency.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/GoalDependency'}
        '404': {description: GoalDependency not found.}
        '500': {description: Internal server error.}
    put:
      tags: [GoalDependency]
      summary: Update an existing GoalDependency
      description: Updates an existing GoalDependency.
      operationId: updateGoalDependency
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the GoalDependency.
      requestBody:
        description: Updated GoalDependency details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/GoalDependency'}
      responses:
        '200':
          description: GoalDependency updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/GoalDependency'}
        '400': {description: Invalid input.}
        '404': {description: GoalDependency not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [GoalDependency]
      summary: Delete a GoalDependency.
      description: Deletes a specific GoalDependency.
      operationId: deleteGoalDependency
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the GoalDependency.
      responses:
        '204': {description: GoalDependency deleted successfully.}
        '404': {description: GoalDependency not found.}
        '500': {description: Internal server error.}
  /KeyMetric:
    get:
      tags: [KeyMetric]
      summary: Retrieve a list of KeyMetrics
      description: Retrieves a list of KeyMetrics.
      x-spring-cacheable: true
      operationId: getKeyMetricList
      responses:
        '200':
          description: Successfully retrieved the list of KeyMetrics.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/KeyMetric'}
        '404': {description: No KeyMetrics were found.}
        '500': {description: Internal server error.}
    post:
      tags: [KeyMetric]
      summary: Create a new KeyMetric
      description: Creates a new KeyMetric.
      operationId: postKeyMetric
      requestBody:
        description: KeyMetric details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/KeyMetric'}
      responses:
        '201':
          description: KeyMetric created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/KeyMetric'}
        '400': {description: Invalid input.}
        '404': {description: KeyMetric not found.}
        '500': {description: Internal server error.}
  /KeyMetric/{id}:
    get:
      tags: [KeyMetric]
      summary: Retrieve a single KeyMetric
      description: Retrieves a single KeyMetric for a specific uid.
      x-spring-cacheable: true
      operationId: getKeyMetric
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the KeyMetric.
      responses:
        '200':
          description: Successfully retrieved the KeyMetric.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/KeyMetric'}
        '404': {description: KeyMetric not found.}
        '500': {description: Internal server error.}
    put:
      tags: [KeyMetric]
      summary: Update an existing KeyMetric
      description: Updates an existing KeyMetric.
      operationId: updateKeyMetric
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the KeyMetric.
      requestBody:
        description: Updated KeyMetric details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/KeyMetric'}
      responses:
        '200':
          description: KeyMetric updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/KeyMetric'}
        '400': {description: Invalid input.}
        '404': {description: KeyMetric not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [KeyMetric]
      summary: Delete a KeyMetric.
      description: Deletes a specific KeyMetric.
      operationId: deleteKeyMetric
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the KeyMetric.
      responses:
        '204': {description: KeyMetric deleted successfully.}
        '404': {description: KeyMetric not found.}
        '500': {description: Internal server error.}
  /OasOpenAPISpec:
    get:
      tags: [OasOpenAPISpec]
      summary: Retrieve a list of OasOpenAPISpecs
      description: Retrieves a list of OasOpenAPISpecs.
      x-spring-cacheable: true
      operationId: getOasOpenAPISpecList
      responses:
        '200':
          description: Successfully retrieved the list of OasOpenAPISpecs.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/OasOpenAPISpec'}
        '404': {description: No OasOpenAPISpecs were found.}
        '500': {description: Internal server error.}
    post:
      tags: [OasOpenAPISpec]
      summary: Create a new OasOpenAPISpec
      description: Creates a new OasOpenAPISpec.
      operationId: postOasOpenAPISpec
      requestBody:
        description: OasOpenAPISpec details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/OasOpenAPISpec'}
      responses:
        '201':
          description: OasOpenAPISpec created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/OasOpenAPISpec'}
        '400': {description: Invalid input.}
        '404': {description: OasOpenAPISpec not found.}
        '500': {description: Internal server error.}
  /OasOpenAPISpec/{id}:
    get:
      tags: [OasOpenAPISpec]
      summary: Retrieve a single OasOpenAPISpec
      description: Retrieves a single OasOpenAPISpec for a specific uid.
      x-spring-cacheable: true
      operationId: getOasOpenAPISpec
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the OasOpenAPISpec.
      responses:
        '200':
          description: Successfully retrieved the OasOpenAPISpec.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/OasOpenAPISpec'}
        '404': {description: OasOpenAPISpec not found.}
        '500': {description: Internal server error.}
    put:
      tags: [OasOpenAPISpec]
      summary: Update an existing OasOpenAPISpec
      description: Updates an existing OasOpenAPISpec.
      operationId: updateOasOpenAPISpec
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the OasOpenAPISpec.
      requestBody:
        description: Updated OasOpenAPISpec details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/OasOpenAPISpec'}
      responses:
        '200':
          description: OasOpenAPISpec updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/OasOpenAPISpec'}
        '400': {description: Invalid input.}
        '404': {description: OasOpenAPISpec not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [OasOpenAPISpec]
      summary: Delete a OasOpenAPISpec.
      description: Deletes a specific OasOpenAPISpec.
      operationId: deleteOasOpenAPISpec
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the OasOpenAPISpec.
      responses:
        '204': {description: OasOpenAPISpec deleted successfully.}
        '404': {description: OasOpenAPISpec not found.}
        '500': {description: Internal server error.}
  /OasInfo:
    get:
      tags: [OasInfo]
      summary: Retrieve a list of OasInfos
      description: Retrieves a list of OasInfos.
      x-spring-cacheable: true
      operationId: getOasInfoList
      responses:
        '200':
          description: Successfully retrieved the list of OasInfos.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/OasInfo'}
        '404': {description: No OasInfos were found.}
        '500': {description: Internal server error.}
    post:
      tags: [OasInfo]
      summary: Create a new OasInfo
      description: Creates a new OasInfo.
      operationId: postOasInfo
      requestBody:
        description: OasInfo details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/OasInfo'}
      responses:
        '201':
          description: OasInfo created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/OasInfo'}
        '400': {description: Invalid input.}
        '404': {description: OasInfo not found.}
        '500': {description: Internal server error.}
  /OasInfo/{id}:
    get:
      tags: [OasInfo]
      summary: Retrieve a single OasInfo
      description: Retrieves a single OasInfo for a specific uid.
      x-spring-cacheable: true
      operationId: getOasInfo
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the OasInfo.
      responses:
        '200':
          description: Successfully retrieved the OasInfo.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/OasInfo'}
        '404': {description: OasInfo not found.}
        '500': {description: Internal server error.}
    put:
      tags: [OasInfo]
      summary: Update an existing OasInfo
      description: Updates an existing OasInfo.
      operationId: updateOasInfo
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the OasInfo.
      requestBody:
        description: Updated OasInfo details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/OasInfo'}
      responses:
        '200':
          description: OasInfo updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/OasInfo'}
        '400': {description: Invalid input.}
        '404': {description: OasInfo not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [OasInfo]
      summary: Delete a OasInfo.
      description: Deletes a specific OasInfo.
      operationId: deleteOasInfo
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the OasInfo.
      responses:
        '204': {description: OasInfo deleted successfully.}
        '404': {description: OasInfo not found.}
        '500': {description: Internal server error.}
  /OasServer:
    get:
      tags: [OasServer]
      summary: Retrieve a list of OasServers
      description: Retrieves a list of OasServers.
      x-spring-cacheable: true
      operationId: getOasServerList
      responses:
        '200':
          description: Successfully retrieved the list of OasServers.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/OasServer'}
        '404': {description: No OasServers were found.}
        '500': {description: Internal server error.}
    post:
      tags: [OasServer]
      summary: Create a new OasServer
      description: Creates a new OasServer.
      operationId: postOasServer
      requestBody:
        description: OasServer details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/OasServer'}
      responses:
        '201':
          description: OasServer created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/OasServer'}
        '400': {description: Invalid input.}
        '404': {description: OasServer not found.}
        '500': {description: Internal server error.}
  /OasServer/{id}:
    get:
      tags: [OasServer]
      summary: Retrieve a single OasServer
      description: Retrieves a single OasServer for a specific uid.
      x-spring-cacheable: true
      operationId: getOasServer
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the OasServer.
      responses:
        '200':
          description: Successfully retrieved the OasServer.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/OasServer'}
        '404': {description: OasServer not found.}
        '500': {description: Internal server error.}
    put:
      tags: [OasServer]
      summary: Update an existing OasServer
      description: Updates an existing OasServer.
      operationId: updateOasServer
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the OasServer.
      requestBody:
        description: Updated OasServer details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/OasServer'}
      responses:
        '200':
          description: OasServer updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/OasServer'}
        '400': {description: Invalid input.}
        '404': {description: OasServer not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [OasServer]
      summary: Delete a OasServer.
      description: Deletes a specific OasServer.
      operationId: deleteOasServer
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the OasServer.
      responses:
        '204': {description: OasServer deleted successfully.}
        '404': {description: OasServer not found.}
        '500': {description: Internal server error.}
  /OasPath:
    get:
      tags: [OasPath]
      summary: Retrieve a list of OasPaths
      description: Retrieves a list of OasPaths.
      x-spring-cacheable: true
      operationId: getOasPathList
      responses:
        '200':
          description: Successfully retrieved the list of OasPaths.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/OasPath'}
        '404': {description: No OasPaths were found.}
        '500': {description: Internal server error.}
    post:
      tags: [OasPath]
      summary: Create a new OasPath
      description: Creates a new OasPath.
      operationId: postOasPath
      requestBody:
        description: OasPath details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/OasPath'}
      responses:
        '201':
          description: OasPath created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/OasPath'}
        '400': {description: Invalid input.}
        '404': {description: OasPath not found.}
        '500': {description: Internal server error.}
  /OasPath/{id}:
    get:
      tags: [OasPath]
      summary: Retrieve a single OasPath
      description: Retrieves a single OasPath for a specific uid.
      x-spring-cacheable: true
      operationId: getOasPath
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the OasPath.
      responses:
        '200':
          description: Successfully retrieved the OasPath.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/OasPath'}
        '404': {description: OasPath not found.}
        '500': {description: Internal server error.}
    put:
      tags: [OasPath]
      summary: Update an existing OasPath
      description: Updates an existing OasPath.
      operationId: updateOasPath
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the OasPath.
      requestBody:
        description: Updated OasPath details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/OasPath'}
      responses:
        '200':
          description: OasPath updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/OasPath'}
        '400': {description: Invalid input.}
        '404': {description: OasPath not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [OasPath]
      summary: Delete a OasPath.
      description: Deletes a specific OasPath.
      operationId: deleteOasPath
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the OasPath.
      responses:
        '204': {description: OasPath deleted successfully.}
        '404': {description: OasPath not found.}
        '500': {description: Internal server error.}
  /OasOperation:
    get:
      tags: [OasOperation]
      summary: Retrieve a list of OasOperations
      description: Retrieves a list of OasOperations.
      x-spring-cacheable: true
      operationId: getOasOperationList
      responses:
        '200':
          description: Successfully retrieved the list of OasOperations.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/OasOperation'}
        '404': {description: No OasOperations were found.}
        '500': {description: Internal server error.}
    post:
      tags: [OasOperation]
      summary: Create a new OasOperation
      description: Creates a new OasOperation.
      operationId: postOasOperation
      requestBody:
        description: OasOperation details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/OasOperation'}
      responses:
        '201':
          description: OasOperation created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/OasOperation'}
        '400': {description: Invalid input.}
        '404': {description: OasOperation not found.}
        '500': {description: Internal server error.}
  /OasOperation/{id}:
    get:
      tags: [OasOperation]
      summary: Retrieve a single OasOperation
      description: Retrieves a single OasOperation for a specific uid.
      x-spring-cacheable: true
      operationId: getOasOperation
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the OasOperation.
      responses:
        '200':
          description: Successfully retrieved the OasOperation.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/OasOperation'}
        '404': {description: OasOperation not found.}
        '500': {description: Internal server error.}
    put:
      tags: [OasOperation]
      summary: Update an existing OasOperation
      description: Updates an existing OasOperation.
      operationId: updateOasOperation
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the OasOperation.
      requestBody:
        description: Updated OasOperation details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/OasOperation'}
      responses:
        '200':
          description: OasOperation updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/OasOperation'}
        '400': {description: Invalid input.}
        '404': {description: OasOperation not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [OasOperation]
      summary: Delete a OasOperation.
      description: Deletes a specific OasOperation.
      operationId: deleteOasOperation
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the OasOperation.
      responses:
        '204': {description: OasOperation deleted successfully.}
        '404': {description: OasOperation not found.}
        '500': {description: Internal server error.}
  /OasParameter:
    get:
      tags: [OasParameter]
      summary: Retrieve a list of OasParameters
      description: Retrieves a list of OasParameters.
      x-spring-cacheable: true
      operationId: getOasParameterList
      responses:
        '200':
          description: Successfully retrieved the list of OasParameters.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/OasParameter'}
        '404': {description: No OasParameters were found.}
        '500': {description: Internal server error.}
    post:
      tags: [OasParameter]
      summary: Create a new OasParameter
      description: Creates a new OasParameter.
      operationId: postOasParameter
      requestBody:
        description: OasParameter details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/OasParameter'}
      responses:
        '201':
          description: OasParameter created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/OasParameter'}
        '400': {description: Invalid input.}
        '404': {description: OasParameter not found.}
        '500': {description: Internal server error.}
  /OasParameter/{id}:
    get:
      tags: [OasParameter]
      summary: Retrieve a single OasParameter
      description: Retrieves a single OasParameter for a specific uid.
      x-spring-cacheable: true
      operationId: getOasParameter
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the OasParameter.
      responses:
        '200':
          description: Successfully retrieved the OasParameter.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/OasParameter'}
        '404': {description: OasParameter not found.}
        '500': {description: Internal server error.}
    put:
      tags: [OasParameter]
      summary: Update an existing OasParameter
      description: Updates an existing OasParameter.
      operationId: updateOasParameter
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the OasParameter.
      requestBody:
        description: Updated OasParameter details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/OasParameter'}
      responses:
        '200':
          description: OasParameter updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/OasParameter'}
        '400': {description: Invalid input.}
        '404': {description: OasParameter not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [OasParameter]
      summary: Delete a OasParameter.
      description: Deletes a specific OasParameter.
      operationId: deleteOasParameter
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the OasParameter.
      responses:
        '204': {description: OasParameter deleted successfully.}
        '404': {description: OasParameter not found.}
        '500': {description: Internal server error.}
  /OasResponse:
    get:
      tags: [OasResponse]
      summary: Retrieve a list of OasResponses
      description: Retrieves a list of OasResponses.
      x-spring-cacheable: true
      operationId: getOasResponseList
      responses:
        '200':
          description: Successfully retrieved the list of OasResponses.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/OasResponse'}
        '404': {description: No OasResponses were found.}
        '500': {description: Internal server error.}
    post:
      tags: [OasResponse]
      summary: Create a new OasResponse
      description: Creates a new OasResponse.
      operationId: postOasResponse
      requestBody:
        description: OasResponse details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/OasResponse'}
      responses:
        '201':
          description: OasResponse created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/OasResponse'}
        '400': {description: Invalid input.}
        '404': {description: OasResponse not found.}
        '500': {description: Internal server error.}
  /OasResponse/{id}:
    get:
      tags: [OasResponse]
      summary: Retrieve a single OasResponse
      description: Retrieves a single OasResponse for a specific uid.
      x-spring-cacheable: true
      operationId: getOasResponse
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the OasResponse.
      responses:
        '200':
          description: Successfully retrieved the OasResponse.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/OasResponse'}
        '404': {description: OasResponse not found.}
        '500': {description: Internal server error.}
    put:
      tags: [OasResponse]
      summary: Update an existing OasResponse
      description: Updates an existing OasResponse.
      operationId: updateOasResponse
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the OasResponse.
      requestBody:
        description: Updated OasResponse details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/OasResponse'}
      responses:
        '200':
          description: OasResponse updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/OasResponse'}
        '400': {description: Invalid input.}
        '404': {description: OasResponse not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [OasResponse]
      summary: Delete a OasResponse.
      description: Deletes a specific OasResponse.
      operationId: deleteOasResponse
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the OasResponse.
      responses:
        '204': {description: OasResponse deleted successfully.}
        '404': {description: OasResponse not found.}
        '500': {description: Internal server error.}
  /OasObjectSchema:
    get:
      tags: [OasObjectSchema]
      summary: Retrieve a list of OasObjectSchemas
      description: Retrieves a list of OasObjectSchemas.
      x-spring-cacheable: true
      operationId: getOasObjectSchemaList
      responses:
        '200':
          description: Successfully retrieved the list of OasObjectSchemas.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/OasObjectSchema'}
        '404': {description: No OasObjectSchemas were found.}
        '500': {description: Internal server error.}
    post:
      tags: [OasObjectSchema]
      summary: Create a new OasObjectSchema
      description: Creates a new OasObjectSchema.
      operationId: postOasObjectSchema
      requestBody:
        description: OasObjectSchema details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/OasObjectSchema'}
      responses:
        '201':
          description: OasObjectSchema created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/OasObjectSchema'}
        '400': {description: Invalid input.}
        '404': {description: OasObjectSchema not found.}
        '500': {description: Internal server error.}
  /OasObjectSchema/{id}:
    get:
      tags: [OasObjectSchema]
      summary: Retrieve a single OasObjectSchema
      description: Retrieves a single OasObjectSchema for a specific uid.
      x-spring-cacheable: true
      operationId: getOasObjectSchema
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the OasObjectSchema.
      responses:
        '200':
          description: Successfully retrieved the OasObjectSchema.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/OasObjectSchema'}
        '404': {description: OasObjectSchema not found.}
        '500': {description: Internal server error.}
    put:
      tags: [OasObjectSchema]
      summary: Update an existing OasObjectSchema
      description: Updates an existing OasObjectSchema.
      operationId: updateOasObjectSchema
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the OasObjectSchema.
      requestBody:
        description: Updated OasObjectSchema details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/OasObjectSchema'}
      responses:
        '200':
          description: OasObjectSchema updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/OasObjectSchema'}
        '400': {description: Invalid input.}
        '404': {description: OasObjectSchema not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [OasObjectSchema]
      summary: Delete a OasObjectSchema.
      description: Deletes a specific OasObjectSchema.
      operationId: deleteOasObjectSchema
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the OasObjectSchema.
      responses:
        '204': {description: OasObjectSchema deleted successfully.}
        '404': {description: OasObjectSchema not found.}
        '500': {description: Internal server error.}
  /OasRequired:
    get:
      tags: [OasRequired]
      summary: Retrieve a list of OasRequireds
      description: Retrieves a list of OasRequireds.
      x-spring-cacheable: true
      operationId: getOasRequiredList
      responses:
        '200':
          description: Successfully retrieved the list of OasRequireds.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/OasRequired'}
        '404': {description: No OasRequireds were found.}
        '500': {description: Internal server error.}
    post:
      tags: [OasRequired]
      summary: Create a new OasRequired
      description: Creates a new OasRequired.
      operationId: postOasRequired
      requestBody:
        description: OasRequired details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/OasRequired'}
      responses:
        '201':
          description: OasRequired created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/OasRequired'}
        '400': {description: Invalid input.}
        '404': {description: OasRequired not found.}
        '500': {description: Internal server error.}
  /OasRequired/{id}:
    get:
      tags: [OasRequired]
      summary: Retrieve a single OasRequired
      description: Retrieves a single OasRequired for a specific uid.
      x-spring-cacheable: true
      operationId: getOasRequired
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the OasRequired.
      responses:
        '200':
          description: Successfully retrieved the OasRequired.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/OasRequired'}
        '404': {description: OasRequired not found.}
        '500': {description: Internal server error.}
    put:
      tags: [OasRequired]
      summary: Update an existing OasRequired
      description: Updates an existing OasRequired.
      operationId: updateOasRequired
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the OasRequired.
      requestBody:
        description: Updated OasRequired details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/OasRequired'}
      responses:
        '200':
          description: OasRequired updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/OasRequired'}
        '400': {description: Invalid input.}
        '404': {description: OasRequired not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [OasRequired]
      summary: Delete a OasRequired.
      description: Deletes a specific OasRequired.
      operationId: deleteOasRequired
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the OasRequired.
      responses:
        '204': {description: OasRequired deleted successfully.}
        '404': {description: OasRequired not found.}
        '500': {description: Internal server error.}
  /OasComponents:
    get:
      tags: [OasComponents]
      summary: Retrieve a list of OasComponentss
      description: Retrieves a list of OasComponentss.
      x-spring-cacheable: true
      operationId: getOasComponentsList
      responses:
        '200':
          description: Successfully retrieved the list of OasComponentss.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/OasComponents'}
        '404': {description: No OasComponentss were found.}
        '500': {description: Internal server error.}
    post:
      tags: [OasComponents]
      summary: Create a new OasComponents
      description: Creates a new OasComponents.
      operationId: postOasComponents
      requestBody:
        description: OasComponents details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/OasComponents'}
      responses:
        '201':
          description: OasComponents created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/OasComponents'}
        '400': {description: Invalid input.}
        '404': {description: OasComponents not found.}
        '500': {description: Internal server error.}
  /OasComponents/{id}:
    get:
      tags: [OasComponents]
      summary: Retrieve a single OasComponents
      description: Retrieves a single OasComponents for a specific uid.
      x-spring-cacheable: true
      operationId: getOasComponents
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the OasComponents.
      responses:
        '200':
          description: Successfully retrieved the OasComponents.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/OasComponents'}
        '404': {description: OasComponents not found.}
        '500': {description: Internal server error.}
    put:
      tags: [OasComponents]
      summary: Update an existing OasComponents
      description: Updates an existing OasComponents.
      operationId: updateOasComponents
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the OasComponents.
      requestBody:
        description: Updated OasComponents details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/OasComponents'}
      responses:
        '200':
          description: OasComponents updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/OasComponents'}
        '400': {description: Invalid input.}
        '404': {description: OasComponents not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [OasComponents]
      summary: Delete a OasComponents.
      description: Deletes a specific OasComponents.
      operationId: deleteOasComponents
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the OasComponents.
      responses:
        '204': {description: OasComponents deleted successfully.}
        '404': {description: OasComponents not found.}
        '500': {description: Internal server error.}
  /OasSecurityScheme:
    get:
      tags: [OasSecurityScheme]
      summary: Retrieve a list of OasSecuritySchemes
      description: Retrieves a list of OasSecuritySchemes.
      x-spring-cacheable: true
      operationId: getOasSecuritySchemeList
      responses:
        '200':
          description: Successfully retrieved the list of OasSecuritySchemes.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/OasSecurityScheme'}
        '404': {description: No OasSecuritySchemes were found.}
        '500': {description: Internal server error.}
    post:
      tags: [OasSecurityScheme]
      summary: Create a new OasSecurityScheme
      description: Creates a new OasSecurityScheme.
      operationId: postOasSecurityScheme
      requestBody:
        description: OasSecurityScheme details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/OasSecurityScheme'}
      responses:
        '201':
          description: OasSecurityScheme created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/OasSecurityScheme'}
        '400': {description: Invalid input.}
        '404': {description: OasSecurityScheme not found.}
        '500': {description: Internal server error.}
  /OasSecurityScheme/{id}:
    get:
      tags: [OasSecurityScheme]
      summary: Retrieve a single OasSecurityScheme
      description: Retrieves a single OasSecurityScheme for a specific uid.
      x-spring-cacheable: true
      operationId: getOasSecurityScheme
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the OasSecurityScheme.
      responses:
        '200':
          description: Successfully retrieved the OasSecurityScheme.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/OasSecurityScheme'}
        '404': {description: OasSecurityScheme not found.}
        '500': {description: Internal server error.}
    put:
      tags: [OasSecurityScheme]
      summary: Update an existing OasSecurityScheme
      description: Updates an existing OasSecurityScheme.
      operationId: updateOasSecurityScheme
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the OasSecurityScheme.
      requestBody:
        description: Updated OasSecurityScheme details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/OasSecurityScheme'}
      responses:
        '200':
          description: OasSecurityScheme updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/OasSecurityScheme'}
        '400': {description: Invalid input.}
        '404': {description: OasSecurityScheme not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [OasSecurityScheme]
      summary: Delete a OasSecurityScheme.
      description: Deletes a specific OasSecurityScheme.
      operationId: deleteOasSecurityScheme
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the OasSecurityScheme.
      responses:
        '204': {description: OasSecurityScheme deleted successfully.}
        '404': {description: OasSecurityScheme not found.}
        '500': {description: Internal server error.}
  /Chart:
    get:
      tags: [Chart]
      summary: Retrieve a list of Charts
      description: Retrieves a list of Charts.
      x-spring-cacheable: true
      operationId: getChartList
      responses:
        '200':
          description: Successfully retrieved the list of Charts.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/Chart'}
        '404': {description: No Charts were found.}
        '500': {description: Internal server error.}
    post:
      tags: [Chart]
      summary: Create a new Chart
      description: Creates a new Chart.
      operationId: postChart
      requestBody:
        description: Chart details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/Chart'}
      responses:
        '201':
          description: Chart created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Chart'}
        '400': {description: Invalid input.}
        '404': {description: Chart not found.}
        '500': {description: Internal server error.}
  /Chart/{id}:
    get:
      tags: [Chart]
      summary: Retrieve a single Chart
      description: Retrieves a single Chart for a specific uid.
      x-spring-cacheable: true
      operationId: getChart
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Chart.
      responses:
        '200':
          description: Successfully retrieved the Chart.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Chart'}
        '404': {description: Chart not found.}
        '500': {description: Internal server error.}
    put:
      tags: [Chart]
      summary: Update an existing Chart
      description: Updates an existing Chart.
      operationId: updateChart
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Chart.
      requestBody:
        description: Updated Chart details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/Chart'}
      responses:
        '200':
          description: Chart updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Chart'}
        '400': {description: Invalid input.}
        '404': {description: Chart not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [Chart]
      summary: Delete a Chart.
      description: Deletes a specific Chart.
      operationId: deleteChart
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Chart.
      responses:
        '204': {description: Chart deleted successfully.}
        '404': {description: Chart not found.}
        '500': {description: Internal server error.}
  /ChartSeries:
    get:
      tags: [ChartSeries]
      summary: Retrieve a list of ChartSeriess
      description: Retrieves a list of ChartSeriess.
      x-spring-cacheable: true
      operationId: getChartSeriesList
      responses:
        '200':
          description: Successfully retrieved the list of ChartSeriess.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/ChartSeries'}
        '404': {description: No ChartSeriess were found.}
        '500': {description: Internal server error.}
    post:
      tags: [ChartSeries]
      summary: Create a new ChartSeries
      description: Creates a new ChartSeries.
      operationId: postChartSeries
      requestBody:
        description: ChartSeries details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/ChartSeries'}
      responses:
        '201':
          description: ChartSeries created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ChartSeries'}
        '400': {description: Invalid input.}
        '404': {description: ChartSeries not found.}
        '500': {description: Internal server error.}
  /ChartSeries/{id}:
    get:
      tags: [ChartSeries]
      summary: Retrieve a single ChartSeries
      description: Retrieves a single ChartSeries for a specific uid.
      x-spring-cacheable: true
      operationId: getChartSeries
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the ChartSeries.
      responses:
        '200':
          description: Successfully retrieved the ChartSeries.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ChartSeries'}
        '404': {description: ChartSeries not found.}
        '500': {description: Internal server error.}
    put:
      tags: [ChartSeries]
      summary: Update an existing ChartSeries
      description: Updates an existing ChartSeries.
      operationId: updateChartSeries
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the ChartSeries.
      requestBody:
        description: Updated ChartSeries details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/ChartSeries'}
      responses:
        '200':
          description: ChartSeries updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ChartSeries'}
        '400': {description: Invalid input.}
        '404': {description: ChartSeries not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [ChartSeries]
      summary: Delete a ChartSeries.
      description: Deletes a specific ChartSeries.
      operationId: deleteChartSeries
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the ChartSeries.
      responses:
        '204': {description: ChartSeries deleted successfully.}
        '404': {description: ChartSeries not found.}
        '500': {description: Internal server error.}
  /OasEnum:
    get:
      tags: [OasEnum]
      summary: Retrieve a list of OasEnums
      description: Retrieves a list of OasEnums.
      x-spring-cacheable: true
      operationId: getOasEnumList
      responses:
        '200':
          description: Successfully retrieved the list of OasEnums.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/OasEnum'}
        '404': {description: No OasEnums were found.}
        '500': {description: Internal server error.}
    post:
      tags: [OasEnum]
      summary: Create a new OasEnum
      description: Creates a new OasEnum.
      operationId: postOasEnum
      requestBody:
        description: OasEnum details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/OasEnum'}
      responses:
        '201':
          description: OasEnum created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/OasEnum'}
        '400': {description: Invalid input.}
        '404': {description: OasEnum not found.}
        '500': {description: Internal server error.}
  /OasEnum/{id}:
    get:
      tags: [OasEnum]
      summary: Retrieve a single OasEnum
      description: Retrieves a single OasEnum for a specific uid.
      x-spring-cacheable: true
      operationId: getOasEnum
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the OasEnum.
      responses:
        '200':
          description: Successfully retrieved the OasEnum.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/OasEnum'}
        '404': {description: OasEnum not found.}
        '500': {description: Internal server error.}
    put:
      tags: [OasEnum]
      summary: Update an existing OasEnum
      description: Updates an existing OasEnum.
      operationId: updateOasEnum
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the OasEnum.
      requestBody:
        description: Updated OasEnum details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/OasEnum'}
      responses:
        '200':
          description: OasEnum updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/OasEnum'}
        '400': {description: Invalid input.}
        '404': {description: OasEnum not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [OasEnum]
      summary: Delete a OasEnum.
      description: Deletes a specific OasEnum.
      operationId: deleteOasEnum
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the OasEnum.
      responses:
        '204': {description: OasEnum deleted successfully.}
        '404': {description: OasEnum not found.}
        '500': {description: Internal server error.}
  /SecureKey:
    get:
      tags: [SecureKey]
      summary: Retrieve a list of SecureKeys
      description: Retrieves a list of SecureKeys.
      x-spring-cacheable: true
      operationId: getSecureKeyList
      responses:
        '200':
          description: Successfully retrieved the list of SecureKeys.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/SecureKey'}
        '404': {description: No SecureKeys were found.}
        '500': {description: Internal server error.}
    post:
      tags: [SecureKey]
      summary: Create a new SecureKey
      description: Creates a new SecureKey.
      operationId: postSecureKey
      requestBody:
        description: SecureKey details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/SecureKey'}
      responses:
        '201':
          description: SecureKey created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/SecureKey'}
        '400': {description: Invalid input.}
        '404': {description: SecureKey not found.}
        '500': {description: Internal server error.}
  /SecureKey/{id}:
    get:
      tags: [SecureKey]
      summary: Retrieve a single SecureKey
      description: Retrieves a single SecureKey for a specific uid.
      x-spring-cacheable: true
      operationId: getSecureKey
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the SecureKey.
      responses:
        '200':
          description: Successfully retrieved the SecureKey.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/SecureKey'}
        '404': {description: SecureKey not found.}
        '500': {description: Internal server error.}
    put:
      tags: [SecureKey]
      summary: Update an existing SecureKey
      description: Updates an existing SecureKey.
      operationId: updateSecureKey
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the SecureKey.
      requestBody:
        description: Updated SecureKey details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/SecureKey'}
      responses:
        '200':
          description: SecureKey updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/SecureKey'}
        '400': {description: Invalid input.}
        '404': {description: SecureKey not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [SecureKey]
      summary: Delete a SecureKey.
      description: Deletes a specific SecureKey.
      operationId: deleteSecureKey
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the SecureKey.
      responses:
        '204': {description: SecureKey deleted successfully.}
        '404': {description: SecureKey not found.}
        '500': {description: Internal server error.}
  /Build:
    get:
      tags: [Build]
      summary: Retrieve a list of Builds
      description: Retrieves a list of Builds.
      x-spring-cacheable: true
      operationId: getBuildList
      responses:
        '200':
          description: Successfully retrieved the list of Builds.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/Build'}
        '404': {description: No Builds were found.}
        '500': {description: Internal server error.}
    post:
      tags: [Build]
      summary: Create a new Build
      description: Creates a new Build.
      operationId: postBuild
      requestBody:
        description: Build details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/Build'}
      responses:
        '201':
          description: Build created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Build'}
        '400': {description: Invalid input.}
        '404': {description: Build not found.}
        '500': {description: Internal server error.}
  /Build/{id}:
    get:
      tags: [Build]
      summary: Retrieve a single Build
      description: Retrieves a single Build for a specific uid.
      x-spring-cacheable: true
      operationId: getBuild
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Build.
      responses:
        '200':
          description: Successfully retrieved the Build.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Build'}
        '404': {description: Build not found.}
        '500': {description: Internal server error.}
    put:
      tags: [Build]
      summary: Update an existing Build
      description: Updates an existing Build.
      operationId: updateBuild
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Build.
      requestBody:
        description: Updated Build details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/Build'}
      responses:
        '200':
          description: Build updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Build'}
        '400': {description: Invalid input.}
        '404': {description: Build not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [Build]
      summary: Delete a Build.
      description: Deletes a specific Build.
      operationId: deleteBuild
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Build.
      responses:
        '204': {description: Build deleted successfully.}
        '404': {description: Build not found.}
        '500': {description: Internal server error.}
  /BuildOutput:
    get:
      tags: [BuildOutput]
      summary: Retrieve a list of BuildOutputs
      description: Retrieves a list of BuildOutputs.
      x-spring-cacheable: true
      operationId: getBuildOutputList
      responses:
        '200':
          description: Successfully retrieved the list of BuildOutputs.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/BuildOutput'}
        '404': {description: No BuildOutputs were found.}
        '500': {description: Internal server error.}
    post:
      tags: [BuildOutput]
      summary: Create a new BuildOutput
      description: Creates a new BuildOutput.
      operationId: postBuildOutput
      requestBody:
        description: BuildOutput details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/BuildOutput'}
      responses:
        '201':
          description: BuildOutput created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/BuildOutput'}
        '400': {description: Invalid input.}
        '404': {description: BuildOutput not found.}
        '500': {description: Internal server error.}
  /BuildOutput/{id}:
    get:
      tags: [BuildOutput]
      summary: Retrieve a single BuildOutput
      description: Retrieves a single BuildOutput for a specific uid.
      x-spring-cacheable: true
      operationId: getBuildOutput
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the BuildOutput.
      responses:
        '200':
          description: Successfully retrieved the BuildOutput.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/BuildOutput'}
        '404': {description: BuildOutput not found.}
        '500': {description: Internal server error.}
    put:
      tags: [BuildOutput]
      summary: Update an existing BuildOutput
      description: Updates an existing BuildOutput.
      operationId: updateBuildOutput
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the BuildOutput.
      requestBody:
        description: Updated BuildOutput details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/BuildOutput'}
      responses:
        '200':
          description: BuildOutput updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/BuildOutput'}
        '400': {description: Invalid input.}
        '404': {description: BuildOutput not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [BuildOutput]
      summary: Delete a BuildOutput.
      description: Deletes a specific BuildOutput.
      operationId: deleteBuildOutput
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the BuildOutput.
      responses:
        '204': {description: BuildOutput deleted successfully.}
        '404': {description: BuildOutput not found.}
        '500': {description: Internal server error.}
  /Solution:
    get:
      tags: [Solution]
      summary: Retrieve a list of Solutions
      description: Retrieves a list of Solutions.
      x-spring-cacheable: true
      operationId: getSolutionList
      responses:
        '200':
          description: Successfully retrieved the list of Solutions.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/Solution'}
        '404': {description: No Solutions were found.}
        '500': {description: Internal server error.}
    post:
      tags: [Solution]
      summary: Create a new Solution
      description: Creates a new Solution.
      operationId: postSolution
      requestBody:
        description: Solution details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/Solution'}
      responses:
        '201':
          description: Solution created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Solution'}
        '400': {description: Invalid input.}
        '404': {description: Solution not found.}
        '500': {description: Internal server error.}
  /Solution/{id}:
    get:
      tags: [Solution]
      summary: Retrieve a single Solution
      description: Retrieves a single Solution for a specific uid.
      x-spring-cacheable: true
      operationId: getSolution
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Solution.
      responses:
        '200':
          description: Successfully retrieved the Solution.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Solution'}
        '404': {description: Solution not found.}
        '500': {description: Internal server error.}
    put:
      tags: [Solution]
      summary: Update an existing Solution
      description: Updates an existing Solution.
      operationId: updateSolution
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Solution.
      requestBody:
        description: Updated Solution details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/Solution'}
      responses:
        '200':
          description: Solution updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Solution'}
        '400': {description: Invalid input.}
        '404': {description: Solution not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [Solution]
      summary: Delete a Solution.
      description: Deletes a specific Solution.
      operationId: deleteSolution
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Solution.
      responses:
        '204': {description: Solution deleted successfully.}
        '404': {description: Solution not found.}
        '500': {description: Internal server error.}
  /Workflow:
    get:
      tags: [Workflow]
      summary: Retrieve a list of Workflows
      description: Retrieves a list of Workflows.
      x-spring-cacheable: true
      operationId: getWorkflowList
      responses:
        '200':
          description: Successfully retrieved the list of Workflows.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/Workflow'}
        '404': {description: No Workflows were found.}
        '500': {description: Internal server error.}
    post:
      tags: [Workflow]
      summary: Create a new Workflow
      description: Creates a new Workflow.
      operationId: postWorkflow
      requestBody:
        description: Workflow details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/Workflow'}
      responses:
        '201':
          description: Workflow created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Workflow'}
        '400': {description: Invalid input.}
        '404': {description: Workflow not found.}
        '500': {description: Internal server error.}
  /Workflow/{id}:
    get:
      tags: [Workflow]
      summary: Retrieve a single Workflow
      description: Retrieves a single Workflow for a specific uid.
      x-spring-cacheable: true
      operationId: getWorkflow
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Workflow.
      responses:
        '200':
          description: Successfully retrieved the Workflow.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Workflow'}
        '404': {description: Workflow not found.}
        '500': {description: Internal server error.}
    put:
      tags: [Workflow]
      summary: Update an existing Workflow
      description: Updates an existing Workflow.
      operationId: updateWorkflow
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Workflow.
      requestBody:
        description: Updated Workflow details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/Workflow'}
      responses:
        '200':
          description: Workflow updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Workflow'}
        '400': {description: Invalid input.}
        '404': {description: Workflow not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [Workflow]
      summary: Delete a Workflow.
      description: Deletes a specific Workflow.
      operationId: deleteWorkflow
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Workflow.
      responses:
        '204': {description: Workflow deleted successfully.}
        '404': {description: Workflow not found.}
        '500': {description: Internal server error.}
  /WorkflowState:
    get:
      tags: [WorkflowState]
      summary: Retrieve a list of WorkflowStates
      description: Retrieves a list of WorkflowStates.
      x-spring-cacheable: true
      operationId: getWorkflowStateList
      responses:
        '200':
          description: Successfully retrieved the list of WorkflowStates.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/WorkflowState'}
        '404': {description: No WorkflowStates were found.}
        '500': {description: Internal server error.}
    post:
      tags: [WorkflowState]
      summary: Create a new WorkflowState
      description: Creates a new WorkflowState.
      operationId: postWorkflowState
      requestBody:
        description: WorkflowState details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/WorkflowState'}
      responses:
        '201':
          description: WorkflowState created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/WorkflowState'}
        '400': {description: Invalid input.}
        '404': {description: WorkflowState not found.}
        '500': {description: Internal server error.}
  /WorkflowState/{id}:
    get:
      tags: [WorkflowState]
      summary: Retrieve a single WorkflowState
      description: Retrieves a single WorkflowState for a specific uid.
      x-spring-cacheable: true
      operationId: getWorkflowState
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the WorkflowState.
      responses:
        '200':
          description: Successfully retrieved the WorkflowState.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/WorkflowState'}
        '404': {description: WorkflowState not found.}
        '500': {description: Internal server error.}
    put:
      tags: [WorkflowState]
      summary: Update an existing WorkflowState
      description: Updates an existing WorkflowState.
      operationId: updateWorkflowState
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the WorkflowState.
      requestBody:
        description: Updated WorkflowState details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/WorkflowState'}
      responses:
        '200':
          description: WorkflowState updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/WorkflowState'}
        '400': {description: Invalid input.}
        '404': {description: WorkflowState not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [WorkflowState]
      summary: Delete a WorkflowState.
      description: Deletes a specific WorkflowState.
      operationId: deleteWorkflowState
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the WorkflowState.
      responses:
        '204': {description: WorkflowState deleted successfully.}
        '404': {description: WorkflowState not found.}
        '500': {description: Internal server error.}
  /Task:
    get:
      tags: [Task]
      summary: Retrieve a list of Tasks
      description: Retrieves a list of Tasks.
      x-spring-cacheable: true
      operationId: getTaskList
      responses:
        '200':
          description: Successfully retrieved the list of Tasks.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/Task'}
        '404': {description: No Tasks were found.}
        '500': {description: Internal server error.}
    post:
      tags: [Task]
      summary: Create a new Task
      description: Creates a new Task.
      operationId: postTask
      requestBody:
        description: Task details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/Task'}
      responses:
        '201':
          description: Task created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Task'}
        '400': {description: Invalid input.}
        '404': {description: Task not found.}
        '500': {description: Internal server error.}
  /Task/{id}:
    get:
      tags: [Task]
      summary: Retrieve a single Task
      description: Retrieves a single Task for a specific uid.
      x-spring-cacheable: true
      operationId: getTask
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Task.
      responses:
        '200':
          description: Successfully retrieved the Task.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Task'}
        '404': {description: Task not found.}
        '500': {description: Internal server error.}
    put:
      tags: [Task]
      summary: Update an existing Task
      description: Updates an existing Task.
      operationId: updateTask
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Task.
      requestBody:
        description: Updated Task details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/Task'}
      responses:
        '200':
          description: Task updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Task'}
        '400': {description: Invalid input.}
        '404': {description: Task not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [Task]
      summary: Delete a Task.
      description: Deletes a specific Task.
      operationId: deleteTask
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Task.
      responses:
        '204': {description: Task deleted successfully.}
        '404': {description: Task not found.}
        '500': {description: Internal server error.}
  /ExecModule:
    get:
      tags: [ExecModule]
      summary: Retrieve a list of ExecModules
      description: Retrieves a list of ExecModules.
      x-spring-cacheable: true
      operationId: getExecModuleList
      responses:
        '200':
          description: Successfully retrieved the list of ExecModules.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/ExecModule'}
        '404': {description: No ExecModules were found.}
        '500': {description: Internal server error.}
    post:
      tags: [ExecModule]
      summary: Create a new ExecModule
      description: Creates a new ExecModule.
      operationId: postExecModule
      requestBody:
        description: ExecModule details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/ExecModule'}
      responses:
        '201':
          description: ExecModule created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ExecModule'}
        '400': {description: Invalid input.}
        '404': {description: ExecModule not found.}
        '500': {description: Internal server error.}
  /ExecModule/{id}:
    get:
      tags: [ExecModule]
      summary: Retrieve a single ExecModule
      description: Retrieves a single ExecModule for a specific uid.
      x-spring-cacheable: true
      operationId: getExecModule
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the ExecModule.
      responses:
        '200':
          description: Successfully retrieved the ExecModule.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ExecModule'}
        '404': {description: ExecModule not found.}
        '500': {description: Internal server error.}
    put:
      tags: [ExecModule]
      summary: Update an existing ExecModule
      description: Updates an existing ExecModule.
      operationId: updateExecModule
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the ExecModule.
      requestBody:
        description: Updated ExecModule details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/ExecModule'}
      responses:
        '200':
          description: ExecModule updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ExecModule'}
        '400': {description: Invalid input.}
        '404': {description: ExecModule not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [ExecModule]
      summary: Delete a ExecModule.
      description: Deletes a specific ExecModule.
      operationId: deleteExecModule
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the ExecModule.
      responses:
        '204': {description: ExecModule deleted successfully.}
        '404': {description: ExecModule not found.}
        '500': {description: Internal server error.}
  /EventLog:
    get:
      tags: [EventLog]
      summary: Retrieve a list of EventLogs
      description: Retrieves a list of EventLogs.
      x-spring-cacheable: true
      operationId: getEventLogList
      responses:
        '200':
          description: Successfully retrieved the list of EventLogs.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/EventLog'}
        '404': {description: No EventLogs were found.}
        '500': {description: Internal server error.}
    post:
      tags: [EventLog]
      summary: Create a new EventLog
      description: Creates a new EventLog.
      operationId: postEventLog
      requestBody:
        description: EventLog details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/EventLog'}
      responses:
        '201':
          description: EventLog created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/EventLog'}
        '400': {description: Invalid input.}
        '404': {description: EventLog not found.}
        '500': {description: Internal server error.}
  /EventLog/{id}:
    get:
      tags: [EventLog]
      summary: Retrieve a single EventLog
      description: Retrieves a single EventLog for a specific uid.
      x-spring-cacheable: true
      operationId: getEventLog
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the EventLog.
      responses:
        '200':
          description: Successfully retrieved the EventLog.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/EventLog'}
        '404': {description: EventLog not found.}
        '500': {description: Internal server error.}
    put:
      tags: [EventLog]
      summary: Update an existing EventLog
      description: Updates an existing EventLog.
      operationId: updateEventLog
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the EventLog.
      requestBody:
        description: Updated EventLog details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/EventLog'}
      responses:
        '200':
          description: EventLog updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/EventLog'}
        '400': {description: Invalid input.}
        '404': {description: EventLog not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [EventLog]
      summary: Delete a EventLog.
      description: Deletes a specific EventLog.
      operationId: deleteEventLog
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the EventLog.
      responses:
        '204': {description: EventLog deleted successfully.}
        '404': {description: EventLog not found.}
        '500': {description: Internal server error.}
  /IntegrationAccount:
    get:
      tags: [IntegrationAccount]
      summary: Retrieve a list of IntegrationAccounts
      description: Retrieves a list of IntegrationAccounts.
      x-spring-cacheable: true
      operationId: getIntegrationAccountList
      responses:
        '200':
          description: Successfully retrieved the list of IntegrationAccounts.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/IntegrationAccount'}
        '404': {description: No IntegrationAccounts were found.}
        '500': {description: Internal server error.}
    post:
      tags: [IntegrationAccount]
      summary: Create a new IntegrationAccount
      description: Creates a new IntegrationAccount.
      operationId: postIntegrationAccount
      requestBody:
        description: IntegrationAccount details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/IntegrationAccount'}
      responses:
        '201':
          description: IntegrationAccount created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/IntegrationAccount'}
        '400': {description: Invalid input.}
        '404': {description: IntegrationAccount not found.}
        '500': {description: Internal server error.}
  /IntegrationAccount/{id}:
    get:
      tags: [IntegrationAccount]
      summary: Retrieve a single IntegrationAccount
      description: Retrieves a single IntegrationAccount for a specific uid.
      x-spring-cacheable: true
      operationId: getIntegrationAccount
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the IntegrationAccount.
      responses:
        '200':
          description: Successfully retrieved the IntegrationAccount.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/IntegrationAccount'}
        '404': {description: IntegrationAccount not found.}
        '500': {description: Internal server error.}
    put:
      tags: [IntegrationAccount]
      summary: Update an existing IntegrationAccount
      description: Updates an existing IntegrationAccount.
      operationId: updateIntegrationAccount
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the IntegrationAccount.
      requestBody:
        description: Updated IntegrationAccount details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/IntegrationAccount'}
      responses:
        '200':
          description: IntegrationAccount updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/IntegrationAccount'}
        '400': {description: Invalid input.}
        '404': {description: IntegrationAccount not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [IntegrationAccount]
      summary: Delete a IntegrationAccount.
      description: Deletes a specific IntegrationAccount.
      operationId: deleteIntegrationAccount
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the IntegrationAccount.
      responses:
        '204': {description: IntegrationAccount deleted successfully.}
        '404': {description: IntegrationAccount not found.}
        '500': {description: Internal server error.}
  /LlmDetails:
    get:
      tags: [LlmDetails]
      summary: Retrieve a list of LlmDetailss
      description: Retrieves a list of LlmDetailss.
      x-spring-cacheable: true
      operationId: getLlmDetailsList
      responses:
        '200':
          description: Successfully retrieved the list of LlmDetailss.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/LlmDetails'}
        '404': {description: No LlmDetailss were found.}
        '500': {description: Internal server error.}
    post:
      tags: [LlmDetails]
      summary: Create a new LlmDetails
      description: Creates a new LlmDetails.
      operationId: postLlmDetails
      requestBody:
        description: LlmDetails details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/LlmDetails'}
      responses:
        '201':
          description: LlmDetails created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/LlmDetails'}
        '400': {description: Invalid input.}
        '404': {description: LlmDetails not found.}
        '500': {description: Internal server error.}
  /LlmDetails/{id}:
    get:
      tags: [LlmDetails]
      summary: Retrieve a single LlmDetails
      description: Retrieves a single LlmDetails for a specific uid.
      x-spring-cacheable: true
      operationId: getLlmDetails
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the LlmDetails.
      responses:
        '200':
          description: Successfully retrieved the LlmDetails.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/LlmDetails'}
        '404': {description: LlmDetails not found.}
        '500': {description: Internal server error.}
    put:
      tags: [LlmDetails]
      summary: Update an existing LlmDetails
      description: Updates an existing LlmDetails.
      operationId: updateLlmDetails
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the LlmDetails.
      requestBody:
        description: Updated LlmDetails details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/LlmDetails'}
      responses:
        '200':
          description: LlmDetails updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/LlmDetails'}
        '400': {description: Invalid input.}
        '404': {description: LlmDetails not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [LlmDetails]
      summary: Delete a LlmDetails.
      description: Deletes a specific LlmDetails.
      operationId: deleteLlmDetails
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the LlmDetails.
      responses:
        '204': {description: LlmDetails deleted successfully.}
        '404': {description: LlmDetails not found.}
        '500': {description: Internal server error.}
  /Application:
    get:
      tags: [Application]
      summary: Retrieve a list of Applications
      description: Retrieves a list of Applications.
      x-spring-cacheable: true
      operationId: getApplicationList
      responses:
        '200':
          description: Successfully retrieved the list of Applications.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/Application'}
        '404': {description: No Applications were found.}
        '500': {description: Internal server error.}
    post:
      tags: [Application]
      summary: Create a new Application
      description: Creates a new Application.
      operationId: postApplication
      requestBody:
        description: Application details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/Application'}
      responses:
        '201':
          description: Application created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Application'}
        '400': {description: Invalid input.}
        '404': {description: Application not found.}
        '500': {description: Internal server error.}
  /Application/{id}:
    get:
      tags: [Application]
      summary: Retrieve a single Application
      description: Retrieves a single Application for a specific uid.
      x-spring-cacheable: true
      operationId: getApplication
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Application.
      responses:
        '200':
          description: Successfully retrieved the Application.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Application'}
        '404': {description: Application not found.}
        '500': {description: Internal server error.}
    put:
      tags: [Application]
      summary: Update an existing Application
      description: Updates an existing Application.
      operationId: updateApplication
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Application.
      requestBody:
        description: Updated Application details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/Application'}
      responses:
        '200':
          description: Application updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Application'}
        '400': {description: Invalid input.}
        '404': {description: Application not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [Application]
      summary: Delete a Application.
      description: Deletes a specific Application.
      operationId: deleteApplication
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Application.
      responses:
        '204': {description: Application deleted successfully.}
        '404': {description: Application not found.}
        '500': {description: Internal server error.}
  /ContentData:
    get:
      tags: [ContentData]
      summary: Retrieve a list of ContentDatas
      description: Retrieves a list of ContentDatas.
      x-spring-cacheable: true
      operationId: getContentDataList
      responses:
        '200':
          description: Successfully retrieved the list of ContentDatas.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/ContentData'}
        '404': {description: No ContentDatas were found.}
        '500': {description: Internal server error.}
    post:
      tags: [ContentData]
      summary: Create a new ContentData
      description: Creates a new ContentData.
      operationId: postContentData
      requestBody:
        description: ContentData details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/ContentData'}
      responses:
        '201':
          description: ContentData created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ContentData'}
        '400': {description: Invalid input.}
        '404': {description: ContentData not found.}
        '500': {description: Internal server error.}
  /ContentData/{id}:
    get:
      tags: [ContentData]
      summary: Retrieve a single ContentData
      description: Retrieves a single ContentData for a specific uid.
      x-spring-cacheable: true
      operationId: getContentData
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the ContentData.
      responses:
        '200':
          description: Successfully retrieved the ContentData.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ContentData'}
        '404': {description: ContentData not found.}
        '500': {description: Internal server error.}
    put:
      tags: [ContentData]
      summary: Update an existing ContentData
      description: Updates an existing ContentData.
      operationId: updateContentData
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the ContentData.
      requestBody:
        description: Updated ContentData details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/ContentData'}
      responses:
        '200':
          description: ContentData updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ContentData'}
        '400': {description: Invalid input.}
        '404': {description: ContentData not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [ContentData]
      summary: Delete a ContentData.
      description: Deletes a specific ContentData.
      operationId: deleteContentData
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the ContentData.
      responses:
        '204': {description: ContentData deleted successfully.}
        '404': {description: ContentData not found.}
        '500': {description: Internal server error.}
  /ContentMediaLink:
    get:
      tags: [ContentMediaLink]
      summary: Retrieve a list of ContentMediaLinks
      description: Retrieves a list of ContentMediaLinks.
      x-spring-cacheable: true
      operationId: getContentMediaLinkList
      responses:
        '200':
          description: Successfully retrieved the list of ContentMediaLinks.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/ContentMediaLink'}
        '404': {description: No ContentMediaLinks were found.}
        '500': {description: Internal server error.}
    post:
      tags: [ContentMediaLink]
      summary: Create a new ContentMediaLink
      description: Creates a new ContentMediaLink.
      operationId: postContentMediaLink
      requestBody:
        description: ContentMediaLink details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/ContentMediaLink'}
      responses:
        '201':
          description: ContentMediaLink created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ContentMediaLink'}
        '400': {description: Invalid input.}
        '404': {description: ContentMediaLink not found.}
        '500': {description: Internal server error.}
  /ContentMediaLink/{id}:
    get:
      tags: [ContentMediaLink]
      summary: Retrieve a single ContentMediaLink
      description: Retrieves a single ContentMediaLink for a specific uid.
      x-spring-cacheable: true
      operationId: getContentMediaLink
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the ContentMediaLink.
      responses:
        '200':
          description: Successfully retrieved the ContentMediaLink.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ContentMediaLink'}
        '404': {description: ContentMediaLink not found.}
        '500': {description: Internal server error.}
    put:
      tags: [ContentMediaLink]
      summary: Update an existing ContentMediaLink
      description: Updates an existing ContentMediaLink.
      operationId: updateContentMediaLink
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the ContentMediaLink.
      requestBody:
        description: Updated ContentMediaLink details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/ContentMediaLink'}
      responses:
        '200':
          description: ContentMediaLink updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ContentMediaLink'}
        '400': {description: Invalid input.}
        '404': {description: ContentMediaLink not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [ContentMediaLink]
      summary: Delete a ContentMediaLink.
      description: Deletes a specific ContentMediaLink.
      operationId: deleteContentMediaLink
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the ContentMediaLink.
      responses:
        '204': {description: ContentMediaLink deleted successfully.}
        '404': {description: ContentMediaLink not found.}
        '500': {description: Internal server error.}
  /Rating:
    get:
      tags: [Rating]
      summary: Retrieve a list of Ratings
      description: Retrieves a list of Ratings.
      x-spring-cacheable: true
      operationId: getRatingList
      responses:
        '200':
          description: Successfully retrieved the list of Ratings.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/Rating'}
        '404': {description: No Ratings were found.}
        '500': {description: Internal server error.}
    post:
      tags: [Rating]
      summary: Create a new Rating
      description: Creates a new Rating.
      operationId: postRating
      requestBody:
        description: Rating details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/Rating'}
      responses:
        '201':
          description: Rating created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Rating'}
        '400': {description: Invalid input.}
        '404': {description: Rating not found.}
        '500': {description: Internal server error.}
  /Rating/{id}:
    get:
      tags: [Rating]
      summary: Retrieve a single Rating
      description: Retrieves a single Rating for a specific uid.
      x-spring-cacheable: true
      operationId: getRating
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Rating.
      responses:
        '200':
          description: Successfully retrieved the Rating.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Rating'}
        '404': {description: Rating not found.}
        '500': {description: Internal server error.}
    put:
      tags: [Rating]
      summary: Update an existing Rating
      description: Updates an existing Rating.
      operationId: updateRating
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Rating.
      requestBody:
        description: Updated Rating details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/Rating'}
      responses:
        '200':
          description: Rating updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Rating'}
        '400': {description: Invalid input.}
        '404': {description: Rating not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [Rating]
      summary: Delete a Rating.
      description: Deletes a specific Rating.
      operationId: deleteRating
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Rating.
      responses:
        '204': {description: Rating deleted successfully.}
        '404': {description: Rating not found.}
        '500': {description: Internal server error.}
  /ChatMessage:
    get:
      tags: [ChatMessage]
      summary: Retrieve a list of ChatMessages
      description: Retrieves a list of ChatMessages.
      x-spring-cacheable: true
      operationId: getChatMessageList
      responses:
        '200':
          description: Successfully retrieved the list of ChatMessages.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/ChatMessage'}
        '404': {description: No ChatMessages were found.}
        '500': {description: Internal server error.}
    post:
      tags: [ChatMessage]
      summary: Create a new ChatMessage
      description: Creates a new ChatMessage.
      operationId: postChatMessage
      requestBody:
        description: ChatMessage details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/ChatMessage'}
      responses:
        '201':
          description: ChatMessage created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ChatMessage'}
        '400': {description: Invalid input.}
        '404': {description: ChatMessage not found.}
        '500': {description: Internal server error.}
  /ChatMessage/{id}:
    get:
      tags: [ChatMessage]
      summary: Retrieve a single ChatMessage
      description: Retrieves a single ChatMessage for a specific uid.
      x-spring-cacheable: true
      operationId: getChatMessage
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the ChatMessage.
      responses:
        '200':
          description: Successfully retrieved the ChatMessage.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ChatMessage'}
        '404': {description: ChatMessage not found.}
        '500': {description: Internal server error.}
    put:
      tags: [ChatMessage]
      summary: Update an existing ChatMessage
      description: Updates an existing ChatMessage.
      operationId: updateChatMessage
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the ChatMessage.
      requestBody:
        description: Updated ChatMessage details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/ChatMessage'}
      responses:
        '200':
          description: ChatMessage updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ChatMessage'}
        '400': {description: Invalid input.}
        '404': {description: ChatMessage not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [ChatMessage]
      summary: Delete a ChatMessage.
      description: Deletes a specific ChatMessage.
      operationId: deleteChatMessage
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the ChatMessage.
      responses:
        '204': {description: ChatMessage deleted successfully.}
        '404': {description: ChatMessage not found.}
        '500': {description: Internal server error.}
  /ChatResponse:
    get:
      tags: [ChatResponse]
      summary: Retrieve a list of ChatResponses
      description: Retrieves a list of ChatResponses.
      x-spring-cacheable: true
      operationId: getChatResponseList
      responses:
        '200':
          description: Successfully retrieved the list of ChatResponses.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/ChatResponse'}
        '404': {description: No ChatResponses were found.}
        '500': {description: Internal server error.}
    post:
      tags: [ChatResponse]
      summary: Create a new ChatResponse
      description: Creates a new ChatResponse.
      operationId: postChatResponse
      requestBody:
        description: ChatResponse details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/ChatResponse'}
      responses:
        '201':
          description: ChatResponse created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ChatResponse'}
        '400': {description: Invalid input.}
        '404': {description: ChatResponse not found.}
        '500': {description: Internal server error.}
  /ChatResponse/{id}:
    get:
      tags: [ChatResponse]
      summary: Retrieve a single ChatResponse
      description: Retrieves a single ChatResponse for a specific uid.
      x-spring-cacheable: true
      operationId: getChatResponse
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the ChatResponse.
      responses:
        '200':
          description: Successfully retrieved the ChatResponse.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ChatResponse'}
        '404': {description: ChatResponse not found.}
        '500': {description: Internal server error.}
    put:
      tags: [ChatResponse]
      summary: Update an existing ChatResponse
      description: Updates an existing ChatResponse.
      operationId: updateChatResponse
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the ChatResponse.
      requestBody:
        description: Updated ChatResponse details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/ChatResponse'}
      responses:
        '200':
          description: ChatResponse updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ChatResponse'}
        '400': {description: Invalid input.}
        '404': {description: ChatResponse not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [ChatResponse]
      summary: Delete a ChatResponse.
      description: Deletes a specific ChatResponse.
      operationId: deleteChatResponse
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the ChatResponse.
      responses:
        '204': {description: ChatResponse deleted successfully.}
        '404': {description: ChatResponse not found.}
        '500': {description: Internal server error.}
  /Principal:
    get:
      tags: [Principal]
      summary: Retrieve a list of Principals
      description: Retrieves a list of Principals.
      x-spring-cacheable: true
      operationId: getPrincipalList
      responses:
        '200':
          description: Successfully retrieved the list of Principals.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/Principal'}
        '404': {description: No Principals were found.}
        '500': {description: Internal server error.}
    post:
      tags: [Principal]
      summary: Create a new Principal
      description: Creates a new Principal.
      operationId: postPrincipal
      requestBody:
        description: Principal details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/Principal'}
      responses:
        '201':
          description: Principal created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Principal'}
        '400': {description: Invalid input.}
        '404': {description: Principal not found.}
        '500': {description: Internal server error.}
  /Principal/{id}:
    get:
      tags: [Principal]
      summary: Retrieve a single Principal
      description: Retrieves a single Principal for a specific uid.
      x-spring-cacheable: true
      operationId: getPrincipal
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Principal.
      responses:
        '200':
          description: Successfully retrieved the Principal.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Principal'}
        '404': {description: Principal not found.}
        '500': {description: Internal server error.}
    put:
      tags: [Principal]
      summary: Update an existing Principal
      description: Updates an existing Principal.
      operationId: updatePrincipal
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Principal.
      requestBody:
        description: Updated Principal details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/Principal'}
      responses:
        '200':
          description: Principal updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Principal'}
        '400': {description: Invalid input.}
        '404': {description: Principal not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [Principal]
      summary: Delete a Principal.
      description: Deletes a specific Principal.
      operationId: deletePrincipal
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Principal.
      responses:
        '204': {description: Principal deleted successfully.}
        '404': {description: Principal not found.}
        '500': {description: Internal server error.}
  /Organization:
    get:
      tags: [Organization]
      summary: Retrieve a list of Organizations
      description: Retrieves a list of Organizations.
      x-spring-cacheable: true
      operationId: getOrganizationList
      responses:
        '200':
          description: Successfully retrieved the list of Organizations.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/Organization'}
        '404': {description: No Organizations were found.}
        '500': {description: Internal server error.}
    post:
      tags: [Organization]
      summary: Create a new Organization
      description: Creates a new Organization.
      operationId: postOrganization
      requestBody:
        description: Organization details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/Organization'}
      responses:
        '201':
          description: Organization created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Organization'}
        '400': {description: Invalid input.}
        '404': {description: Organization not found.}
        '500': {description: Internal server error.}
  /Organization/{id}:
    get:
      tags: [Organization]
      summary: Retrieve a single Organization
      description: Retrieves a single Organization for a specific uid.
      x-spring-cacheable: true
      operationId: getOrganization
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Organization.
      responses:
        '200':
          description: Successfully retrieved the Organization.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Organization'}
        '404': {description: Organization not found.}
        '500': {description: Internal server error.}
    put:
      tags: [Organization]
      summary: Update an existing Organization
      description: Updates an existing Organization.
      operationId: updateOrganization
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Organization.
      requestBody:
        description: Updated Organization details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/Organization'}
      responses:
        '200':
          description: Organization updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Organization'}
        '400': {description: Invalid input.}
        '404': {description: Organization not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [Organization]
      summary: Delete a Organization.
      description: Deletes a specific Organization.
      operationId: deleteOrganization
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Organization.
      responses:
        '204': {description: Organization deleted successfully.}
        '404': {description: Organization not found.}
        '500': {description: Internal server error.}
  /Address:
    get:
      tags: [Address]
      summary: Retrieve a list of Addresss
      description: Retrieves a list of Addresss.
      x-spring-cacheable: true
      operationId: getAddressList
      responses:
        '200':
          description: Successfully retrieved the list of Addresss.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/Address'}
        '404': {description: No Addresss were found.}
        '500': {description: Internal server error.}
    post:
      tags: [Address]
      summary: Create a new Address
      description: Creates a new Address.
      operationId: postAddress
      requestBody:
        description: Address details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/Address'}
      responses:
        '201':
          description: Address created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Address'}
        '400': {description: Invalid input.}
        '404': {description: Address not found.}
        '500': {description: Internal server error.}
  /Address/{id}:
    get:
      tags: [Address]
      summary: Retrieve a single Address
      description: Retrieves a single Address for a specific uid.
      x-spring-cacheable: true
      operationId: getAddress
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Address.
      responses:
        '200':
          description: Successfully retrieved the Address.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Address'}
        '404': {description: Address not found.}
        '500': {description: Internal server error.}
    put:
      tags: [Address]
      summary: Update an existing Address
      description: Updates an existing Address.
      operationId: updateAddress
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Address.
      requestBody:
        description: Updated Address details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/Address'}
      responses:
        '200':
          description: Address updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Address'}
        '400': {description: Invalid input.}
        '404': {description: Address not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [Address]
      summary: Delete a Address.
      description: Deletes a specific Address.
      operationId: deleteAddress
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Address.
      responses:
        '204': {description: Address deleted successfully.}
        '404': {description: Address not found.}
        '500': {description: Internal server error.}
  /Role:
    get:
      tags: [Role]
      summary: Retrieve a list of Roles
      description: Retrieves a list of Roles.
      x-spring-cacheable: true
      operationId: getRoleList
      responses:
        '200':
          description: Successfully retrieved the list of Roles.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/Role'}
        '404': {description: No Roles were found.}
        '500': {description: Internal server error.}
    post:
      tags: [Role]
      summary: Create a new Role
      description: Creates a new Role.
      operationId: postRole
      requestBody:
        description: Role details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/Role'}
      responses:
        '201':
          description: Role created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Role'}
        '400': {description: Invalid input.}
        '404': {description: Role not found.}
        '500': {description: Internal server error.}
  /Role/{id}:
    get:
      tags: [Role]
      summary: Retrieve a single Role
      description: Retrieves a single Role for a specific uid.
      x-spring-cacheable: true
      operationId: getRole
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Role.
      responses:
        '200':
          description: Successfully retrieved the Role.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Role'}
        '404': {description: Role not found.}
        '500': {description: Internal server error.}
    put:
      tags: [Role]
      summary: Update an existing Role
      description: Updates an existing Role.
      operationId: updateRole
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Role.
      requestBody:
        description: Updated Role details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/Role'}
      responses:
        '200':
          description: Role updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Role'}
        '400': {description: Invalid input.}
        '404': {description: Role not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [Role]
      summary: Delete a Role.
      description: Deletes a specific Role.
      operationId: deleteRole
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Role.
      responses:
        '204': {description: Role deleted successfully.}
        '404': {description: Role not found.}
        '500': {description: Internal server error.}
  /AclEntry:
    get:
      tags: [AclEntry]
      summary: Retrieve a list of AclEntrys
      description: Retrieves a list of AclEntrys.
      x-spring-cacheable: true
      operationId: getAclEntryList
      responses:
        '200':
          description: Successfully retrieved the list of AclEntrys.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/AclEntry'}
        '404': {description: No AclEntrys were found.}
        '500': {description: Internal server error.}
    post:
      tags: [AclEntry]
      summary: Create a new AclEntry
      description: Creates a new AclEntry.
      operationId: postAclEntry
      requestBody:
        description: AclEntry details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/AclEntry'}
      responses:
        '201':
          description: AclEntry created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/AclEntry'}
        '400': {description: Invalid input.}
        '404': {description: AclEntry not found.}
        '500': {description: Internal server error.}
  /AclEntry/{id}:
    get:
      tags: [AclEntry]
      summary: Retrieve a single AclEntry
      description: Retrieves a single AclEntry for a specific uid.
      x-spring-cacheable: true
      operationId: getAclEntry
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the AclEntry.
      responses:
        '200':
          description: Successfully retrieved the AclEntry.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/AclEntry'}
        '404': {description: AclEntry not found.}
        '500': {description: Internal server error.}
    put:
      tags: [AclEntry]
      summary: Update an existing AclEntry
      description: Updates an existing AclEntry.
      operationId: updateAclEntry
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the AclEntry.
      requestBody:
        description: Updated AclEntry details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/AclEntry'}
      responses:
        '200':
          description: AclEntry updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/AclEntry'}
        '400': {description: Invalid input.}
        '404': {description: AclEntry not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [AclEntry]
      summary: Delete a AclEntry.
      description: Deletes a specific AclEntry.
      operationId: deleteAclEntry
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the AclEntry.
      responses:
        '204': {description: AclEntry deleted successfully.}
        '404': {description: AclEntry not found.}
        '500': {description: Internal server error.}
  /ThorUXMeta:
    get:
      tags: [ThorUXMeta]
      summary: Retrieve a list of ThorUXMetas
      description: Retrieves a list of ThorUXMetas.
      x-spring-cacheable: true
      operationId: getThorUXMetaList
      responses:
        '200':
          description: Successfully retrieved the list of ThorUXMetas.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/ThorUXMeta'}
        '404': {description: No ThorUXMetas were found.}
        '500': {description: Internal server error.}
    post:
      tags: [ThorUXMeta]
      summary: Create a new ThorUXMeta
      description: Creates a new ThorUXMeta.
      operationId: postThorUXMeta
      requestBody:
        description: ThorUXMeta details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/ThorUXMeta'}
      responses:
        '201':
          description: ThorUXMeta created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ThorUXMeta'}
        '400': {description: Invalid input.}
        '404': {description: ThorUXMeta not found.}
        '500': {description: Internal server error.}
  /ThorUXMeta/{id}:
    get:
      tags: [ThorUXMeta]
      summary: Retrieve a single ThorUXMeta
      description: Retrieves a single ThorUXMeta for a specific uid.
      x-spring-cacheable: true
      operationId: getThorUXMeta
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the ThorUXMeta.
      responses:
        '200':
          description: Successfully retrieved the ThorUXMeta.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ThorUXMeta'}
        '404': {description: ThorUXMeta not found.}
        '500': {description: Internal server error.}
    put:
      tags: [ThorUXMeta]
      summary: Update an existing ThorUXMeta
      description: Updates an existing ThorUXMeta.
      operationId: updateThorUXMeta
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the ThorUXMeta.
      requestBody:
        description: Updated ThorUXMeta details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/ThorUXMeta'}
      responses:
        '200':
          description: ThorUXMeta updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ThorUXMeta'}
        '400': {description: Invalid input.}
        '404': {description: ThorUXMeta not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [ThorUXMeta]
      summary: Delete a ThorUXMeta.
      description: Deletes a specific ThorUXMeta.
      operationId: deleteThorUXMeta
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the ThorUXMeta.
      responses:
        '204': {description: ThorUXMeta deleted successfully.}
        '404': {description: ThorUXMeta not found.}
        '500': {description: Internal server error.}
  /ThorUXComponent:
    get:
      tags: [ThorUXComponent]
      summary: Retrieve a list of ThorUXComponents
      description: Retrieves a list of ThorUXComponents.
      x-spring-cacheable: true
      operationId: getThorUXComponentList
      responses:
        '200':
          description: Successfully retrieved the list of ThorUXComponents.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/ThorUXComponent'}
        '404': {description: No ThorUXComponents were found.}
        '500': {description: Internal server error.}
    post:
      tags: [ThorUXComponent]
      summary: Create a new ThorUXComponent
      description: Creates a new ThorUXComponent.
      operationId: postThorUXComponent
      requestBody:
        description: ThorUXComponent details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/ThorUXComponent'}
      responses:
        '201':
          description: ThorUXComponent created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ThorUXComponent'}
        '400': {description: Invalid input.}
        '404': {description: ThorUXComponent not found.}
        '500': {description: Internal server error.}
  /ThorUXComponent/{id}:
    get:
      tags: [ThorUXComponent]
      summary: Retrieve a single ThorUXComponent
      description: Retrieves a single ThorUXComponent for a specific uid.
      x-spring-cacheable: true
      operationId: getThorUXComponent
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the ThorUXComponent.
      responses:
        '200':
          description: Successfully retrieved the ThorUXComponent.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ThorUXComponent'}
        '404': {description: ThorUXComponent not found.}
        '500': {description: Internal server error.}
    put:
      tags: [ThorUXComponent]
      summary: Update an existing ThorUXComponent
      description: Updates an existing ThorUXComponent.
      operationId: updateThorUXComponent
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the ThorUXComponent.
      requestBody:
        description: Updated ThorUXComponent details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/ThorUXComponent'}
      responses:
        '200':
          description: ThorUXComponent updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ThorUXComponent'}
        '400': {description: Invalid input.}
        '404': {description: ThorUXComponent not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [ThorUXComponent]
      summary: Delete a ThorUXComponent.
      description: Deletes a specific ThorUXComponent.
      operationId: deleteThorUXComponent
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the ThorUXComponent.
      responses:
        '204': {description: ThorUXComponent deleted successfully.}
        '404': {description: ThorUXComponent not found.}
        '500': {description: Internal server error.}
  /Login:
    get:
      tags: [Login]
      summary: Retrieve a list of Logins
      description: Retrieves a list of Logins.
      x-spring-cacheable: true
      operationId: getLoginList
      responses:
        '200':
          description: Successfully retrieved the list of Logins.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/Login'}
        '404': {description: No Logins were found.}
        '500': {description: Internal server error.}
    post:
      tags: [Login]
      summary: Create a new Login
      description: Creates a new Login.
      operationId: postLogin
      requestBody:
        description: Login details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/Login'}
      responses:
        '201':
          description: Login created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Login'}
        '400': {description: Invalid input.}
        '404': {description: Login not found.}
        '500': {description: Internal server error.}
  /Login/{id}:
    get:
      tags: [Login]
      summary: Retrieve a single Login
      description: Retrieves a single Login for a specific uid.
      x-spring-cacheable: true
      operationId: getLogin
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Login.
      responses:
        '200':
          description: Successfully retrieved the Login.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Login'}
        '404': {description: Login not found.}
        '500': {description: Internal server error.}
    put:
      tags: [Login]
      summary: Update an existing Login
      description: Updates an existing Login.
      operationId: updateLogin
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Login.
      requestBody:
        description: Updated Login details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/Login'}
      responses:
        '200':
          description: Login updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Login'}
        '400': {description: Invalid input.}
        '404': {description: Login not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [Login]
      summary: Delete a Login.
      description: Deletes a specific Login.
      operationId: deleteLogin
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Login.
      responses:
        '204': {description: Login deleted successfully.}
        '404': {description: Login not found.}
        '500': {description: Internal server error.}
  /Logout:
    get:
      tags: [Logout]
      summary: Retrieve a list of Logouts
      description: Retrieves a list of Logouts.
      x-spring-cacheable: true
      operationId: getLogoutList
      responses:
        '200':
          description: Successfully retrieved the list of Logouts.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/Logout'}
        '404': {description: No Logouts were found.}
        '500': {description: Internal server error.}
    post:
      tags: [Logout]
      summary: Create a new Logout
      description: Creates a new Logout.
      operationId: postLogout
      requestBody:
        description: Logout details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/Logout'}
      responses:
        '201':
          description: Logout created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Logout'}
        '400': {description: Invalid input.}
        '404': {description: Logout not found.}
        '500': {description: Internal server error.}
  /Logout/{id}:
    get:
      tags: [Logout]
      summary: Retrieve a single Logout
      description: Retrieves a single Logout for a specific uid.
      x-spring-cacheable: true
      operationId: getLogout
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Logout.
      responses:
        '200':
          description: Successfully retrieved the Logout.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Logout'}
        '404': {description: Logout not found.}
        '500': {description: Internal server error.}
    put:
      tags: [Logout]
      summary: Update an existing Logout
      description: Updates an existing Logout.
      operationId: updateLogout
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Logout.
      requestBody:
        description: Updated Logout details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/Logout'}
      responses:
        '200':
          description: Logout updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Logout'}
        '400': {description: Invalid input.}
        '404': {description: Logout not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [Logout]
      summary: Delete a Logout.
      description: Deletes a specific Logout.
      operationId: deleteLogout
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Logout.
      responses:
        '204': {description: Logout deleted successfully.}
        '404': {description: Logout not found.}
        '500': {description: Internal server error.}
  /Workbook:
    get:
      tags: [Workbook]
      summary: Retrieve a list of Workbooks
      description: Retrieves a list of Workbooks.
      x-spring-cacheable: true
      operationId: getWorkbookList
      responses:
        '200':
          description: Successfully retrieved the list of Workbooks.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/Workbook'}
        '404': {description: No Workbooks were found.}
        '500': {description: Internal server error.}
    post:
      tags: [Workbook]
      summary: Create a new Workbook
      description: Creates a new Workbook.
      operationId: postWorkbook
      requestBody:
        description: Workbook details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/Workbook'}
      responses:
        '201':
          description: Workbook created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Workbook'}
        '400': {description: Invalid input.}
        '404': {description: Workbook not found.}
        '500': {description: Internal server error.}
  /Workbook/{id}:
    get:
      tags: [Workbook]
      summary: Retrieve a single Workbook
      description: Retrieves a single Workbook for a specific uid.
      x-spring-cacheable: true
      operationId: getWorkbook
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Workbook.
      responses:
        '200':
          description: Successfully retrieved the Workbook.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Workbook'}
        '404': {description: Workbook not found.}
        '500': {description: Internal server error.}
    put:
      tags: [Workbook]
      summary: Update an existing Workbook
      description: Updates an existing Workbook.
      operationId: updateWorkbook
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Workbook.
      requestBody:
        description: Updated Workbook details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/Workbook'}
      responses:
        '200':
          description: Workbook updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Workbook'}
        '400': {description: Invalid input.}
        '404': {description: Workbook not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [Workbook]
      summary: Delete a Workbook.
      description: Deletes a specific Workbook.
      operationId: deleteWorkbook
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Workbook.
      responses:
        '204': {description: Workbook deleted successfully.}
        '404': {description: Workbook not found.}
        '500': {description: Internal server error.}
  /Sheet:
    get:
      tags: [Sheet]
      summary: Retrieve a list of Sheets
      description: Retrieves a list of Sheets.
      x-spring-cacheable: true
      operationId: getSheetList
      responses:
        '200':
          description: Successfully retrieved the list of Sheets.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/Sheet'}
        '404': {description: No Sheets were found.}
        '500': {description: Internal server error.}
    post:
      tags: [Sheet]
      summary: Create a new Sheet
      description: Creates a new Sheet.
      operationId: postSheet
      requestBody:
        description: Sheet details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/Sheet'}
      responses:
        '201':
          description: Sheet created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Sheet'}
        '400': {description: Invalid input.}
        '404': {description: Sheet not found.}
        '500': {description: Internal server error.}
  /Sheet/{id}:
    get:
      tags: [Sheet]
      summary: Retrieve a single Sheet
      description: Retrieves a single Sheet for a specific uid.
      x-spring-cacheable: true
      operationId: getSheet
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Sheet.
      responses:
        '200':
          description: Successfully retrieved the Sheet.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Sheet'}
        '404': {description: Sheet not found.}
        '500': {description: Internal server error.}
    put:
      tags: [Sheet]
      summary: Update an existing Sheet
      description: Updates an existing Sheet.
      operationId: updateSheet
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Sheet.
      requestBody:
        description: Updated Sheet details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/Sheet'}
      responses:
        '200':
          description: Sheet updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Sheet'}
        '400': {description: Invalid input.}
        '404': {description: Sheet not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [Sheet]
      summary: Delete a Sheet.
      description: Deletes a specific Sheet.
      operationId: deleteSheet
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Sheet.
      responses:
        '204': {description: Sheet deleted successfully.}
        '404': {description: Sheet not found.}
        '500': {description: Internal server error.}
  /Cell:
    get:
      tags: [Cell]
      summary: Retrieve a list of Cells
      description: Retrieves a list of Cells.
      x-spring-cacheable: true
      operationId: getCellList
      responses:
        '200':
          description: Successfully retrieved the list of Cells.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/Cell'}
        '404': {description: No Cells were found.}
        '500': {description: Internal server error.}
    post:
      tags: [Cell]
      summary: Create a new Cell
      description: Creates a new Cell.
      operationId: postCell
      requestBody:
        description: Cell details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/Cell'}
      responses:
        '201':
          description: Cell created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Cell'}
        '400': {description: Invalid input.}
        '404': {description: Cell not found.}
        '500': {description: Internal server error.}
  /Cell/{id}:
    get:
      tags: [Cell]
      summary: Retrieve a single Cell
      description: Retrieves a single Cell for a specific uid.
      x-spring-cacheable: true
      operationId: getCell
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Cell.
      responses:
        '200':
          description: Successfully retrieved the Cell.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Cell'}
        '404': {description: Cell not found.}
        '500': {description: Internal server error.}
    put:
      tags: [Cell]
      summary: Update an existing Cell
      description: Updates an existing Cell.
      operationId: updateCell
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Cell.
      requestBody:
        description: Updated Cell details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/Cell'}
      responses:
        '200':
          description: Cell updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Cell'}
        '400': {description: Invalid input.}
        '404': {description: Cell not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [Cell]
      summary: Delete a Cell.
      description: Deletes a specific Cell.
      operationId: deleteCell
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Cell.
      responses:
        '204': {description: Cell deleted successfully.}
        '404': {description: Cell not found.}
        '500': {description: Internal server error.}
  /SheetRow:
    get:
      tags: [SheetRow]
      summary: Retrieve a list of SheetRows
      description: Retrieves a list of SheetRows.
      x-spring-cacheable: true
      operationId: getSheetRowList
      responses:
        '200':
          description: Successfully retrieved the list of SheetRows.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/SheetRow'}
        '404': {description: No SheetRows were found.}
        '500': {description: Internal server error.}
    post:
      tags: [SheetRow]
      summary: Create a new SheetRow
      description: Creates a new SheetRow.
      operationId: postSheetRow
      requestBody:
        description: SheetRow details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/SheetRow'}
      responses:
        '201':
          description: SheetRow created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/SheetRow'}
        '400': {description: Invalid input.}
        '404': {description: SheetRow not found.}
        '500': {description: Internal server error.}
  /SheetRow/{id}:
    get:
      tags: [SheetRow]
      summary: Retrieve a single SheetRow
      description: Retrieves a single SheetRow for a specific uid.
      x-spring-cacheable: true
      operationId: getSheetRow
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the SheetRow.
      responses:
        '200':
          description: Successfully retrieved the SheetRow.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/SheetRow'}
        '404': {description: SheetRow not found.}
        '500': {description: Internal server error.}
    put:
      tags: [SheetRow]
      summary: Update an existing SheetRow
      description: Updates an existing SheetRow.
      operationId: updateSheetRow
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the SheetRow.
      requestBody:
        description: Updated SheetRow details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/SheetRow'}
      responses:
        '200':
          description: SheetRow updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/SheetRow'}
        '400': {description: Invalid input.}
        '404': {description: SheetRow not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [SheetRow]
      summary: Delete a SheetRow.
      description: Deletes a specific SheetRow.
      operationId: deleteSheetRow
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the SheetRow.
      responses:
        '204': {description: SheetRow deleted successfully.}
        '404': {description: SheetRow not found.}
        '500': {description: Internal server error.}
  /SheetColumn:
    get:
      tags: [SheetColumn]
      summary: Retrieve a list of SheetColumns
      description: Retrieves a list of SheetColumns.
      x-spring-cacheable: true
      operationId: getSheetColumnList
      responses:
        '200':
          description: Successfully retrieved the list of SheetColumns.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/SheetColumn'}
        '404': {description: No SheetColumns were found.}
        '500': {description: Internal server error.}
    post:
      tags: [SheetColumn]
      summary: Create a new SheetColumn
      description: Creates a new SheetColumn.
      operationId: postSheetColumn
      requestBody:
        description: SheetColumn details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/SheetColumn'}
      responses:
        '201':
          description: SheetColumn created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/SheetColumn'}
        '400': {description: Invalid input.}
        '404': {description: SheetColumn not found.}
        '500': {description: Internal server error.}
  /SheetColumn/{id}:
    get:
      tags: [SheetColumn]
      summary: Retrieve a single SheetColumn
      description: Retrieves a single SheetColumn for a specific uid.
      x-spring-cacheable: true
      operationId: getSheetColumn
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the SheetColumn.
      responses:
        '200':
          description: Successfully retrieved the SheetColumn.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/SheetColumn'}
        '404': {description: SheetColumn not found.}
        '500': {description: Internal server error.}
    put:
      tags: [SheetColumn]
      summary: Update an existing SheetColumn
      description: Updates an existing SheetColumn.
      operationId: updateSheetColumn
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the SheetColumn.
      requestBody:
        description: Updated SheetColumn details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/SheetColumn'}
      responses:
        '200':
          description: SheetColumn updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/SheetColumn'}
        '400': {description: Invalid input.}
        '404': {description: SheetColumn not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [SheetColumn]
      summary: Delete a SheetColumn.
      description: Deletes a specific SheetColumn.
      operationId: deleteSheetColumn
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the SheetColumn.
      responses:
        '204': {description: SheetColumn deleted successfully.}
        '404': {description: SheetColumn not found.}
        '500': {description: Internal server error.}
  /NamedRange:
    get:
      tags: [NamedRange]
      summary: Retrieve a list of NamedRanges
      description: Retrieves a list of NamedRanges.
      x-spring-cacheable: true
      operationId: getNamedRangeList
      responses:
        '200':
          description: Successfully retrieved the list of NamedRanges.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/NamedRange'}
        '404': {description: No NamedRanges were found.}
        '500': {description: Internal server error.}
    post:
      tags: [NamedRange]
      summary: Create a new NamedRange
      description: Creates a new NamedRange.
      operationId: postNamedRange
      requestBody:
        description: NamedRange details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/NamedRange'}
      responses:
        '201':
          description: NamedRange created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/NamedRange'}
        '400': {description: Invalid input.}
        '404': {description: NamedRange not found.}
        '500': {description: Internal server error.}
  /NamedRange/{id}:
    get:
      tags: [NamedRange]
      summary: Retrieve a single NamedRange
      description: Retrieves a single NamedRange for a specific uid.
      x-spring-cacheable: true
      operationId: getNamedRange
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the NamedRange.
      responses:
        '200':
          description: Successfully retrieved the NamedRange.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/NamedRange'}
        '404': {description: NamedRange not found.}
        '500': {description: Internal server error.}
    put:
      tags: [NamedRange]
      summary: Update an existing NamedRange
      description: Updates an existing NamedRange.
      operationId: updateNamedRange
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the NamedRange.
      requestBody:
        description: Updated NamedRange details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/NamedRange'}
      responses:
        '200':
          description: NamedRange updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/NamedRange'}
        '400': {description: Invalid input.}
        '404': {description: NamedRange not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [NamedRange]
      summary: Delete a NamedRange.
      description: Deletes a specific NamedRange.
      operationId: deleteNamedRange
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the NamedRange.
      responses:
        '204': {description: NamedRange deleted successfully.}
        '404': {description: NamedRange not found.}
        '500': {description: Internal server error.}
  /MergeRange:
    get:
      tags: [MergeRange]
      summary: Retrieve a list of MergeRanges
      description: Retrieves a list of MergeRanges.
      x-spring-cacheable: true
      operationId: getMergeRangeList
      responses:
        '200':
          description: Successfully retrieved the list of MergeRanges.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/MergeRange'}
        '404': {description: No MergeRanges were found.}
        '500': {description: Internal server error.}
    post:
      tags: [MergeRange]
      summary: Create a new MergeRange
      description: Creates a new MergeRange.
      operationId: postMergeRange
      requestBody:
        description: MergeRange details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/MergeRange'}
      responses:
        '201':
          description: MergeRange created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/MergeRange'}
        '400': {description: Invalid input.}
        '404': {description: MergeRange not found.}
        '500': {description: Internal server error.}
  /MergeRange/{id}:
    get:
      tags: [MergeRange]
      summary: Retrieve a single MergeRange
      description: Retrieves a single MergeRange for a specific uid.
      x-spring-cacheable: true
      operationId: getMergeRange
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the MergeRange.
      responses:
        '200':
          description: Successfully retrieved the MergeRange.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/MergeRange'}
        '404': {description: MergeRange not found.}
        '500': {description: Internal server error.}
    put:
      tags: [MergeRange]
      summary: Update an existing MergeRange
      description: Updates an existing MergeRange.
      operationId: updateMergeRange
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the MergeRange.
      requestBody:
        description: Updated MergeRange details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/MergeRange'}
      responses:
        '200':
          description: MergeRange updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/MergeRange'}
        '400': {description: Invalid input.}
        '404': {description: MergeRange not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [MergeRange]
      summary: Delete a MergeRange.
      description: Deletes a specific MergeRange.
      operationId: deleteMergeRange
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the MergeRange.
      responses:
        '204': {description: MergeRange deleted successfully.}
        '404': {description: MergeRange not found.}
        '500': {description: Internal server error.}
  /BlankRange:
    get:
      tags: [BlankRange]
      summary: Retrieve a list of BlankRanges
      description: Retrieves a list of BlankRanges.
      x-spring-cacheable: true
      operationId: getBlankRangeList
      responses:
        '200':
          description: Successfully retrieved the list of BlankRanges.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/BlankRange'}
        '404': {description: No BlankRanges were found.}
        '500': {description: Internal server error.}
    post:
      tags: [BlankRange]
      summary: Create a new BlankRange
      description: Creates a new BlankRange.
      operationId: postBlankRange
      requestBody:
        description: BlankRange details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/BlankRange'}
      responses:
        '201':
          description: BlankRange created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/BlankRange'}
        '400': {description: Invalid input.}
        '404': {description: BlankRange not found.}
        '500': {description: Internal server error.}
  /BlankRange/{id}:
    get:
      tags: [BlankRange]
      summary: Retrieve a single BlankRange
      description: Retrieves a single BlankRange for a specific uid.
      x-spring-cacheable: true
      operationId: getBlankRange
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the BlankRange.
      responses:
        '200':
          description: Successfully retrieved the BlankRange.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/BlankRange'}
        '404': {description: BlankRange not found.}
        '500': {description: Internal server error.}
    put:
      tags: [BlankRange]
      summary: Update an existing BlankRange
      description: Updates an existing BlankRange.
      operationId: updateBlankRange
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the BlankRange.
      requestBody:
        description: Updated BlankRange details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/BlankRange'}
      responses:
        '200':
          description: BlankRange updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/BlankRange'}
        '400': {description: Invalid input.}
        '404': {description: BlankRange not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [BlankRange]
      summary: Delete a BlankRange.
      description: Deletes a specific BlankRange.
      operationId: deleteBlankRange
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the BlankRange.
      responses:
        '204': {description: BlankRange deleted successfully.}
        '404': {description: BlankRange not found.}
        '500': {description: Internal server error.}
  /Formula:
    get:
      tags: [Formula]
      summary: Retrieve a list of Formulas
      description: Retrieves a list of Formulas.
      x-spring-cacheable: true
      operationId: getFormulaList
      responses:
        '200':
          description: Successfully retrieved the list of Formulas.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/Formula'}
        '404': {description: No Formulas were found.}
        '500': {description: Internal server error.}
    post:
      tags: [Formula]
      summary: Create a new Formula
      description: Creates a new Formula.
      operationId: postFormula
      requestBody:
        description: Formula details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/Formula'}
      responses:
        '201':
          description: Formula created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Formula'}
        '400': {description: Invalid input.}
        '404': {description: Formula not found.}
        '500': {description: Internal server error.}
  /Formula/{id}:
    get:
      tags: [Formula]
      summary: Retrieve a single Formula
      description: Retrieves a single Formula for a specific uid.
      x-spring-cacheable: true
      operationId: getFormula
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Formula.
      responses:
        '200':
          description: Successfully retrieved the Formula.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Formula'}
        '404': {description: Formula not found.}
        '500': {description: Internal server error.}
    put:
      tags: [Formula]
      summary: Update an existing Formula
      description: Updates an existing Formula.
      operationId: updateFormula
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Formula.
      requestBody:
        description: Updated Formula details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/Formula'}
      responses:
        '200':
          description: Formula updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Formula'}
        '400': {description: Invalid input.}
        '404': {description: Formula not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [Formula]
      summary: Delete a Formula.
      description: Deletes a specific Formula.
      operationId: deleteFormula
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Formula.
      responses:
        '204': {description: Formula deleted successfully.}
        '404': {description: Formula not found.}
        '500': {description: Internal server error.}
  /PtgRef:
    get:
      tags: [PtgRef]
      summary: Retrieve a list of PtgRefs
      description: Retrieves a list of PtgRefs.
      x-spring-cacheable: true
      operationId: getPtgRefList
      responses:
        '200':
          description: Successfully retrieved the list of PtgRefs.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/PtgRef'}
        '404': {description: No PtgRefs were found.}
        '500': {description: Internal server error.}
    post:
      tags: [PtgRef]
      summary: Create a new PtgRef
      description: Creates a new PtgRef.
      operationId: postPtgRef
      requestBody:
        description: PtgRef details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/PtgRef'}
      responses:
        '201':
          description: PtgRef created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/PtgRef'}
        '400': {description: Invalid input.}
        '404': {description: PtgRef not found.}
        '500': {description: Internal server error.}
  /PtgRef/{id}:
    get:
      tags: [PtgRef]
      summary: Retrieve a single PtgRef
      description: Retrieves a single PtgRef for a specific uid.
      x-spring-cacheable: true
      operationId: getPtgRef
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the PtgRef.
      responses:
        '200':
          description: Successfully retrieved the PtgRef.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/PtgRef'}
        '404': {description: PtgRef not found.}
        '500': {description: Internal server error.}
    put:
      tags: [PtgRef]
      summary: Update an existing PtgRef
      description: Updates an existing PtgRef.
      operationId: updatePtgRef
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the PtgRef.
      requestBody:
        description: Updated PtgRef details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/PtgRef'}
      responses:
        '200':
          description: PtgRef updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/PtgRef'}
        '400': {description: Invalid input.}
        '404': {description: PtgRef not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [PtgRef]
      summary: Delete a PtgRef.
      description: Deletes a specific PtgRef.
      operationId: deletePtgRef
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the PtgRef.
      responses:
        '204': {description: PtgRef deleted successfully.}
        '404': {description: PtgRef not found.}
        '500': {description: Internal server error.}
  /Ptg:
    get:
      tags: [Ptg]
      summary: Retrieve a list of Ptgs
      description: Retrieves a list of Ptgs.
      x-spring-cacheable: true
      operationId: getPtgList
      responses:
        '200':
          description: Successfully retrieved the list of Ptgs.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/Ptg'}
        '404': {description: No Ptgs were found.}
        '500': {description: Internal server error.}
    post:
      tags: [Ptg]
      summary: Create a new Ptg
      description: Creates a new Ptg.
      operationId: postPtg
      requestBody:
        description: Ptg details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/Ptg'}
      responses:
        '201':
          description: Ptg created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Ptg'}
        '400': {description: Invalid input.}
        '404': {description: Ptg not found.}
        '500': {description: Internal server error.}
  /Ptg/{id}:
    get:
      tags: [Ptg]
      summary: Retrieve a single Ptg
      description: Retrieves a single Ptg for a specific uid.
      x-spring-cacheable: true
      operationId: getPtg
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Ptg.
      responses:
        '200':
          description: Successfully retrieved the Ptg.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Ptg'}
        '404': {description: Ptg not found.}
        '500': {description: Internal server error.}
    put:
      tags: [Ptg]
      summary: Update an existing Ptg
      description: Updates an existing Ptg.
      operationId: updatePtg
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Ptg.
      requestBody:
        description: Updated Ptg details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/Ptg'}
      responses:
        '200':
          description: Ptg updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Ptg'}
        '400': {description: Invalid input.}
        '404': {description: Ptg not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [Ptg]
      summary: Delete a Ptg.
      description: Deletes a specific Ptg.
      operationId: deletePtg
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Ptg.
      responses:
        '204': {description: Ptg deleted successfully.}
        '404': {description: Ptg not found.}
        '500': {description: Internal server error.}
  /PivotTable:
    get:
      tags: [PivotTable]
      summary: Retrieve a list of PivotTables
      description: Retrieves a list of PivotTables.
      x-spring-cacheable: true
      operationId: getPivotTableList
      responses:
        '200':
          description: Successfully retrieved the list of PivotTables.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/PivotTable'}
        '404': {description: No PivotTables were found.}
        '500': {description: Internal server error.}
    post:
      tags: [PivotTable]
      summary: Create a new PivotTable
      description: Creates a new PivotTable.
      operationId: postPivotTable
      requestBody:
        description: PivotTable details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/PivotTable'}
      responses:
        '201':
          description: PivotTable created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/PivotTable'}
        '400': {description: Invalid input.}
        '404': {description: PivotTable not found.}
        '500': {description: Internal server error.}
  /PivotTable/{id}:
    get:
      tags: [PivotTable]
      summary: Retrieve a single PivotTable
      description: Retrieves a single PivotTable for a specific uid.
      x-spring-cacheable: true
      operationId: getPivotTable
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the PivotTable.
      responses:
        '200':
          description: Successfully retrieved the PivotTable.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/PivotTable'}
        '404': {description: PivotTable not found.}
        '500': {description: Internal server error.}
    put:
      tags: [PivotTable]
      summary: Update an existing PivotTable
      description: Updates an existing PivotTable.
      operationId: updatePivotTable
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the PivotTable.
      requestBody:
        description: Updated PivotTable details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/PivotTable'}
      responses:
        '200':
          description: PivotTable updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/PivotTable'}
        '400': {description: Invalid input.}
        '404': {description: PivotTable not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [PivotTable]
      summary: Delete a PivotTable.
      description: Deletes a specific PivotTable.
      operationId: deletePivotTable
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the PivotTable.
      responses:
        '204': {description: PivotTable deleted successfully.}
        '404': {description: PivotTable not found.}
        '500': {description: Internal server error.}
  /Format:
    get:
      tags: [Format]
      summary: Retrieve a list of Formats
      description: Retrieves a list of Formats.
      x-spring-cacheable: true
      operationId: getFormatList
      responses:
        '200':
          description: Successfully retrieved the list of Formats.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/Format'}
        '404': {description: No Formats were found.}
        '500': {description: Internal server error.}
    post:
      tags: [Format]
      summary: Create a new Format
      description: Creates a new Format.
      operationId: postFormat
      requestBody:
        description: Format details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/Format'}
      responses:
        '201':
          description: Format created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Format'}
        '400': {description: Invalid input.}
        '404': {description: Format not found.}
        '500': {description: Internal server error.}
  /Format/{id}:
    get:
      tags: [Format]
      summary: Retrieve a single Format
      description: Retrieves a single Format for a specific uid.
      x-spring-cacheable: true
      operationId: getFormat
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Format.
      responses:
        '200':
          description: Successfully retrieved the Format.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Format'}
        '404': {description: Format not found.}
        '500': {description: Internal server error.}
    put:
      tags: [Format]
      summary: Update an existing Format
      description: Updates an existing Format.
      operationId: updateFormat
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Format.
      requestBody:
        description: Updated Format details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/Format'}
      responses:
        '200':
          description: Format updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Format'}
        '400': {description: Invalid input.}
        '404': {description: Format not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [Format]
      summary: Delete a Format.
      description: Deletes a specific Format.
      operationId: deleteFormat
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Format.
      responses:
        '204': {description: Format deleted successfully.}
        '404': {description: Format not found.}
        '500': {description: Internal server error.}
  /Border:
    get:
      tags: [Border]
      summary: Retrieve a list of Borders
      description: Retrieves a list of Borders.
      x-spring-cacheable: true
      operationId: getBorderList
      responses:
        '200':
          description: Successfully retrieved the list of Borders.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/Border'}
        '404': {description: No Borders were found.}
        '500': {description: Internal server error.}
    post:
      tags: [Border]
      summary: Create a new Border
      description: Creates a new Border.
      operationId: postBorder
      requestBody:
        description: Border details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/Border'}
      responses:
        '201':
          description: Border created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Border'}
        '400': {description: Invalid input.}
        '404': {description: Border not found.}
        '500': {description: Internal server error.}
  /Border/{id}:
    get:
      tags: [Border]
      summary: Retrieve a single Border
      description: Retrieves a single Border for a specific uid.
      x-spring-cacheable: true
      operationId: getBorder
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Border.
      responses:
        '200':
          description: Successfully retrieved the Border.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Border'}
        '404': {description: Border not found.}
        '500': {description: Internal server error.}
    put:
      tags: [Border]
      summary: Update an existing Border
      description: Updates an existing Border.
      operationId: updateBorder
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Border.
      requestBody:
        description: Updated Border details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/Border'}
      responses:
        '200':
          description: Border updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Border'}
        '400': {description: Invalid input.}
        '404': {description: Border not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [Border]
      summary: Delete a Border.
      description: Deletes a specific Border.
      operationId: deleteBorder
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Border.
      responses:
        '204': {description: Border deleted successfully.}
        '404': {description: Border not found.}
        '500': {description: Internal server error.}
  /MediaObject:
    get:
      tags: [MediaObject]
      summary: Retrieve a list of MediaObjects
      description: Retrieves a list of MediaObjects.
      x-spring-cacheable: true
      operationId: getMediaObjectList
      responses:
        '200':
          description: Successfully retrieved the list of MediaObjects.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/MediaObject'}
        '404': {description: No MediaObjects were found.}
        '500': {description: Internal server error.}
    post:
      tags: [MediaObject]
      summary: Create a new MediaObject
      description: Creates a new MediaObject.
      operationId: postMediaObject
      requestBody:
        description: MediaObject details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/MediaObject'}
      responses:
        '201':
          description: MediaObject created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/MediaObject'}
        '400': {description: Invalid input.}
        '404': {description: MediaObject not found.}
        '500': {description: Internal server error.}
  /MediaObject/{id}:
    get:
      tags: [MediaObject]
      summary: Retrieve a single MediaObject
      description: Retrieves a single MediaObject for a specific uid.
      x-spring-cacheable: true
      operationId: getMediaObject
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the MediaObject.
      responses:
        '200':
          description: Successfully retrieved the MediaObject.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/MediaObject'}
        '404': {description: MediaObject not found.}
        '500': {description: Internal server error.}
    put:
      tags: [MediaObject]
      summary: Update an existing MediaObject
      description: Updates an existing MediaObject.
      operationId: updateMediaObject
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the MediaObject.
      requestBody:
        description: Updated MediaObject details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/MediaObject'}
      responses:
        '200':
          description: MediaObject updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/MediaObject'}
        '400': {description: Invalid input.}
        '404': {description: MediaObject not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [MediaObject]
      summary: Delete a MediaObject.
      description: Deletes a specific MediaObject.
      operationId: deleteMediaObject
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the MediaObject.
      responses:
        '204': {description: MediaObject deleted successfully.}
        '404': {description: MediaObject not found.}
        '500': {description: Internal server error.}
  /Customer:
    get:
      tags: [Customer]
      summary: Retrieve a list of Customers
      description: Retrieves a list of Customers.
      x-spring-cacheable: true
      operationId: getCustomerList
      responses:
        '200':
          description: Successfully retrieved the list of Customers.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/Customer'}
        '404': {description: No Customers were found.}
        '500': {description: Internal server error.}
    post:
      tags: [Customer]
      summary: Create a new Customer
      description: Creates a new Customer.
      operationId: postCustomer
      requestBody:
        description: Customer details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/Customer'}
      responses:
        '201':
          description: Customer created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Customer'}
        '400': {description: Invalid input.}
        '404': {description: Customer not found.}
        '500': {description: Internal server error.}
  /Customer/{id}:
    get:
      tags: [Customer]
      summary: Retrieve a single Customer
      description: Retrieves a single Customer for a specific uid.
      x-spring-cacheable: true
      operationId: getCustomer
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Customer.
      responses:
        '200':
          description: Successfully retrieved the Customer.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Customer'}
        '404': {description: Customer not found.}
        '500': {description: Internal server error.}
    put:
      tags: [Customer]
      summary: Update an existing Customer
      description: Updates an existing Customer.
      operationId: updateCustomer
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Customer.
      requestBody:
        description: Updated Customer details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/Customer'}
      responses:
        '200':
          description: Customer updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Customer'}
        '400': {description: Invalid input.}
        '404': {description: Customer not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [Customer]
      summary: Delete a Customer.
      description: Deletes a specific Customer.
      operationId: deleteCustomer
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Customer.
      responses:
        '204': {description: Customer deleted successfully.}
        '404': {description: Customer not found.}
        '500': {description: Internal server error.}
  /Opportunity:
    get:
      tags: [Opportunity]
      summary: Retrieve a list of Opportunitys
      description: Retrieves a list of Opportunitys.
      x-spring-cacheable: true
      operationId: getOpportunityList
      responses:
        '200':
          description: Successfully retrieved the list of Opportunitys.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/Opportunity'}
        '404': {description: No Opportunitys were found.}
        '500': {description: Internal server error.}
    post:
      tags: [Opportunity]
      summary: Create a new Opportunity
      description: Creates a new Opportunity.
      operationId: postOpportunity
      requestBody:
        description: Opportunity details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/Opportunity'}
      responses:
        '201':
          description: Opportunity created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Opportunity'}
        '400': {description: Invalid input.}
        '404': {description: Opportunity not found.}
        '500': {description: Internal server error.}
  /Opportunity/{id}:
    get:
      tags: [Opportunity]
      summary: Retrieve a single Opportunity
      description: Retrieves a single Opportunity for a specific uid.
      x-spring-cacheable: true
      operationId: getOpportunity
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Opportunity.
      responses:
        '200':
          description: Successfully retrieved the Opportunity.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Opportunity'}
        '404': {description: Opportunity not found.}
        '500': {description: Internal server error.}
    put:
      tags: [Opportunity]
      summary: Update an existing Opportunity
      description: Updates an existing Opportunity.
      operationId: updateOpportunity
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Opportunity.
      requestBody:
        description: Updated Opportunity details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/Opportunity'}
      responses:
        '200':
          description: Opportunity updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Opportunity'}
        '400': {description: Invalid input.}
        '404': {description: Opportunity not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [Opportunity]
      summary: Delete a Opportunity.
      description: Deletes a specific Opportunity.
      operationId: deleteOpportunity
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Opportunity.
      responses:
        '204': {description: Opportunity deleted successfully.}
        '404': {description: Opportunity not found.}
        '500': {description: Internal server error.}
  /SalesActivity:
    get:
      tags: [SalesActivity]
      summary: Retrieve a list of SalesActivitys
      description: Retrieves a list of SalesActivitys.
      x-spring-cacheable: true
      operationId: getSalesActivityList
      responses:
        '200':
          description: Successfully retrieved the list of SalesActivitys.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/SalesActivity'}
        '404': {description: No SalesActivitys were found.}
        '500': {description: Internal server error.}
    post:
      tags: [SalesActivity]
      summary: Create a new SalesActivity
      description: Creates a new SalesActivity.
      operationId: postSalesActivity
      requestBody:
        description: SalesActivity details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/SalesActivity'}
      responses:
        '201':
          description: SalesActivity created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/SalesActivity'}
        '400': {description: Invalid input.}
        '404': {description: SalesActivity not found.}
        '500': {description: Internal server error.}
  /SalesActivity/{id}:
    get:
      tags: [SalesActivity]
      summary: Retrieve a single SalesActivity
      description: Retrieves a single SalesActivity for a specific uid.
      x-spring-cacheable: true
      operationId: getSalesActivity
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the SalesActivity.
      responses:
        '200':
          description: Successfully retrieved the SalesActivity.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/SalesActivity'}
        '404': {description: SalesActivity not found.}
        '500': {description: Internal server error.}
    put:
      tags: [SalesActivity]
      summary: Update an existing SalesActivity
      description: Updates an existing SalesActivity.
      operationId: updateSalesActivity
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the SalesActivity.
      requestBody:
        description: Updated SalesActivity details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/SalesActivity'}
      responses:
        '200':
          description: SalesActivity updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/SalesActivity'}
        '400': {description: Invalid input.}
        '404': {description: SalesActivity not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [SalesActivity]
      summary: Delete a SalesActivity.
      description: Deletes a specific SalesActivity.
      operationId: deleteSalesActivity
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the SalesActivity.
      responses:
        '204': {description: SalesActivity deleted successfully.}
        '404': {description: SalesActivity not found.}
        '500': {description: Internal server error.}
  /SalesPipeline:
    get:
      tags: [SalesPipeline]
      summary: Retrieve a list of SalesPipelines
      description: Retrieves a list of SalesPipelines.
      x-spring-cacheable: true
      operationId: getSalesPipelineList
      responses:
        '200':
          description: Successfully retrieved the list of SalesPipelines.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/SalesPipeline'}
        '404': {description: No SalesPipelines were found.}
        '500': {description: Internal server error.}
    post:
      tags: [SalesPipeline]
      summary: Create a new SalesPipeline
      description: Creates a new SalesPipeline.
      operationId: postSalesPipeline
      requestBody:
        description: SalesPipeline details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/SalesPipeline'}
      responses:
        '201':
          description: SalesPipeline created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/SalesPipeline'}
        '400': {description: Invalid input.}
        '404': {description: SalesPipeline not found.}
        '500': {description: Internal server error.}
  /SalesPipeline/{id}:
    get:
      tags: [SalesPipeline]
      summary: Retrieve a single SalesPipeline
      description: Retrieves a single SalesPipeline for a specific uid.
      x-spring-cacheable: true
      operationId: getSalesPipeline
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the SalesPipeline.
      responses:
        '200':
          description: Successfully retrieved the SalesPipeline.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/SalesPipeline'}
        '404': {description: SalesPipeline not found.}
        '500': {description: Internal server error.}
    put:
      tags: [SalesPipeline]
      summary: Update an existing SalesPipeline
      description: Updates an existing SalesPipeline.
      operationId: updateSalesPipeline
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the SalesPipeline.
      requestBody:
        description: Updated SalesPipeline details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/SalesPipeline'}
      responses:
        '200':
          description: SalesPipeline updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/SalesPipeline'}
        '400': {description: Invalid input.}
        '404': {description: SalesPipeline not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [SalesPipeline]
      summary: Delete a SalesPipeline.
      description: Deletes a specific SalesPipeline.
      operationId: deleteSalesPipeline
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the SalesPipeline.
      responses:
        '204': {description: SalesPipeline deleted successfully.}
        '404': {description: SalesPipeline not found.}
        '500': {description: Internal server error.}
  /Invoice:
    get:
      tags: [Invoice]
      summary: Retrieve a list of Invoices
      description: Retrieves a list of Invoices.
      x-spring-cacheable: true
      operationId: getInvoiceList
      responses:
        '200':
          description: Successfully retrieved the list of Invoices.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/Invoice'}
        '404': {description: No Invoices were found.}
        '500': {description: Internal server error.}
    post:
      tags: [Invoice]
      summary: Create a new Invoice
      description: Creates a new Invoice.
      operationId: postInvoice
      requestBody:
        description: Invoice details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/Invoice'}
      responses:
        '201':
          description: Invoice created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Invoice'}
        '400': {description: Invalid input.}
        '404': {description: Invoice not found.}
        '500': {description: Internal server error.}
  /Invoice/{id}:
    get:
      tags: [Invoice]
      summary: Retrieve a single Invoice
      description: Retrieves a single Invoice for a specific uid.
      x-spring-cacheable: true
      operationId: getInvoice
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Invoice.
      responses:
        '200':
          description: Successfully retrieved the Invoice.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Invoice'}
        '404': {description: Invoice not found.}
        '500': {description: Internal server error.}
    put:
      tags: [Invoice]
      summary: Update an existing Invoice
      description: Updates an existing Invoice.
      operationId: updateInvoice
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Invoice.
      requestBody:
        description: Updated Invoice details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/Invoice'}
      responses:
        '200':
          description: Invoice updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Invoice'}
        '400': {description: Invalid input.}
        '404': {description: Invoice not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [Invoice]
      summary: Delete a Invoice.
      description: Deletes a specific Invoice.
      operationId: deleteInvoice
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Invoice.
      responses:
        '204': {description: Invoice deleted successfully.}
        '404': {description: Invoice not found.}
        '500': {description: Internal server error.}
  /Note:
    get:
      tags: [Note]
      summary: Retrieve a list of Notes
      description: Retrieves a list of Notes.
      x-spring-cacheable: true
      operationId: getNoteList
      responses:
        '200':
          description: Successfully retrieved the list of Notes.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/Note'}
        '404': {description: No Notes were found.}
        '500': {description: Internal server error.}
    post:
      tags: [Note]
      summary: Create a new Note
      description: Creates a new Note.
      operationId: postNote
      requestBody:
        description: Note details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/Note'}
      responses:
        '201':
          description: Note created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Note'}
        '400': {description: Invalid input.}
        '404': {description: Note not found.}
        '500': {description: Internal server error.}
  /Note/{id}:
    get:
      tags: [Note]
      summary: Retrieve a single Note
      description: Retrieves a single Note for a specific uid.
      x-spring-cacheable: true
      operationId: getNote
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Note.
      responses:
        '200':
          description: Successfully retrieved the Note.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Note'}
        '404': {description: Note not found.}
        '500': {description: Internal server error.}
    put:
      tags: [Note]
      summary: Update an existing Note
      description: Updates an existing Note.
      operationId: updateNote
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Note.
      requestBody:
        description: Updated Note details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/Note'}
      responses:
        '200':
          description: Note updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Note'}
        '400': {description: Invalid input.}
        '404': {description: Note not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [Note]
      summary: Delete a Note.
      description: Deletes a specific Note.
      operationId: deleteNote
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Note.
      responses:
        '204': {description: Note deleted successfully.}
        '404': {description: Note not found.}
        '500': {description: Internal server error.}
  /Product:
    get:
      tags: [Product]
      summary: Retrieve a list of Products
      description: Retrieves a list of Products.
      x-spring-cacheable: true
      operationId: getProductList
      responses:
        '200':
          description: Successfully retrieved the list of Products.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/Product'}
        '404': {description: No Products were found.}
        '500': {description: Internal server error.}
    post:
      tags: [Product]
      summary: Create a new Product
      description: Creates a new Product.
      operationId: postProduct
      requestBody:
        description: Product details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/Product'}
      responses:
        '201':
          description: Product created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Product'}
        '400': {description: Invalid input.}
        '404': {description: Product not found.}
        '500': {description: Internal server error.}
  /Product/{id}:
    get:
      tags: [Product]
      summary: Retrieve a single Product
      description: Retrieves a single Product for a specific uid.
      x-spring-cacheable: true
      operationId: getProduct
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Product.
      responses:
        '200':
          description: Successfully retrieved the Product.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Product'}
        '404': {description: Product not found.}
        '500': {description: Internal server error.}
    put:
      tags: [Product]
      summary: Update an existing Product
      description: Updates an existing Product.
      operationId: updateProduct
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Product.
      requestBody:
        description: Updated Product details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/Product'}
      responses:
        '200':
          description: Product updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Product'}
        '400': {description: Invalid input.}
        '404': {description: Product not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [Product]
      summary: Delete a Product.
      description: Deletes a specific Product.
      operationId: deleteProduct
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Product.
      responses:
        '204': {description: Product deleted successfully.}
        '404': {description: Product not found.}
        '500': {description: Internal server error.}
  /Campaign:
    get:
      tags: [Campaign]
      summary: Retrieve a list of Campaigns
      description: Retrieves a list of Campaigns.
      x-spring-cacheable: true
      operationId: getCampaignList
      responses:
        '200':
          description: Successfully retrieved the list of Campaigns.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/Campaign'}
        '404': {description: No Campaigns were found.}
        '500': {description: Internal server error.}
    post:
      tags: [Campaign]
      summary: Create a new Campaign
      description: Creates a new Campaign.
      operationId: postCampaign
      requestBody:
        description: Campaign details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/Campaign'}
      responses:
        '201':
          description: Campaign created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Campaign'}
        '400': {description: Invalid input.}
        '404': {description: Campaign not found.}
        '500': {description: Internal server error.}
  /Campaign/{id}:
    get:
      tags: [Campaign]
      summary: Retrieve a single Campaign
      description: Retrieves a single Campaign for a specific uid.
      x-spring-cacheable: true
      operationId: getCampaign
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Campaign.
      responses:
        '200':
          description: Successfully retrieved the Campaign.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Campaign'}
        '404': {description: Campaign not found.}
        '500': {description: Internal server error.}
    put:
      tags: [Campaign]
      summary: Update an existing Campaign
      description: Updates an existing Campaign.
      operationId: updateCampaign
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Campaign.
      requestBody:
        description: Updated Campaign details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/Campaign'}
      responses:
        '200':
          description: Campaign updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Campaign'}
        '400': {description: Invalid input.}
        '404': {description: Campaign not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [Campaign]
      summary: Delete a Campaign.
      description: Deletes a specific Campaign.
      operationId: deleteCampaign
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Campaign.
      responses:
        '204': {description: Campaign deleted successfully.}
        '404': {description: Campaign not found.}
        '500': {description: Internal server error.}
  /SalesOrder:
    get:
      tags: [SalesOrder]
      summary: Retrieve a list of SalesOrders
      description: Retrieves a list of SalesOrders.
      x-spring-cacheable: true
      operationId: getSalesOrderList
      responses:
        '200':
          description: Successfully retrieved the list of SalesOrders.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/SalesOrder'}
        '404': {description: No SalesOrders were found.}
        '500': {description: Internal server error.}
    post:
      tags: [SalesOrder]
      summary: Create a new SalesOrder
      description: Creates a new SalesOrder.
      operationId: postSalesOrder
      requestBody:
        description: SalesOrder details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/SalesOrder'}
      responses:
        '201':
          description: SalesOrder created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/SalesOrder'}
        '400': {description: Invalid input.}
        '404': {description: SalesOrder not found.}
        '500': {description: Internal server error.}
  /SalesOrder/{id}:
    get:
      tags: [SalesOrder]
      summary: Retrieve a single SalesOrder
      description: Retrieves a single SalesOrder for a specific uid.
      x-spring-cacheable: true
      operationId: getSalesOrder
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the SalesOrder.
      responses:
        '200':
          description: Successfully retrieved the SalesOrder.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/SalesOrder'}
        '404': {description: SalesOrder not found.}
        '500': {description: Internal server error.}
    put:
      tags: [SalesOrder]
      summary: Update an existing SalesOrder
      description: Updates an existing SalesOrder.
      operationId: updateSalesOrder
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the SalesOrder.
      requestBody:
        description: Updated SalesOrder details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/SalesOrder'}
      responses:
        '200':
          description: SalesOrder updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/SalesOrder'}
        '400': {description: Invalid input.}
        '404': {description: SalesOrder not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [SalesOrder]
      summary: Delete a SalesOrder.
      description: Deletes a specific SalesOrder.
      operationId: deleteSalesOrder
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the SalesOrder.
      responses:
        '204': {description: SalesOrder deleted successfully.}
        '404': {description: SalesOrder not found.}
        '500': {description: Internal server error.}
components:
  parameters:
    id:
      name: id
      in: path
      required: true
      description: The unique identifier of the object to retrieve.
      schema: {type: string, format: uuid}
  schemas:
    BackupConfig:
      type: object
      description: System backup configuration for backup jobs workstation and server
      properties:
        name: {type: string}
        description: {type: string, description: source code only backup of test workspace}
        remoteConfigUrl: {type: string, format: url, description: basically a callback
            url}
        runNumber: {type: integer, description: the number of times this has been
            run before}
        percentComplete: {type: integer, description: 0-100 percentage of compleion
            of this backup if known}
        type:
          description: the type of backup ie Workstation or Server
          type: string
          enum: [workstation, server, desktop, laptop, device]
        priorityLevel:
          type: string
          enum: [low, medium, high, critical]
        backupDir: {type: string, example: /users/jax/project-one, description: path
            to the folder that will be backed up}
        workingDir: {type: string, example: /users/jax/project-one, description: path
            to the folder that will be backed up}
        skiplist: {type: string, description: a json string describing the items to
            skip in the backup set, example: 'node_modules, etc.'}
        id:
          example: 50eba1e5-118a-4125-b4b5-6d0e042437e2
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
        ownerId: {example: 931dbdb8-78a4-400d-9e4d-2eb7d50f1f3e, description: UUID
            of owner of the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_BY, enabled = true)', format: uuid}
        createdDate: {example: '2024-12-30T15:09:38.584-0800', description: Date of
            object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {example: e2a0a8ef-4980-463b-a0f7-e18b3085c407, description: Last
            user to access object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_BY, enabled = true)', format: uuid}
        lastAccessedDate: {example: '2024-12-30T15:09:38.584-0800', description: Timestamp
            of last access of object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_DATE, enabled = true)', format: date-time}
        lastModifiedById: {example: 8ea70cb9-801f-404b-93de-2de6e3327112, description: Unique
            identifier for user who last modifed the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_BY,
            enabled = true)', format: uuid}
        lastModifiedDate: {example: '2024-12-30T15:09:38.584-0800', description: Date
            of last object modification, type: string, x-field-extra-annotation: '    @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_DATE, enabled = true)', format: date-time}
    StrategicPriority:
      type: object
      description: Organization-Wide Strategic Priorities
      properties:
        name: {type: string}
        description: {type: string, description: high-level description of the strategic
            priority}
        priorityLevel:
          type: string
          enum: [low, medium, high, critical]
        imageUrl: {type: string, description: URL for the strategic priority, format: url,
          example: 'https://strategic-images.irl/image.png'}
        startDate: {type: string, format: date}
        targetDate: {type: string, format: date}
        goals:
          type: array
          items: {$ref: '#/components/schemas/Goal'}
        status:
          type: string
          enum: [Not-Started, In-Progress, Complete]
        id:
          example: 0510002f-3b79-456e-abe3-956f0799c7bf
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
        ownerId: {example: d6d44f9e-5d78-4271-abf5-f8a78b828cc4, description: UUID
            of owner of the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_BY, enabled = true)', format: uuid}
        createdDate: {example: '2024-12-30T15:09:38.584-0800', description: Date of
            object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {example: 6e56a728-41a3-4b54-8031-6fe443d70c8f, description: Last
            user to access object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_BY, enabled = true)', format: uuid}
        lastAccessedDate: {example: '2024-12-30T15:09:38.584-0800', description: Timestamp
            of last access of object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_DATE, enabled = true)', format: date-time}
        lastModifiedById: {example: d8fd988a-2b25-4a59-830b-39806182f912, description: Unique
            identifier for user who last modifed the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_BY,
            enabled = true)', format: uuid}
        lastModifiedDate: {example: '2024-12-30T15:09:38.584-0800', description: Date
            of last object modification, type: string, x-field-extra-annotation: '    @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_DATE, enabled = true)', format: date-time}
    KeyMetric:
      type: object
      description: A Key Metric for Tracking Strategy Results
      properties:
        goalId: {type: string, format: uuid}
        metricName: {type: string}
        metricValue: {type: float, description: actual value of the metric}
        targetValue: {type: float, description: expected value of the metric}
        id:
          example: 6de796fd-cfbf-40a7-a42e-230db9033232
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
        ownerId: {example: dbbef5f3-2b66-424b-908e-5fd889ca7e16, description: UUID
            of owner of the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_BY, enabled = true)', format: uuid}
        createdDate: {example: '2024-12-30T15:09:38.584-0800', description: Date of
            object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {example: a2550ded-3436-48a1-b94e-c2b622c95f3a, description: Last
            user to access object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_BY, enabled = true)', format: uuid}
        lastAccessedDate: {example: '2024-12-30T15:09:38.584-0800', description: Timestamp
            of last access of object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_DATE, enabled = true)', format: date-time}
        lastModifiedById: {example: 2d4e0417-78f1-406d-83f9-f9fe79cbb949, description: Unique
            identifier for user who last modifed the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_BY,
            enabled = true)', format: uuid}
        lastModifiedDate: {example: '2024-12-30T15:09:38.585-0800', description: Date
            of last object modification, type: string, x-field-extra-annotation: '    @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_DATE, enabled = true)', format: date-time}
    Goal:
      type: object
      description: A Strategic Goal
      properties:
        strategicPriorityId: {type: string, format: uuid, description: The strategic
            priority that this goal supports.}
        name: {type: string, description: the name of the goal}
        description: {type: string, description: the description of the goal}
        keyMetrics:
          type: array
          items: {$ref: '#/components/schemas/KeyMetric'}
          description: measurements used to track success
        goalDependencies:
          type: array
          items: {$ref: '#/components/schemas/GoalDependency'}
        expectedOutcome: {type: string, description: the positive expected outcome
            of the goal, example: faster code execution}
        risks: {type: string, description: description of the risk if the goal is
            not successful, example: lower stock price}
        timeline: {type: string}
        id:
          example: 972e699e-c0cc-4874-b27a-0891ec42c82a
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
        ownerId: {example: 1bdc3c44-a98a-4374-a618-07c9f7577b4b, description: UUID
            of owner of the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_BY, enabled = true)', format: uuid}
        createdDate: {example: '2024-12-30T15:09:38.585-0800', description: Date of
            object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {example: 12184270-8187-4137-894e-df04b4ee6256, description: Last
            user to access object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_BY, enabled = true)', format: uuid}
        lastAccessedDate: {example: '2024-12-30T15:09:38.585-0800', description: Timestamp
            of last access of object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_DATE, enabled = true)', format: date-time}
        lastModifiedById: {example: 576744c4-afb6-4956-ade9-9fb0a0898c57, description: Unique
            identifier for user who last modifed the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_BY,
            enabled = true)', format: uuid}
        lastModifiedDate: {example: '2024-12-30T15:09:38.585-0800', description: Date
            of last object modification, type: string, x-field-extra-annotation: '    @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_DATE, enabled = true)', format: date-time}
    GoalDependency:
      type: object
      description: A dependency that a goal depends upon
      properties:
        goalId: {type: string, format: uuid}
        dependencyOrder: {type: integer, description: the order in which this dependency
            exists}
        dependencyName: {type: string, description: the name of the dependency}
        id:
          example: dc825487-2497-4f81-b48b-0bd1fd09d9bb
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
        ownerId: {example: e78b06e4-1c72-44d4-bf75-88b9f01f0bbd, description: UUID
            of owner of the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_BY, enabled = true)', format: uuid}
        createdDate: {example: '2024-12-30T15:09:38.585-0800', description: Date of
            object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {example: 62387c2f-69e4-4793-86a0-3d11a021cabc, description: Last
            user to access object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_BY, enabled = true)', format: uuid}
        lastAccessedDate: {example: '2024-12-30T15:09:38.585-0800', description: Timestamp
            of last access of object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_DATE, enabled = true)', format: date-time}
        lastModifiedById: {example: 976e025c-f9ec-419a-9ce1-d26e83bbdb46, description: Unique
            identifier for user who last modifed the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_BY,
            enabled = true)', format: uuid}
        lastModifiedDate: {example: '2024-12-30T15:09:38.585-0800', description: Date
            of last object modification, type: string, x-field-extra-annotation: '    @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_DATE, enabled = true)', format: date-time}
    Game:
      type: object
      description: A DEMO GAME
      properties:
        name: {type: string, description: the name of the game}
        weapons:
          type: map
          items: {$ref: '#/components/schemas/GameWeaponIDX'}
        id:
          example: c55f1d27-3558-43a1-8d10-986eca154661
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
        ownerId: {example: aa2fe6fb-9b21-4bc9-bc75-612fc295241d, description: UUID
            of owner of the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_BY, enabled = true)', format: uuid}
        createdDate: {example: '2024-12-30T15:09:38.585-0800', description: Date of
            object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {example: e0985a88-5d3f-45fd-a72f-f6ff31743ada, description: Last
            user to access object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_BY, enabled = true)', format: uuid}
        lastAccessedDate: {example: '2024-12-30T15:09:38.585-0800', description: Timestamp
            of last access of object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_DATE, enabled = true)', format: date-time}
        lastModifiedById: {example: de259967-9241-4f7d-9865-19974b1a1e33, description: Unique
            identifier for user who last modifed the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_BY,
            enabled = true)', format: uuid}
        lastModifiedDate: {example: '2024-12-30T15:09:38.585-0800', description: Date
            of last object modification, type: string, x-field-extra-annotation: '    @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_DATE, enabled = true)', format: date-time}
    GameWeaponIDX:
      type: object
      description: IDX object that links weapons to games
      properties:
        gameId: {type: string, format: uuid}
        weaponId: {type: string, format: uuid}
        id:
          example: 03cae184-4b1c-4af6-93f7-c366557bd183
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
        ownerId: {example: da670653-3933-4dca-bf95-030e5603b63f, description: UUID
            of owner of the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_BY, enabled = true)', format: uuid}
        createdDate: {example: '2024-12-30T15:09:38.586-0800', description: Date of
            object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {example: 8cc71363-feac-44ca-a4e8-d28ece589342, description: Last
            user to access object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_BY, enabled = true)', format: uuid}
        lastAccessedDate: {example: '2024-12-30T15:09:38.586-0800', description: Timestamp
            of last access of object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_DATE, enabled = true)', format: date-time}
        lastModifiedById: {example: 46d05ef9-9c0d-494b-b6ce-46db66c8034d, description: Unique
            identifier for user who last modifed the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_BY,
            enabled = true)', format: uuid}
        lastModifiedDate: {example: '2024-12-30T15:09:38.586-0800', description: Date
            of last object modification, type: string, x-field-extra-annotation: '    @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_DATE, enabled = true)', format: date-time}
    Weapon:
      type: object
      description: DEMO weapon that can be used for the game
      properties:
        name: {type: string, description: the name of the weapon}
        game: {$ref: '#/components/schemas/GameWeaponIDX'}
        harmLevel: {type: integer, description: the the damage output level the weapon
            can have, minimum: 0, maximum: 100}
        weight: {type: integer, description: how much one of these weapons weighs
            in lbs}
        color:
          type: string
          enum: [BLACK, CAMO-AIRFORCE, CAMO-MARINE, CAMO-NAVY, CAMO-ARMY, GRAY, OLIVE,
            SILVER, GOLD, EXOTIC]
        weaponType:
          type: string
          enum: [BALLISTiC, PROJECTILE, FIRE, KINETIC, NUCLEAR, MUNITIONS, MELEE,
            AIRCRAFT, VESSELS, BOWS, SLINGS]
          description: the type of the weapon
        id:
          example: bfd6578e-a050-4fbf-af70-6d6f0750e49c
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
        ownerId: {example: 019f59cf-09f8-4338-bb9e-b8f7b60f2094, description: UUID
            of owner of the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_BY, enabled = true)', format: uuid}
        createdDate: {example: '2024-12-30T15:09:38.586-0800', description: Date of
            object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {example: 28d2fea5-080e-4a06-a055-59c438c2dd93, description: Last
            user to access object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_BY, enabled = true)', format: uuid}
        lastAccessedDate: {example: '2024-12-30T15:09:38.586-0800', description: Timestamp
            of last access of object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_DATE, enabled = true)', format: date-time}
        lastModifiedById: {example: 5d3b3f49-9beb-4653-a922-a77f71c10d9d, description: Unique
            identifier for user who last modifed the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_BY,
            enabled = true)', format: uuid}
        lastModifiedDate: {example: '2024-12-30T15:09:38.586-0800', description: Date
            of last object modification, type: string, x-field-extra-annotation: '    @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_DATE, enabled = true)', format: date-time}
    SecureKey:
      type: object
      description: SecureKey is the KMS for the SecureField keys
      x-valkyrai-service: microservice
      properties:
        notes: {description: any notes about the key, type: string, maxLength: 1000,
          example: This key was generated by the system, x-field-extra-annotation: '@Column(length
            = 1000)'}
        algorithm: {description: the algorithm used for encryption/decryption, type: string}
        version: {description: the version of this key, type: string}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        cipherWorkCost: {description: the exponential strength of the BCrypt hashing
            used by the Hashing cipher, example: 12, type: integer, minimum: 10, maximum: 35}
        keyValue: {description: the key itself, type: string, minLength: 10}
        status:
          type: string
          enum: [ACTIVE, DEFAULT, ARCHIVED, REVOKED, INVALID]
          x-enum-descriptions: [Key is actively used, Key is the default to use when
              no specif key is provided, Key is not being used but still valid, Key
              is revoked and MUST NOT be used, Key is invalid and will not work]
          x-enum-varnames: [keyActive, keyDefault, keyArchived, keyRevoked, keyInvalid]
        id:
          example: 2169902c-8212-4c70-8e63-5c6500ad3f43
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
        ownerId: {example: 4d11d5da-84ca-4d06-b2f9-851c45316d84, description: UUID
            of owner of the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_BY, enabled = true)', format: uuid}
        createdDate: {example: '2024-12-30T15:09:38.586-0800', description: Date of
            object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time}
        lastAccessedById: {example: bdea1a34-0e41-488c-b08e-64a434b27f52, description: Last
            user to access object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_BY, enabled = true)', format: uuid}
        lastAccessedDate: {example: '2024-12-30T15:09:38.586-0800', description: Timestamp
            of last access of object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_DATE, enabled = true)', format: date-time}
        lastModifiedById: {example: 113b222e-969d-4d84-8cce-52d93047badb, description: Unique
            identifier for user who last modifed the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_BY,
            enabled = true)', format: uuid}
        lastModifiedDate: {example: '2024-12-30T15:09:38.586-0800', description: Date
            of last object modification, type: string, x-field-extra-annotation: '    @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_DATE, enabled = true)', format: date-time}
      required: [algorithm, version, keyValue, status]
    Build:
      type: object
      description: Represents a ThorAPI build including success or failure
      properties:
        name: {type: string}
        applicationId: {type: string, format: uuid}
        status:
          type: string
          enum: [PENDING, RUNNING, SUCCESS, FAILURE]
        projectPath: {type: string}
        testEnumCodegen:
          type: integer
          format: int32
          enum: [0, 10, 1000]
          x-enum-descriptions: [zero balance, money for lunch, get on that plane]
          x-enum-varnames: [broke, poor, rich]
        mavenHome: {type: string}
        outputs:
          type: array
          items: {$ref: '#/components/schemas/BuildOutput'}
        dependencies:
          type: array
          items: {$ref: '#/components/schemas/Depend'}
        id:
          example: 9d4f9d2f-85d5-4c69-bf8e-aeb077327e2e
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
        ownerId: {example: 2cfc86f1-0014-4f70-a33d-3d747ae4e395, description: UUID
            of owner of the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_BY, enabled = true)', format: uuid}
        createdDate: {example: '2024-12-30T15:09:38.586-0800', description: Date of
            object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {example: 9be8d937-f623-4913-a29d-57ef9854d4c7, description: Last
            user to access object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_BY, enabled = true)', format: uuid}
        lastAccessedDate: {example: '2024-12-30T15:09:38.586-0800', description: Timestamp
            of last access of object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_DATE, enabled = true)', format: date-time}
        lastModifiedById: {example: f1bea41b-ca93-418e-9f26-81b1e037f3fa, description: Unique
            identifier for user who last modifed the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_BY,
            enabled = true)', format: uuid}
        lastModifiedDate: {example: '2024-12-30T15:09:38.586-0800', description: Date
            of last object modification, type: string, x-field-extra-annotation: '    @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_DATE, enabled = true)', format: date-time}
      required: [name, status, projectPath, mavenHome]
    BuildOutput:
      type: object
      description: TODO BuildOutput CLASS DESCRIPTION
      properties:
        applicationId: {type: string, format: uuid}
        buildId: {type: string, format: uuid}
        lastSuccessfulRun: {type: string, format: date-time}
        success: {type: boolean}
        output: {type: string}
        solutions:
          type: array
          items: {$ref: '#/components/schemas/Solution'}
        id:
          example: e796af04-7ba9-419d-a720-1e999ab1d8ca
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
        ownerId: {example: 733990e5-ab8c-48da-963b-c8faa46f5193, description: UUID
            of owner of the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_BY, enabled = true)', format: uuid}
        createdDate: {example: '2024-12-30T15:09:38.586-0800', description: Date of
            object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {example: 09461b22-fc5a-43af-bb2c-0c1bf27df7be, description: Last
            user to access object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_BY, enabled = true)', format: uuid}
        lastAccessedDate: {example: '2024-12-30T15:09:38.587-0800', description: Timestamp
            of last access of object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_DATE, enabled = true)', format: date-time}
        lastModifiedById: {example: 547ccb5f-3e0f-40f5-bd3e-9cc3d6cc2895, description: Unique
            identifier for user who last modifed the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_BY,
            enabled = true)', format: uuid}
        lastModifiedDate: {example: '2024-12-30T15:09:38.587-0800', description: Date
            of last object modification, type: string, x-field-extra-annotation: '    @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_DATE, enabled = true)', format: date-time}
      required: [buildId, timestamp, success, output]
    Solution:
      type: object
      description: TODO Solution CLASS DESCRIPTION
      properties:
        buildOutputId: {type: string, format: uuid}
        description: {type: string}
        appliedFix: {type: boolean}
        id:
          example: 07b9c898-22fe-480f-bb39-4d215a36c606
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
        ownerId: {example: 0e08f547-f849-4397-9da6-d760b2f65a90, description: UUID
            of owner of the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_BY, enabled = true)', format: uuid}
        createdDate: {example: '2024-12-30T15:09:38.587-0800', description: Date of
            object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {example: 1dfee0a7-0810-4525-a0a2-36f279b67f1b, description: Last
            user to access object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_BY, enabled = true)', format: uuid}
        lastAccessedDate: {example: '2024-12-30T15:09:38.587-0800', description: Timestamp
            of last access of object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_DATE, enabled = true)', format: date-time}
        lastModifiedById: {example: 05905b23-582e-41a7-8009-6c2659ca2819, description: Unique
            identifier for user who last modifed the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_BY,
            enabled = true)', format: uuid}
        lastModifiedDate: {example: '2024-12-30T15:09:38.587-0800', description: Date
            of last object modification, type: string, x-field-extra-annotation: '    @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_DATE, enabled = true)', format: date-time}
      required: [buildOutputId, description, appliedFix]
    Depend:
      type: object
      description: TODO Depend CLASS DESCRIPTION
      properties:
        groupId: {type: string}
        artifactId: {type: string}
        version: {type: string}
        scope: {type: string}
        status:
          type: string
          enum: [UP_TO_DATE, OUTDATED, MISSING]
        buildId: {type: string, format: uuid}
        id:
          example: 5f36890e-111e-4a81-97b8-7025a5ef37c7
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
        ownerId: {example: 7407b3d9-d7d7-4992-88a8-a01d3a64df3c, description: UUID
            of owner of the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_BY, enabled = true)', format: uuid}
        createdDate: {example: '2024-12-30T15:09:38.587-0800', description: Date of
            object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {example: 99837351-2050-4385-b628-6e3abc961018, description: Last
            user to access object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_BY, enabled = true)', format: uuid}
        lastAccessedDate: {example: '2024-12-30T15:09:38.587-0800', description: Timestamp
            of last access of object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_DATE, enabled = true)', format: date-time}
        lastModifiedById: {example: 200037d8-c6ed-4eb1-b41f-15f8e0ec8305, description: Unique
            identifier for user who last modifed the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_BY,
            enabled = true)', format: uuid}
        lastModifiedDate: {example: '2024-12-30T15:09:38.587-0800', description: Date
            of last object modification, type: string, x-field-extra-annotation: '    @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_DATE, enabled = true)', format: date-time}
      required: [groupId, artifactId, version]
    LlmDetails:
      type: object
      description: TODO LlmDetails CLASS DESCRIPTION
      properties:
        name: {type: string, description: The name of the LLM}
        version: {type: string, description: The vendor-specific version of the LLM,
          example: v3.0.3-B8}
        notes: {type: string, description: Notes on the LLM implementation}
        role:
          type: string
          enum: [user, assistant]
          description: the user role to set for the target LLM
        provider:
          type: string
          enum: [valkyrai, openai, llama, phi, gemma, mistral, claude, gemini, other]
        apiType:
          type: string
          enum: [openai, ollama, other]
        initialPrompt: {maxLength: 5000, minLength: 64, type: string, description: the
            initial prompt to instruct the LLM how to behave, example: You are a helpful
            assistant, x-field-extra-annotation: '@Column(length = 5000)'}
        apiKey:
          maxLength: 1024
          minLength: 16
          type: string
          description: the api-key to access the llm
          format: password
          example: D6ObBZ599Z3xkuohG3/cogxZYwhxdVyLlIAPanlO35I=
          x-thorapi-secureField: true
          x-field-extra-annotation: |-
            @SecureField(encryptionType = SecureField.EncryptionType.SYMMETRIC, strength = 5)
            @Column(length = 3072)
        credential: {type: string, description: the user name to access the LLM, x-thorapi-secureField: true,
          x-field-extra-annotation: '@SecureField(encryptionType = SecureField.EncryptionType.SYMMETRIC,
            strength = 5)'}
        credentialPassword:
          maxLength: 35
          minLength: 8
          type: string
          description: the password to access the LLM
          format: password
          example: c@nnotBeH@ckd!
          x-field-extra-annotation: |-
            @Column(length = 35)
            @SecureField(encryptionType = SecureField.EncryptionType.HASHED, strength = 10)
        url: {type: string, format: url, description: the URL to connect to the LLM
            api}
        requestParameters: {type: string, description: request parameters to send
            to the service}
        meta: {type: string, description: metadata in any text format to be used in
            client code}
        id:
          example: b14e7966-a564-4a30-87ed-85ffe28f2bc1
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
        ownerId: {example: bb68b493-48ce-4d97-8fe6-63a2eced106c, description: UUID
            of owner of the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_BY, enabled = true)', format: uuid}
        createdDate: {example: '2024-12-30T15:09:38.587-0800', description: Date of
            object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {example: e13e6f2b-c3e0-4ab0-893a-75de1f1e9ab2, description: Last
            user to access object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_BY, enabled = true)', format: uuid}
        lastAccessedDate: {example: '2024-12-30T15:09:38.587-0800', description: Timestamp
            of last access of object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_DATE, enabled = true)', format: date-time}
        lastModifiedById: {example: a835d889-cfc5-41a1-a5fc-286038babfe3, description: Unique
            identifier for user who last modifed the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_BY,
            enabled = true)', format: uuid}
        lastModifiedDate: {example: '2024-12-30T15:09:38.587-0800', description: Date
            of last object modification, type: string, x-field-extra-annotation: '    @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_DATE, enabled = true)', format: date-time}
      xml: {name: LLMDetails}
    Workflow:
      type: object
      description: ValkyrAI Workflow object manages execution and state of automation
        workflows
      properties:
        name: {type: string, description: short description of this workflow, example: Customer
            Email Workflow}
        description: {type: string, description: detailed description of this workflow,
          example: this workflow is designed to keep customers in the loop}
        role:
          type: string
          enum: [user, assistant, system]
          description: the role with permissions to execute the workfow as
        schedule: {type: string, example: '*/20 * * * * ?', description: cron string
            to determine when this runs}
        meta: {type: string, description: metadata in any text format to be used in
            client code}
        tasks:
          description: an array of Tasks to be performed
          type: array
          items: {$ref: '#/components/schemas/Task'}
        state:
          description: an array stateful objects to be used in the workflow
          type: array
          items: {$ref: '#/components/schemas/WorkflowState'}
        status:
          description: last known status of the workflow
          type: string
          enum: [running, stopped, ready, warning, error, disabled]
        id:
          example: 52d7ec80-4ee7-4054-b554-009022371f92
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
        ownerId: {example: 2fb571f1-6c61-4472-8fe6-e57a96a72b21, description: UUID
            of owner of the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_BY, enabled = true)', format: uuid}
        createdDate: {example: '2024-12-30T15:09:38.587-0800', description: Date of
            object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {example: 18226a26-7c0b-468a-864b-85c440db704d, description: Last
            user to access object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_BY, enabled = true)', format: uuid}
        lastAccessedDate: {example: '2024-12-30T15:09:38.588-0800', description: Timestamp
            of last access of object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_DATE, enabled = true)', format: date-time}
        lastModifiedById: {example: 27e15c64-a731-403b-af9a-33e4988b719f, description: Unique
            identifier for user who last modifed the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_BY,
            enabled = true)', format: uuid}
        lastModifiedDate: {example: '2024-12-30T15:09:38.588-0800', description: Date
            of last object modification, type: string, x-field-extra-annotation: '    @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_DATE, enabled = true)', format: date-time}
      xml: {name: Workflow}
    WorkflowState:
      type: object
      description: ValkyrAI Workflow State object holds the state container for a
        workflow
      properties:
        workflowId: {type: string, format: uuid, description: The workflow this state
            is participating in}
        name: {description: name of the property that holds the value, type: string}
        value:
          description: value of the property
          type: array
          items: {type: DataObject}
        id:
          example: 067b26d8-7452-46ec-b98c-d0a115bb6918
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
        ownerId: {example: 6f6c6172-ca49-444c-b535-1b7d870b3cd7, description: UUID
            of owner of the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_BY, enabled = true)', format: uuid}
        createdDate: {example: '2024-12-30T15:09:38.588-0800', description: Date of
            object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {example: 4e7f0636-e411-4f26-87c6-756f1628648a, description: Last
            user to access object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_BY, enabled = true)', format: uuid}
        lastAccessedDate: {example: '2024-12-30T15:09:38.588-0800', description: Timestamp
            of last access of object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_DATE, enabled = true)', format: date-time}
        lastModifiedById: {example: b399e6ee-d236-406f-a312-b04f429c051a, description: Unique
            identifier for user who last modifed the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_BY,
            enabled = true)', format: uuid}
        lastModifiedDate: {example: '2024-12-30T15:09:38.588-0800', description: Date
            of last object modification, type: string, x-field-extra-annotation: '    @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_DATE, enabled = true)', format: date-time}
    Task:
      type: object
      description: ValkyrAI Task object manages execution and state of automation
        workflows
      properties:
        description: {type: string}
        workflowId: {type: string, format: uuid, description: The workflow this state
            is participating in}
        role:
          type: string
          enum: [user, assistant]
          description: override the workflow role for specific task -login to a system-
            the role with permissions -temporary user is created
        modules:
          description: an array of ExecModules to be processed
          type: array
          items: {$ref: '#/components/schemas/ExecModule'}
        status:
          description: last known status of the task
          type: string
          enum: [running, stopped, ready, good, warning, error, disabled]
        id:
          example: bfa51d5c-8cb1-4d16-9ecf-c698fa5b00e4
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
        ownerId: {example: 9e948e5c-7a5c-49c9-8947-04f423e2be8c, description: UUID
            of owner of the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_BY, enabled = true)', format: uuid}
        createdDate: {example: '2024-12-30T15:09:38.588-0800', description: Date of
            object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {example: 3776bfe1-a027-4d23-a169-2527516901a5, description: Last
            user to access object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_BY, enabled = true)', format: uuid}
        lastAccessedDate: {example: '2024-12-30T15:09:38.588-0800', description: Timestamp
            of last access of object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_DATE, enabled = true)', format: date-time}
        lastModifiedById: {example: cc85cf99-16dd-4029-b6a0-e2728810d857, description: Unique
            identifier for user who last modifed the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_BY,
            enabled = true)', format: uuid}
        lastModifiedDate: {example: '2024-12-30T15:09:38.588-0800', description: Date
            of last object modification, type: string, x-field-extra-annotation: '    @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_DATE, enabled = true)', format: date-time}
      xml: {name: Task}
    ExecModule:
      type: object
      description: ExecModule is the execution unit of the ValkyrAI Workflow Engine
      properties:
        systemId: {type: string, format: uuid, description: UUID of the system object
            being mutated/read (if any)}
        taskId: {type: string, format: uuid, description: The task this module is
            executing in}
        role:
          description: the RBAC role to use in mutating/reading any system object
          type: string
          enum: [anonymous, user, admin]
        name: {description: the name of the module, example: 'EmailSendModule, OpenApiSpecImportModule',
          type: string}
        notes: {description: notes about the module, type: string}
        integrationAccount: {$ref: '#/components/schemas/IntegrationAccount'}
        className: {description: the name of the implementation class for this module,
          example: 'EmailModule, PipelineModule, RestApiModule', type: string, x-thorapi-dataField: pick~getAvailableVmodules,
          x-field-extra-annotation: '@DataField(unique = false, hidden = false, advanced
            = false, relationshipTable="pick~getAvailableVmodules")'}
        moduleType:
          description: the type of module
          type: string
          enum: [broadcast, io, reader, writer, transformer]
        moduleData: {type: string, maxLength: 3000, description: json for configuring
            the module, x-field-extra-annotation: '@Column(length = 3000)'}
        status:
          description: last known status of the module
          type: string
          enum: [running, stopped, ready, good, warning, error, disabled]
        specs:
          description: an array of OpenAPI specs to be referenced by the Tasks/Modules
          type: array
          items: {$ref: '#/components/schemas/OasOpenAPISpec'}
        id:
          example: 3de64333-1ceb-456e-a0c4-2502a0a0c948
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
        ownerId: {example: 487d3855-3a84-439b-899e-3273554c5772, description: UUID
            of owner of the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_BY, enabled = true)', format: uuid}
        createdDate: {example: '2024-12-30T15:09:38.588-0800', description: Date of
            object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {example: d60042cf-3c6d-493f-b8eb-244ac27368e4, description: Last
            user to access object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_BY, enabled = true)', format: uuid}
        lastAccessedDate: {example: '2024-12-30T15:09:38.588-0800', description: Timestamp
            of last access of object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_DATE, enabled = true)', format: date-time}
        lastModifiedById: {example: b196e585-881a-45d5-a151-5fcde3ed8190, description: Unique
            identifier for user who last modifed the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_BY,
            enabled = true)', format: uuid}
        lastModifiedDate: {example: '2024-12-30T15:09:38.588-0800', description: Date
            of last object modification, type: string, x-field-extra-annotation: '    @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_DATE, enabled = true)', format: date-time}
      xml: {name: ExecModule}
    EventLog:
      type: object
      description: Logs specific Workflow Related Events
      properties:
        eventDetails: {type: string, description: detailed event description}
        status:
          type: string
          enum: [ok, error, disabled]
          description: status for event
        id:
          example: 77482fbf-c065-479e-bf8d-a1a5295edf1e
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
        ownerId: {example: d8b1d591-b52f-4e76-80a3-16f48b5f0c40, description: UUID
            of owner of the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_BY, enabled = true)', format: uuid}
        createdDate: {example: '2024-12-30T15:09:38.588-0800', description: Date of
            object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {example: b02f84af-2dbb-454f-b2f9-e6b8de6f80ba, description: Last
            user to access object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_BY, enabled = true)', format: uuid}
        lastAccessedDate: {example: '2024-12-30T15:09:38.588-0800', description: Timestamp
            of last access of object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_DATE, enabled = true)', format: date-time}
        lastModifiedById: {example: 99eaf844-c8e0-42c6-b91f-3b9b27565ca0, description: Unique
            identifier for user who last modifed the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_BY,
            enabled = true)', format: uuid}
        lastModifiedDate: {example: '2024-12-30T15:09:38.589-0800', description: Date
            of last object modification, type: string, x-field-extra-annotation: '    @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_DATE, enabled = true)', format: date-time}
      xml: {name: EventLog}
    Application:
      type: object
      description: Application represents a logical system
      properties:
        name: {type: string, description: name of the application}
        description: {type: string, description: detailed description of the application}
        isTemplate: {type: boolean, description: whether this Application is a Template}
        type:
          type: string
          enum: [full-stack, automation, agent, service, front-end, mobile, ci-cd,
            lambda]
          description: type of application
        status:
          type: string
          enum: [ready, deployed, staging, error, disabled]
          description: status for event
        entrypointUrl: {type: string, format: url, description: the url to the 'homepage'
            or service endpoint}
        contentMedia:
          type: array
          items: {$ref: '#/components/schemas/ContentMediaLink'}
        id:
          example: 08be7ea0-7c47-487b-bfc3-d882559fdd76
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
        ownerId: {example: f131dd59-241b-4d12-a140-979815b11d19, description: UUID
            of owner of the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_BY, enabled = true)', format: uuid}
        createdDate: {example: '2024-12-30T15:09:38.589-0800', description: Date of
            object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {example: 1a33278b-cec1-455a-83f4-fc2a9348ca1c, description: Last
            user to access object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_BY, enabled = true)', format: uuid}
        lastAccessedDate: {example: '2024-12-30T15:09:38.589-0800', description: Timestamp
            of last access of object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_DATE, enabled = true)', format: date-time}
        lastModifiedById: {example: fb12a25e-0c7d-4abc-bf0f-5d1b05f62d9f, description: Unique
            identifier for user who last modifed the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_BY,
            enabled = true)', format: uuid}
        lastModifiedDate: {example: '2024-12-30T15:09:38.589-0800', description: Date
            of last object modification, type: string, x-field-extra-annotation: '    @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_DATE, enabled = true)', format: date-time}
      xml: {name: Application}
    OasOpenAPISpec:
      type: object
      description: An OAS Specification Object (OAS3)
      required: [sourcePath, sourceType]
      properties:
        execModuleId: {type: string, format: uuid, description: optionally link this
            spec to an executable}
        sourceDetails: {type: string, description: 'available additional details or
            information on the source of this spec (license, authors, etc.)'}
        sourcePath: {type: string, description: the path to the source of this spec}
        sourceType:
          type: string
          enum: [valkyrlabs, github, self, gitlab, bitbucket, vendor, notfound]
          description: the type of source for this spec
        openapi:
          type: string
          enum: [3.0.0, 3.0.1, 3.0.2, 3.1.0]
          x-enum-descriptions: [3.0.0, 3.0.1, 3.0.2, 3.1.0]
        info: {$ref: '#/components/schemas/OasInfo'}
        servers:
          type: array
          items: {$ref: '#/components/schemas/OasServer'}
        paths:
          type: array
          items: {$ref: '#/components/schemas/OasPath'}
        components: {$ref: '#/components/schemas/OasComponents'}
        id:
          example: a32a7c5d-a935-4252-94c0-22a4397c0f8c
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
        ownerId: {example: faf2bd68-6e14-41d0-9b20-f16a0252f599, description: UUID
            of owner of the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_BY, enabled = true)', format: uuid}
        createdDate: {example: '2024-12-30T15:09:38.589-0800', description: Date of
            object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {example: df0cecf7-09fe-465e-ae57-5574a7f47802, description: Last
            user to access object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_BY, enabled = true)', format: uuid}
        lastAccessedDate: {example: '2024-12-30T15:09:38.589-0800', description: Timestamp
            of last access of object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_DATE, enabled = true)', format: date-time}
        lastModifiedById: {example: 9d81a4ba-9586-4dfc-a1fd-b1d82da1b22d, description: Unique
            identifier for user who last modifed the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_BY,
            enabled = true)', format: uuid}
        lastModifiedDate: {example: '2024-12-30T15:09:38.589-0800', description: Date
            of last object modification, type: string, x-field-extra-annotation: '    @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_DATE, enabled = true)', format: date-time}
    OasInfo:
      type: object
      description: info on the OAS Spec
      properties:
        oasOpenAPISpecId: {type: string, format: uuid}
        title: {type: string}
        description: {type: string}
        version: {type: string}
        id:
          example: 1936bef7-4999-4813-903c-32293b3801eb
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
        ownerId: {example: afcd92ea-4eb8-421d-8760-16a77b283e9c, description: UUID
            of owner of the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_BY, enabled = true)', format: uuid}
        createdDate: {example: '2024-12-30T15:09:38.589-0800', description: Date of
            object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {example: f3bebae1-377d-469b-be7a-6b89c4dde7fb, description: Last
            user to access object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_BY, enabled = true)', format: uuid}
        lastAccessedDate: {example: '2024-12-30T15:09:38.589-0800', description: Timestamp
            of last access of object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_DATE, enabled = true)', format: date-time}
        lastModifiedById: {example: 5ddb7bff-8de1-4817-81a6-3fd7296180b5, description: Unique
            identifier for user who last modifed the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_BY,
            enabled = true)', format: uuid}
        lastModifiedDate: {example: '2024-12-30T15:09:38.589-0800', description: Date
            of last object modification, type: string, x-field-extra-annotation: '    @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_DATE, enabled = true)', format: date-time}
    OasServer:
      type: object
      description: a server in the OAS Spec
      properties:
        oasOpenAPISpecId: {type: string, format: uuid}
        url: {type: string}
        description: {type: string}
        id:
          example: 11523e35-b848-4a2b-a768-06fb702a1f8d
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
        ownerId: {example: 489bd872-2e33-44af-a3fb-56d2fc8b0579, description: UUID
            of owner of the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_BY, enabled = true)', format: uuid}
        createdDate: {example: '2024-12-30T15:09:38.589-0800', description: Date of
            object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {example: 802d516c-49d0-4f76-b34f-9983f60b5580, description: Last
            user to access object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_BY, enabled = true)', format: uuid}
        lastAccessedDate: {example: '2024-12-30T15:09:38.589-0800', description: Timestamp
            of last access of object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_DATE, enabled = true)', format: date-time}
        lastModifiedById: {example: 3822cb87-989a-48f2-abe9-c1971c05e2ce, description: Unique
            identifier for user who last modifed the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_BY,
            enabled = true)', format: uuid}
        lastModifiedDate: {example: '2024-12-30T15:09:38.589-0800', description: Date
            of last object modification, type: string, x-field-extra-annotation: '    @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_DATE, enabled = true)', format: date-time}
    OasComponents:
      type: object
      description: Components object that holds reusable schemas, parameters, responses,
        examples, and more
      properties:
        oasOpenAPISpecId: {type: string, format: uuid}
        schemas:
          type: array
          items: {$ref: '#/components/schemas/OasObjectSchema'}
        securitySchemes:
          type: array
          items: {$ref: '#/components/schemas/OasSecurityScheme'}
        id:
          example: 60478403-8748-4cd9-9674-ebf80f948de0
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
        ownerId: {example: 239ab1b8-4a16-468b-8e30-7be24898fb21, description: UUID
            of owner of the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_BY, enabled = true)', format: uuid}
        createdDate: {example: '2024-12-30T15:09:38.589-0800', description: Date of
            object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {example: 0c201ded-dd25-4f85-a1d3-2fb77074cf8f, description: Last
            user to access object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_BY, enabled = true)', format: uuid}
        lastAccessedDate: {example: '2024-12-30T15:09:38.589-0800', description: Timestamp
            of last access of object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_DATE, enabled = true)', format: date-time}
        lastModifiedById: {example: ebc9d2a8-eb9c-44f7-a964-d03a22e61901, description: Unique
            identifier for user who last modifed the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_BY,
            enabled = true)', format: uuid}
        lastModifiedDate: {example: '2024-12-30T15:09:38.590-0800', description: Date
            of last object modification, type: string, x-field-extra-annotation: '    @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_DATE, enabled = true)', format: date-time}
    OasSecurityScheme:
      type: object
      description: a security scheme to access the api
      properties:
        oasComponentsId: {type: string, format: uuid}
        name: {type: string, description: the name of the security scheme}
        id:
          example: cea3cea2-bebe-4001-98fe-49f61f1b4882
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
        ownerId: {example: a4fe6e05-6753-4c37-b1fa-5e58032f714c, description: UUID
            of owner of the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_BY, enabled = true)', format: uuid}
        createdDate: {example: '2024-12-30T15:09:38.590-0800', description: Date of
            object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {example: d3ca6ee2-32e1-464b-b157-9f58b52a8608, description: Last
            user to access object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_BY, enabled = true)', format: uuid}
        lastAccessedDate: {example: '2024-12-30T15:09:38.590-0800', description: Timestamp
            of last access of object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_DATE, enabled = true)', format: date-time}
        lastModifiedById: {example: 47b444fc-67dd-4869-8534-c523a2d8837d, description: Unique
            identifier for user who last modifed the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_BY,
            enabled = true)', format: uuid}
        lastModifiedDate: {example: '2024-12-30T15:09:38.590-0800', description: Date
            of last object modification, type: string, x-field-extra-annotation: '    @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_DATE, enabled = true)', format: date-time}
    OasPath:
      type: object
      description: a path in the OAS Spec
      properties:
        path: {type: string, description: 'the URI of the path (e.g., /some/path/to/object)'}
        oasOpenAPISpecId: {type: string, format: uuid}
        summary: {type: string}
        description: {type: string}
        get: {$ref: '#/components/schemas/OasOperation'}
        put: {$ref: '#/components/schemas/OasOperation'}
        post: {$ref: '#/components/schemas/OasOperation'}
        delete: {$ref: '#/components/schemas/OasOperation'}
        id:
          example: 7c9fb749-017b-4649-8a32-e15cf69c6881
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
        ownerId: {example: 5798e694-4f69-4c23-bd0e-c396d146696b, description: UUID
            of owner of the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_BY, enabled = true)', format: uuid}
        createdDate: {example: '2024-12-30T15:09:38.590-0800', description: Date of
            object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {example: e7f048dc-9f54-48c0-b115-5c4585691789, description: Last
            user to access object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_BY, enabled = true)', format: uuid}
        lastAccessedDate: {example: '2024-12-30T15:09:38.590-0800', description: Timestamp
            of last access of object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_DATE, enabled = true)', format: date-time}
        lastModifiedById: {example: b0ea64f1-851d-4075-9fe7-10d7c0280abf, description: Unique
            identifier for user who last modifed the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_BY,
            enabled = true)', format: uuid}
        lastModifiedDate: {example: '2024-12-30T15:09:38.590-0800', description: Date
            of last object modification, type: string, x-field-extra-annotation: '    @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_DATE, enabled = true)', format: date-time}
    OasOperation:
      type: object
      description: an operation in the OAS Spec
      properties:
        description: {type: string, description: description of the application}
        oasPathId: {type: string, format: uuid}
        summary: {type: string}
        operationId: {type: string}
        parameters:
          type: array
          items: {$ref: '#/components/schemas/OasParameter'}
        responses:
          type: array
          items: {$ref: '#/components/schemas/OasResponse'}
        id:
          example: e1dc3d1b-140b-4af7-92fc-6121fa56e04f
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
        ownerId: {example: 41e3437a-3f70-47e2-aefa-fca9478faaa9, description: UUID
            of owner of the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_BY, enabled = true)', format: uuid}
        createdDate: {example: '2024-12-30T15:09:38.590-0800', description: Date of
            object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {example: 88dd8a1c-7925-4820-9920-24bbad0dfd77, description: Last
            user to access object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_BY, enabled = true)', format: uuid}
        lastAccessedDate: {example: '2024-12-30T15:09:38.590-0800', description: Timestamp
            of last access of object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_DATE, enabled = true)', format: date-time}
        lastModifiedById: {example: e63af5b2-28fd-4f6d-8654-125273278b54, description: Unique
            identifier for user who last modifed the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_BY,
            enabled = true)', format: uuid}
        lastModifiedDate: {example: '2024-12-30T15:09:38.590-0800', description: Date
            of last object modification, type: string, x-field-extra-annotation: '    @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_DATE, enabled = true)', format: date-time}
    OasParameter:
      type: object
      description: a parameter to a request in the OAS Spec
      properties:
        oasOperationId: {type: string, format: uuid}
        name: {type: string}
        location:
          type: string
          enum: [query, header, path, cookie]
        description: {type: string}
        required: {type: boolean}
        schema: {$ref: '#/components/schemas/OasObjectSchema'}
        id:
          example: 2b889f38-85ee-4fc1-ba8b-3beaea8b9fbb
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
        ownerId: {example: 8e264da7-0ca0-41b6-9bd4-0c48c8bbc3db, description: UUID
            of owner of the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_BY, enabled = true)', format: uuid}
        createdDate: {example: '2024-12-30T15:09:38.590-0800', description: Date of
            object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {example: 253c8780-2d82-4abf-bdeb-d04df0954d2d, description: Last
            user to access object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_BY, enabled = true)', format: uuid}
        lastAccessedDate: {example: '2024-12-30T15:09:38.590-0800', description: Timestamp
            of last access of object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_DATE, enabled = true)', format: date-time}
        lastModifiedById: {example: 7fc9f7a7-1ddd-42a6-909c-7d324b74dd0d, description: Unique
            identifier for user who last modifed the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_BY,
            enabled = true)', format: uuid}
        lastModifiedDate: {example: '2024-12-30T15:09:38.590-0800', description: Date
            of last object modification, type: string, x-field-extra-annotation: '    @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_DATE, enabled = true)', format: date-time}
    OasResponse:
      type: object
      description: a response in the OAS Spec
      properties:
        oasOperationId: {type: string, format: uuid}
        description: {type: string}
        content:
          type: array
          items: {$ref: '#/components/schemas/OasObjectSchema'}
        id:
          example: a3af2106-4b24-45e6-a875-abb5c9cce316
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
        ownerId: {example: e094e449-9f2c-407d-9608-760ff4b0e9ec, description: UUID
            of owner of the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_BY, enabled = true)', format: uuid}
        createdDate: {example: '2024-12-30T15:09:38.590-0800', description: Date of
            object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {example: 62acc533-573e-45b7-a095-7fae2598b8da, description: Last
            user to access object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_BY, enabled = true)', format: uuid}
        lastAccessedDate: {example: '2024-12-30T15:09:38.591-0800', description: Timestamp
            of last access of object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_DATE, enabled = true)', format: date-time}
        lastModifiedById: {example: 8cdfd83d-5025-459d-9877-432cbc660442, description: Unique
            identifier for user who last modifed the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_BY,
            enabled = true)', format: uuid}
        lastModifiedDate: {example: '2024-12-30T15:09:38.591-0800', description: Date
            of last object modification, type: string, x-field-extra-annotation: '    @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_DATE, enabled = true)', format: date-time}
    OasObjectSchema:
      type: object
      description: a schema object in the OAS Spec
      properties:
        oasComponentsId: {type: string, format: uuid}
        oasParameterId: {type: string, format: uuid}
        oasResponseId: {type: string, format: uuid}
        type: {type: string}
        format: {type: string}
        oasEnum:
          type: array
          items: {$ref: '#/components/schemas/OasEnum'}
        required:
          type: array
          items: {$ref: '#/components/schemas/OasRequired'}
        id:
          example: 01a850fc-2a10-4b13-af36-1ea1b8d4a58f
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
        ownerId: {example: c7219508-49cf-4d4c-bd38-2bf0f557c14c, description: UUID
            of owner of the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_BY, enabled = true)', format: uuid}
        createdDate: {example: '2024-12-30T15:09:38.591-0800', description: Date of
            object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {example: 72d2728a-8683-4738-9509-2b39c227cb78, description: Last
            user to access object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_BY, enabled = true)', format: uuid}
        lastAccessedDate: {example: '2024-12-30T15:09:38.591-0800', description: Timestamp
            of last access of object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_DATE, enabled = true)', format: date-time}
        lastModifiedById: {example: fc631f4b-c450-4f37-86b3-8e6baab8a848, description: Unique
            identifier for user who last modifed the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_BY,
            enabled = true)', format: uuid}
        lastModifiedDate: {example: '2024-12-30T15:09:38.591-0800', description: Date
            of last object modification, type: string, x-field-extra-annotation: '    @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_DATE, enabled = true)', format: date-time}
    OasRequired:
      type: object
      description: a required item in the OAS Spec
      properties:
        oasObjectSchemaId: {type: string, format: uuid}
        type: {type: string}
        id:
          example: a1539236-d9d0-49cf-9a00-ea5eae2706d9
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
        ownerId: {example: b462b8fb-7491-4b86-8a8a-53aa647dc98c, description: UUID
            of owner of the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_BY, enabled = true)', format: uuid}
        createdDate: {example: '2024-12-30T15:09:38.591-0800', description: Date of
            object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {example: cf866a66-0a0e-4477-941b-3fe5f6686f14, description: Last
            user to access object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_BY, enabled = true)', format: uuid}
        lastAccessedDate: {example: '2024-12-30T15:09:38.591-0800', description: Timestamp
            of last access of object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_DATE, enabled = true)', format: date-time}
        lastModifiedById: {example: 170c1b82-d266-4aad-a812-d734c7901558, description: Unique
            identifier for user who last modifed the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_BY,
            enabled = true)', format: uuid}
        lastModifiedDate: {example: '2024-12-30T15:09:38.591-0800', description: Date
            of last object modification, type: string, x-field-extra-annotation: '    @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_DATE, enabled = true)', format: date-time}
    OasEnum:
      type: object
      description: an enum in the OAS Spec
      properties:
        oasObjectSchemaId: {type: string, format: uuid}
        type: {type: string}
        id:
          example: 10f4a5b4-a1b1-4120-83bf-db798f0e4539
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
        ownerId: {example: b30337d0-6f00-4f06-922e-39ae8113be78, description: UUID
            of owner of the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_BY, enabled = true)', format: uuid}
        createdDate: {example: '2024-12-30T15:09:38.591-0800', description: Date of
            object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {example: c2154266-64b7-4f27-abc2-a94bad7118c4, description: Last
            user to access object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_BY, enabled = true)', format: uuid}
        lastAccessedDate: {example: '2024-12-30T15:09:38.591-0800', description: Timestamp
            of last access of object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_DATE, enabled = true)', format: date-time}
        lastModifiedById: {example: 50b2409a-84c5-48f6-b123-702d91cd78b5, description: Unique
            identifier for user who last modifed the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_BY,
            enabled = true)', format: uuid}
        lastModifiedDate: {example: '2024-12-30T15:09:38.591-0800', description: Date
            of last object modification, type: string, x-field-extra-annotation: '    @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_DATE, enabled = true)', format: date-time}
    Stack:
      required: [name, schemaData]
      type: object
      description: A Stack is a runnable configuration for an Application
      properties:
        execModuleId: {type: string, format: uuid}
        category:
          type: string
          description: category of generated output
          enum: [Full Stack, Front End, API, Data Library, Infrastructure, Documentation]
        name: {type: string, description: Name of the service API displayed in the
            UI, example: My New Stack}
        artifactId: {maxLength: 256, type: string, description: 'Name of the output
            build file(s) ie: mvn ArtifactID', example: valkyrai, x-field-extra-annotation: '@Column(length
            = 256)'}
        applicationId: {type: string, format: uuid, description: 'Id of the Application
            that this Stack belongs to, if any'}
        adminServerHost:
          maxLength: 256
          type: string
          description: host (FQDN) name of to connect to the admin server -- do not
            include 'http(s):' or slashes
          example: www.mycompany.com
          x-thorapi-dataField: fieldGroup=admin-config, advanced=true
          x-field-extra-annotation: |-
            @DataField(unique = false, hidden = false, advanced = false, relationshipTable="fieldGroup=admin-config, advanced=true")
            @Column(length = 256)
        adminServerPort:
          maxLength: 256
          type: string
          description: port of to connect to the admin server
          example: '8009'
          x-thorapi-dataField: fieldGroup=admin-config, advanced=true
          x-field-extra-annotation: |-
            @DataField(unique = false, hidden = false, advanced = false, relationshipTable="fieldGroup=admin-config, advanced=true")
            @Column(length = 256)
        hostName:
          maxLength: 256
          type: string
          description: host of this service (FQDN) -- do not include 'http(s):' or
            slashes
          example: localhost
          x-thorapi-dataField: fieldGroup=service-config, advanced=true
          x-field-extra-annotation: |-
            @DataField(unique = false, hidden = false, advanced = false, relationshipTable="fieldGroup=service-config, advanced=true")
            @Column(length = 256)
        hostPort:
          maxLength: 5
          type: string
          description: port of this service
          example: '8099'
          x-thorapi-dataField: fieldGroup=service-config, advanced=true
          x-field-extra-annotation: |-
            @DataField(unique = false, hidden = false, advanced = false, relationshipTable="fieldGroup=service-config, advanced=true")
            @Column(length = 5)
        orgName:
          maxLength: 256
          type: string
          description: the name of the organization owner of the service used in classpath
          example: Valkyr Labs Inc.
          x-thorapi-dataField: fieldGroup=github-settings, advanced=true
          x-field-extra-annotation: |-
            @DataField(unique = false, hidden = false, advanced = false, relationshipTable="fieldGroup=github-settings, advanced=true")
            @Column(length = 256)
        gitUser:
          maxLength: 256
          type: string
          description: The name of the git USER or ORG to push generated stack code
          example: Valkyr Labs Inc
          x-thorapi-dataField: fieldGroup=github-settings, advanced=true
          x-field-extra-annotation: |-
            @DataField(unique = false, hidden = false, advanced = false, relationshipTable="fieldGroup=github-settings, advanced=true")
            @Column(length = 256)
        gitRepo:
          maxLength: 256
          type: string
          description: The repository where the output Project will be pushed after
            generation
          example: MyValkyrAIApp
          x-thorapi-dataField: fieldGroup=github-settings, advanced=true
          x-field-extra-annotation: |-
            @DataField(unique = false, hidden = false, advanced = false, relationshipTable="fieldGroup=github-settings, advanced=true")
            @Column(length = 256)
        skipSwaggerGen: {type: boolean, description: Whether to skip Swagger API build
            during Generation, default: false, x-thorapi-dataField: 'fieldGroup=generator-config,
            advanced=true', x-field-extra-annotation: '@DataField(unique = false,
            hidden = false, advanced = false, relationshipTable="fieldGroup=generator-config,
            advanced=true")'}
        skipJavaGen: {type: boolean, description: Whether to skip Java Services and
            DAO build during Generation, default: false, x-thorapi-dataField: 'fieldGroup=generator-config,
            advanced=true', x-field-extra-annotation: '@DataField(unique = false,
            hidden = false, advanced = false, relationshipTable="fieldGroup=generator-config,
            advanced=true")'}
        skipDbGen: {type: boolean, description: Whether to skip Database Modification
            during Generation, default: false, x-thorapi-dataField: 'fieldGroup=generator-config,
            advanced=true', x-field-extra-annotation: '@DataField(unique = false,
            hidden = false, advanced = false, relationshipTable="fieldGroup=generator-config,
            advanced=true")'}
        skipReactGen: {type: boolean, description: Whether to skip React Front End
            during Generation, default: false, x-thorapi-dataField: 'fieldGroup=generator-config,
            advanced=true', x-field-extra-annotation: '@DataField(unique = false,
            hidden = false, advanced = false, relationshipTable="fieldGroup=generator-config,
            advanced=true")'}
        dbGenDropTable: {type: boolean, description: Will rename and any conflicting
            pre-existing tables during generation, default: true, x-thorapi-dataField: 'fieldGroup=generator-config,
            advanced=true', x-field-extra-annotation: '@DataField(unique = false,
            hidden = false, advanced = false, relationshipTable="fieldGroup=generator-config,
            advanced=true")'}
        thorApiSecureKey:
          maxLength: 2560
          type: string
          description: Secure key used to encrypt the data in the new platform
          example: =W34sdcwdsfwC34W34sdcwdsfwC34W34sdcwdsfw=
          x-thorapi-secureField: true
          x-field-extra-annotation: |-
            @SecureField(encryptionType = SecureField.EncryptionType.SYMMETRIC, strength = 5)
            @Column(length = 7680)
        dbUrl:
          maxLength: 256
          type: string
          description: database url for the system
          example: jdbc:mysql//db.myco.com
          x-thorapi-dataField: fieldGroup=database-config
          x-field-extra-annotation: |-
            @DataField(unique = false, hidden = false, advanced = false, relationshipTable="fieldGroup=database-config")
            @Column(length = 256)
        dbName:
          maxLength: 256
          type: string
          description: 'db name (schema name) for the system NOTE: must exist prior
            to initialization'
          example: ValkyrAIApp1
          x-thorapi-dataField: fieldGroup=database-config
          x-field-extra-annotation: |-
            @DataField(unique = false, hidden = false, advanced = false, relationshipTable="fieldGroup=database-config")
            @Column(length = 256)
        dbUser:
          maxLength: 256
          type: string
          description: database user for the system
          example: igniteuser
          x-thorapi-dataField: fieldGroup=database-config
          x-thorapi-secureField: true
          x-field-extra-annotation: |-
            @DataField(unique = false, hidden = false, advanced = false, relationshipTable="fieldGroup=database-config")
            @SecureField(encryptionType = SecureField.EncryptionType.SYMMETRIC, strength = 5)
            @Column(length = 768)
        dbPassword:
          maxLength: 256
          type: string
          description: database password for the system
          format: password
          example: hard2Gu3ss
          x-thorapi-dataField: fieldGroup=database-config
          x-thorapi-secureField: true
          x-field-extra-annotation: |-
            @DataField(unique = false, hidden = false, advanced = false, relationshipTable="fieldGroup=database-config")
            @SecureField(encryptionType = SecureField.EncryptionType.SYMMETRIC, strength = 5)
            @Column(length = 768)
        schemaName:
          maxLength: 256
          type: string
          description: 'Name of the DB Schema to connect to  NOTE: must exist prior
            to initialization'
          example: starter
          x-thorapi-dataField: advanced=true, fieldGroup=database-config
          x-field-extra-annotation: |-
            @DataField(unique = false, hidden = false, advanced = false, relationshipTable="advanced=true, fieldGroup=database-config")
            @Column(length = 256)
        language:
          type: string
          description: Backend Stack Service Language
          enum: [valkyrai_java_spring, valkyrai_kotlin_spring]
        templateRepo:
          type: string
          description: Stack template repo
          enum: [java_spring, typescript_rtk_bootstrap]
        schemaData: {maxLength: 1000000, minLength: 20, type: string, description: YAML
            Swagger/OpenAPI Schema, example: <your schema here>, x-field-extra-annotation: '@Column(length
            = 1000000)'}
        schemaFileName: {maxLength: 256, type: string, description: File name containing
            Schema definition, example: ignite_commerce.yml, x-field-extra-annotation: '@Column(length
            = 256)'}
        status:
          type: string
          description: Current Stack status
          enum: [available, syntax_error, compilation_error, runtime_error, database_error,
            locked]
        id:
          example: aa173619-6246-4f02-b4c7-58b840c561ae
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
        ownerId: {example: 15f2aaaa-13bb-439d-9079-88c3ee1c5fa9, description: UUID
            of owner of the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_BY, enabled = true)', format: uuid}
        createdDate: {example: '2024-12-30T15:09:38.591-0800', description: Date of
            object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {example: d71c71e4-1c86-43be-ae54-40652b780a7a, description: Last
            user to access object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_BY, enabled = true)', format: uuid}
        lastAccessedDate: {example: '2024-12-30T15:09:38.591-0800', description: Timestamp
            of last access of object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_DATE, enabled = true)', format: date-time}
        lastModifiedById: {example: 3810cf61-96ab-46eb-8c17-5d94aa32260c, description: Unique
            identifier for user who last modifed the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_BY,
            enabled = true)', format: uuid}
        lastModifiedDate: {example: '2024-12-30T15:09:38.591-0800', description: Date
            of last object modification, type: string, x-field-extra-annotation: '    @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_DATE, enabled = true)', format: date-time}
      xml: {name: Stack}
    ChatMessage:
      type: object
      description: A Chat message sent to a recipient
      properties:
        sessionId: {type: string}
        connected: {type: boolean, description: if this chat message is conencted
            to a service (ws)}
        json: {type: string, maxLength: 3000, x-field-extra-annotation: '@Column(length
            = 3000)'}
        sourceType:
          type: string
          description: type of the message source
          enum: [api, server_log, p2p]
        sourceOwner: {type: string, format: uuid}
        role:
          type: string
          enum: [user, assistant]
        content: {maxLength: 100000, minLength: 10, type: string, description: the
            message to send to the chat service, example: 'What is the next step for
            our adventure?', x-field-extra-annotation: '@Column(length = 100000)'}
        id:
          example: 5464e1e1-60d9-4819-ad5f-2aa591eec7fe
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
        ownerId: {example: 54793efc-c4b4-4a6e-9ba4-c34c0d3e0032, description: UUID
            of owner of the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_BY, enabled = true)', format: uuid}
        createdDate: {example: '2024-12-30T15:09:38.591-0800', description: Date of
            object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {example: d897484b-668b-45fe-8673-bd6389898cd8, description: Last
            user to access object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_BY, enabled = true)', format: uuid}
        lastAccessedDate: {example: '2024-12-30T15:09:38.592-0800', description: Timestamp
            of last access of object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_DATE, enabled = true)', format: date-time}
        lastModifiedById: {example: 1d140da0-5ead-4418-97a1-dc9eda00da72, description: Unique
            identifier for user who last modifed the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_BY,
            enabled = true)', format: uuid}
        lastModifiedDate: {example: '2024-12-30T15:09:38.592-0800', description: Date
            of last object modification, type: string, x-field-extra-annotation: '    @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_DATE, enabled = true)', format: date-time}
    ChatResponse:
      type: object
      description: Chatresponse from the other side of the communication
      properties:
        sessionId: {type: string}
        json: {type: string, maxLength: 3000, x-field-extra-annotation: '@Column(length
            = 3000)'}
        sourceType:
          type: string
          description: type of the message source
          enum: [api, server_log, p2p]
        sourceOwner: {type: string, format: uuid}
        role:
          type: string
          enum: [user, assistant]
        content: {maxLength: 100000, minLength: 10, type: string, description: the
            response fro the chat service, example: We must cross the mighty Mississippi,
          x-field-extra-annotation: '@Column(length = 100000)'}
        id:
          example: 9d91b1fd-ab5e-44ca-8426-61d563d8dcbf
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
        ownerId: {example: 387610d9-2dda-4555-a72e-1956e6379c8b, description: UUID
            of owner of the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_BY, enabled = true)', format: uuid}
        createdDate: {example: '2024-12-30T15:09:38.592-0800', description: Date of
            object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {example: 6b34b719-4513-4af8-bb96-776cf9d0362f, description: Last
            user to access object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_BY, enabled = true)', format: uuid}
        lastAccessedDate: {example: '2024-12-30T15:09:38.592-0800', description: Timestamp
            of last access of object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_DATE, enabled = true)', format: date-time}
        lastModifiedById: {example: 6cba3010-274f-470a-814e-250b9786e420, description: Unique
            identifier for user who last modifed the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_BY,
            enabled = true)', format: uuid}
        lastModifiedDate: {example: '2024-12-30T15:09:38.592-0800', description: Date
            of last object modification, type: string, x-field-extra-annotation: '    @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_DATE, enabled = true)', format: date-time}
    Reaction:
      required: [target, value]
      type: object
      description: Reaction allows for tagging any content in the system with an emoji
      properties:
        targetObject: {type: string, format: uuid, description: UUID of the system
            object, example: ABC234}
        reaction:
          type: string
          description: the reaction to the item
          enum: [like, dislike, neutral, angry, sad, question]
          example: neutral
        id:
          example: df44787f-73ee-48f0-8cb1-fa901146a9c2
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
        ownerId: {example: 7f62a229-ac65-4c57-8aef-7200debbc235, description: UUID
            of owner of the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_BY, enabled = true)', format: uuid}
        createdDate: {example: '2024-12-30T15:09:38.592-0800', description: Date of
            object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {example: 82a29fd1-3825-48c9-a423-22812b6b8b39, description: Last
            user to access object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_BY, enabled = true)', format: uuid}
        lastAccessedDate: {example: '2024-12-30T15:09:38.592-0800', description: Timestamp
            of last access of object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_DATE, enabled = true)', format: date-time}
        lastModifiedById: {example: 9862628a-1b8e-4e70-918a-e7359670d844, description: Unique
            identifier for user who last modifed the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_BY,
            enabled = true)', format: uuid}
        lastModifiedDate: {example: '2024-12-30T15:09:38.592-0800', description: Date
            of last object modification, type: string, x-field-extra-annotation: '    @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_DATE, enabled = true)', format: date-time}
    Principal:
      required: [email, password, username]
      type: object
      description: The Valkyr Principal. Represents a user, service, or agent in the
        system with preferences and privileges.
      properties:
        firstName:
          type: string
          description: first name of user (encrypted)
          example: Peace
          x-thorapi-dataField: fieldGroup=personal-details
          x-thorapi-secureField: true
          x-field-extra-annotation: |-
            @DataField(unique = false, hidden = false, advanced = false, relationshipTable="fieldGroup=personal-details")
            @SecureField(encryptionType = SecureField.EncryptionType.SYMMETRIC, strength = 5)
        middleName:
          type: string
          description: middle name of user
          example: Love
          x-thorapi-dataField: fieldGroup=personal-details
          x-thorapi-secureField: true
          x-field-extra-annotation: |-
            @DataField(unique = false, hidden = false, advanced = false, relationshipTable="fieldGroup=personal-details")
            @SecureField(encryptionType = SecureField.EncryptionType.SYMMETRIC, strength = 5)
        lastName: {type: string, description: last name of user (encrypted), example: Harmony,
          x-thorapi-secureField: true, x-field-extra-annotation: '@SecureField(encryptionType
            = SecureField.EncryptionType.SYMMETRIC, strength = 5)'}
        username:
          maxLength: 60
          minLength: 5
          type: string
          description: Your account user name
          example: Sparky
          x-thorapi-dataField: fieldGroup=personal-details, unique=true
          x-field-extra-annotation: |-
            @DataField(unique = false, hidden = false, advanced = false, relationshipTable="fieldGroup=personal-details, unique=true")
            @Column(length = 60)
        password: {minLength: 8, type: string, description: Your account password,
          format: password, example: HardToGuess1980, x-field-extra-annotation: '@SecureField(encryptionType
            = SecureField.EncryptionType.HASHED, strength = 10)'}
        fingerprint:
          type: string
          description: Encrypted identity (Facial Recognition, Fingerprint Scanner,
            etc.)
          readOnly: true
          example: DK$DFSJaraDD
          x-thorapi-dataField: advanced=true
          x-thorapi-secureField: true
          x-field-extra-annotation: |-
            @DataField(unique = false, hidden = false, advanced = false, relationshipTable="advanced=true")
            @SecureField(encryptionType = SecureField.EncryptionType.SYMMETRIC, strength = 5)
        federalIdentification: {pattern: '^\d{3}-\d{2}-\d{4}$', default: 333-22-4444,
          type: string, description: SSN or a 10 digit federal government ID (encrypted),
          example: 111-22-3333, x-thorapi-secureField: true, x-field-extra-annotation: '@SecureField(encryptionType
            = SecureField.EncryptionType.SYMMETRIC, strength = 5)'}
        residenceCountry:
          minLength: 3
          type: string
          description: Country of residence 3-character code
          example: USA
          x-thorapi-dataField: advanced=true
          x-thorapi-secureField: true
          x-field-extra-annotation: |-
            @DataField(unique = false, hidden = false, advanced = false, relationshipTable="advanced=true")
            @SecureField(encryptionType = SecureField.EncryptionType.SYMMETRIC, strength = 5)
        stateIdentification:
          minLength: 10
          pattern: ^\d{10}$
          type: string
          description: Driver's License or a 10 digit state government ID
          example: 3333333333
          default: 2222222222
          x-thorapi-dataField: advanced=true
          x-thorapi-secureField: true
          x-field-extra-annotation: |-
            @DataField(unique = false, hidden = false, advanced = false, relationshipTable="advanced=true")
            @SecureField(encryptionType = SecureField.EncryptionType.SYMMETRIC, strength = 5)
        residenceState:
          minLength: 2
          type: string
          description: State of residence 2-character code (USA)
          example: CA
          x-thorapi-dataField: advanced=true
          x-thorapi-secureField: true
          x-field-extra-annotation: |-
            @DataField(unique = false, hidden = false, advanced = false, relationshipTable="advanced=true")
            @SecureField(encryptionType = SecureField.EncryptionType.SYMMETRIC, strength = 5)
        email: {pattern: '^.+@[^.].*.[a-z]{2,}$', type: string, description: The main
            email address for the user (encrypted), format: email, example: wiley.coyote@acme-corp.com,
          x-thorapi-dataField: unique=true, x-field-extra-annotation: '@DataField(unique
            = false, hidden = false, advanced = false, relationshipTable="unique=true")'}
        social: {type: string, description: The username for your primary social account
            (if any), format: url, example: 'https://twitter.com/ValkyrAI', x-thorapi-secureField: true,
          x-field-extra-annotation: '@SecureField(encryptionType = SecureField.EncryptionType.SYMMETRIC,
            strength = 5)'}
        bio: {type: string, description: More in-depth information about you and your
            account, maxLength: 100000, x-field-extra-annotation: '@Column(length
            = 100000)'}
        notes: {type: string, example: Notes about this account, maxLength: 100000,
          x-field-extra-annotation: '@Column(length = 100000)'}
        avatarUrl: {type: string, description: URL for the user avatar image, format: url,
          example: 'https://img.com/mypic.png'}
        organizationId: {type: string, format: uuid}
        organization: {$ref: '#/components/schemas/Organization'}
        addresses:
          type: array
          items: {$ref: '#/components/schemas/Address'}
        acceptedCookies: {type: boolean, description: Whether the user accepted the
            use of cookies, default: false, x-thorapi-dataField: 'advanced=true, fieldGroup=signup',
          x-field-extra-annotation: '@DataField(unique = false, hidden = false, advanced
            = false, relationshipTable="advanced=true, fieldGroup=signup")'}
        acceptedTos: {type: boolean, description: Whether the user accepted the terms
            of service, default: false, x-thorapi-dataField: 'advanced=true, fieldGroup=signup',
          x-field-extra-annotation: '@DataField(unique = false, hidden = false, advanced
            = false, relationshipTable="advanced=true, fieldGroup=signup")'}
        enabled: {type: boolean, description: Spring Security User field whether the
            user is enabled, default: true, x-thorapi-dataField: 'advanced=true, fieldGroup=accountStatus',
          x-field-extra-annotation: '@DataField(unique = false, hidden = false, advanced
            = false, relationshipTable="advanced=true, fieldGroup=accountStatus")'}
        credentialNonExpired: {type: boolean, description: Spring Security User field
            whether the user's login credentials have expired, default: true, x-thorapi-dataField: 'advanced=true,
            fieldGroup=accountStatus', x-field-extra-annotation: '@DataField(unique
            = false, hidden = false, advanced = false, relationshipTable="advanced=true,
            fieldGroup=accountStatus")'}
        accountEnabled: {type: boolean, description: Spring Security User field whether
            the user account is enabled, default: true, x-thorapi-dataField: 'advanced=true,
            fieldGroup=accountStatus', x-field-extra-annotation: '@DataField(unique
            = false, hidden = false, advanced = false, relationshipTable="advanced=true,
            fieldGroup=accountStatus")'}
        accountNonLocked: {type: boolean, description: Spring Security User field
            whether the user account is locked, default: true, x-thorapi-dataField: 'advanced=true,
            fieldGroup=accountStatus', x-field-extra-annotation: '@DataField(unique
            = false, hidden = false, advanced = false, relationshipTable="advanced=true,
            fieldGroup=accountStatus")'}
        accountNonExpired: {type: boolean, description: Spring Security User field
            whether the user account has expired, default: false, x-thorapi-dataField: 'advanced=true,
            fieldGroup=accountStatus', x-field-extra-annotation: '@DataField(unique
            = false, hidden = false, advanced = false, relationshipTable="advanced=true,
            fieldGroup=accountStatus")'}
        roles:
          x-thorapi-dataField: advanced=true, fieldGroup=accountStatus
          description: the granted roles (or null if the granted authority cannot
            be expressed as a String with sufficient precision).
          type: array
          items: {$ref: '#/components/schemas/Role'}
          x-field-extra-annotation: '@DataField(unique = false, hidden = false, advanced
            = false, relationshipTable="advanced=true, fieldGroup=accountStatus")'
        authorityList:
          x-thorapi-dataField: advanced=true, fieldGroup=accountStatus
          description: the granted authorities (or null if the granted authority cannot
            be expressed as a String with sufficient precision).
          type: array
          items: {$ref: '#/components/schemas/Authority'}
          x-field-extra-annotation: '@DataField(unique = false, hidden = false, advanced
            = false, relationshipTable="advanced=true, fieldGroup=accountStatus")'
        id:
          example: c3c6ba93-6cf3-4f95-bcc7-fd42358a5c60
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
        ownerId: {example: c4bdd036-389c-4faa-a5a4-d557b953fae9, description: UUID
            of owner of the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_BY, enabled = true)', format: uuid}
        createdDate: {example: '2024-12-30T15:09:38.592-0800', description: Date of
            object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {example: f67cd1e4-9545-4331-85f4-80fbeeaf659c, description: Last
            user to access object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_BY, enabled = true)', format: uuid}
        lastAccessedDate: {example: '2024-12-30T15:09:38.592-0800', description: Timestamp
            of last access of object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_DATE, enabled = true)', format: date-time}
        lastModifiedById: {example: 56c17561-d5fc-4317-a15d-569983b29def, description: Unique
            identifier for user who last modifed the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_BY,
            enabled = true)', format: uuid}
        lastModifiedDate: {example: '2024-12-30T15:09:38.592-0800', description: Date
            of last object modification, type: string, x-field-extra-annotation: '    @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_DATE, enabled = true)', format: date-time}
      xml: {name: User}
    Organization:
      required: [name]
      type: object
      description: TODO Organization CLASS DESCRIPTION
      properties:
        name: {type: string, example: ACME Corp Inc.}
        homePage: {type: string, format: url, example: 'https://www.acme-corp.com'}
        phone: {type: string, example: 415-867-5309}
        addressId: {type: string, format: uuid}
        address: {$ref: '#/components/schemas/Address'}
        id:
          example: 341395b8-1642-4f92-8d24-61d3c8ab32b2
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
        ownerId: {example: 12bda83f-7286-4507-8a0a-ae73a8d4ee44, description: UUID
            of owner of the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_BY, enabled = true)', format: uuid}
        createdDate: {example: '2024-12-30T15:09:38.593-0800', description: Date of
            object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {example: 40bbb0df-8b1b-4306-87f7-e763a2487ca8, description: Last
            user to access object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_BY, enabled = true)', format: uuid}
        lastAccessedDate: {example: '2024-12-30T15:09:38.593-0800', description: Timestamp
            of last access of object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_DATE, enabled = true)', format: date-time}
        lastModifiedById: {example: a588b761-9cea-4acc-b514-367692d2e2d4, description: Unique
            identifier for user who last modifed the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_BY,
            enabled = true)', format: uuid}
        lastModifiedDate: {example: '2024-12-30T15:09:38.593-0800', description: Date
            of last object modification, type: string, x-field-extra-annotation: '    @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_DATE, enabled = true)', format: date-time}
      xml: {name: Organization}
    Address:
      required: [city, name, state, street1, postal_code]
      type: object
      description: TODO Address CLASS DESCRIPTION
      properties:
        hasWifi: {type: boolean}
        principalId: {type: string, format: uuid}
        addressType:
          type: string
          description: The type of address
          enum: [home, mail, work, school, other]
          example: home
        name:
          type: string
          description: full name of addressee
          example: Henry Johnson
          x-thorapi-dataField: advanced=true
          x-thorapi-secureField: true
          x-field-extra-annotation: |-
            @DataField(unique = false, hidden = false, advanced = false, relationshipTable="advanced=true")
            @SecureField(encryptionType = SecureField.EncryptionType.SYMMETRIC, strength = 5)
        street1: {type: string, description: street address line 1, example: 123 Daydream
            Blvd.}
        street2: {type: string, description: street address line 2, example: Apt.
            7}
        city:
          type: string
          description: full name of city
          example: San Francisco
          x-thorapi-dataField: advanced=true
          x-thorapi-secureField: true
          x-field-extra-annotation: |-
            @DataField(unique = false, hidden = false, advanced = false, relationshipTable="advanced=true")
            @SecureField(encryptionType = SecureField.EncryptionType.SYMMETRIC, strength = 5)
        state:
          minLength: 2
          type: string
          description: State of residence 2-character code (USA)
          example: CA
          x-thorapi-dataField: advanced=true
          x-thorapi-secureField: true
          x-field-extra-annotation: |-
            @DataField(unique = false, hidden = false, advanced = false, relationshipTable="advanced=true")
            @SecureField(encryptionType = SecureField.EncryptionType.SYMMETRIC, strength = 5)
        country: {maxLength: 3, minLength: 3, example: USA, type: string, description: 3
            character country code (upper case), x-field-extra-annotation: '@Column(length
            = 3)'}
        postal_code: {maxLength: 10, minLength: 10, type: string, pattern: '^\d{5}-\d{4}$',
          description: 5+4 digit zip code, example: 94210-0000, x-field-extra-annotation: '@Column(length
            = 10)'}
        id:
          example: e6015d62-9540-4263-aad3-508ffde48a0c
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
        ownerId: {example: c33bfed6-efd0-4734-803f-dbca4407a49f, description: UUID
            of owner of the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_BY, enabled = true)', format: uuid}
        createdDate: {example: '2024-12-30T15:09:38.593-0800', description: Date of
            object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {example: ae97b45c-614e-4d83-b715-c509c8d5f6e0, description: Last
            user to access object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_BY, enabled = true)', format: uuid}
        lastAccessedDate: {example: '2024-12-30T15:09:38.593-0800', description: Timestamp
            of last access of object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_DATE, enabled = true)', format: date-time}
        lastModifiedById: {example: f45ea1f5-144a-4195-80cf-e709f8b1cb57, description: Unique
            identifier for user who last modifed the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_BY,
            enabled = true)', format: uuid}
        lastModifiedDate: {example: '2024-12-30T15:09:38.593-0800', description: Date
            of last object modification, type: string, x-field-extra-annotation: '    @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_DATE, enabled = true)', format: date-time}
      xml: {name: Address}
    ContentData:
      type: object
      description: TODO ContentData CLASS DESCRIPTION
      required: [name]
      properties:
        authorName: {type: string, example: Jimjam McYoyo}
        title: {type: string, example: Amazing Things Happened}
        subtitle: {type: string, example: Many detailed things about all the things
            that hapened.}
        contentUrl: {type: string, example: The url to the location of the full content,
          maxLength: 500, minLength: 8, x-field-extra-annotation: '@Column(length
            = 500)'}
        contentData: {type: string, example: The full content, maxLength: 500000,
          minLength: 1, x-field-extra-annotation: '@Column(length = 500000)'}
        contentType:
          type: string
          example: CodeGen
          enum: [plaintext, markdown, json, yaml, audio, video, url, binary]
        thumbnailImage: {type: string, description: The large image (optional) for
            your content, format: url, example: 'https://valkyrlabs.com/assets/VALKYR_LABS_INC_LOGO-BKV9JIdt.png'}
        largeImage: {type: string, description: The large image (optional) for your
            content, format: url, example: 'https://valkyrlabs.com/assets/VALKYR_LABS_INC_LOGO-BKV9JIdt.png'}
        category:
          type: string
          example: CodeGen
          enum: [CodeGen, DOCS, BLOG, Product, SECURITY, Event]
        status:
          type: string
          example: editing
          enum: [holding, editing, published]
        releaseDate: {type: string, format: date-time, description: the release date
            (used to automate publishing)}
        contentMedia:
          type: array
          description: media contained in or referenced by the content
          items: {$ref: '#/components/schemas/ContentMediaLink'}
        principalId: {description: the author or attibuted entity, type: string, format: uuid}
        principal: {description: the author object, $ref: '#/components/schemas/Principal'}
        id:
          example: af651d9a-d39a-4cf9-a595-f49f8c17b62e
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
        ownerId: {example: 227e8baa-aa56-4e63-a381-eb05ad481214, description: UUID
            of owner of the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_BY, enabled = true)', format: uuid}
        createdDate: {example: '2024-12-30T15:09:38.593-0800', description: Date of
            object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {example: cdc7b671-7d3e-48dd-9abe-7750a738d8f7, description: Last
            user to access object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_BY, enabled = true)', format: uuid}
        lastAccessedDate: {example: '2024-12-30T15:09:38.593-0800', description: Timestamp
            of last access of object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_DATE, enabled = true)', format: date-time}
        lastModifiedById: {example: 8d4d61a5-8c1c-4cca-a72e-f462b076557b, description: Unique
            identifier for user who last modifed the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_BY,
            enabled = true)', format: uuid}
        lastModifiedDate: {example: '2024-12-30T15:09:38.593-0800', description: Date
            of last object modification, type: string, x-field-extra-annotation: '    @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_DATE, enabled = true)', format: date-time}
      xml: {name: ContentData}
    ContentMediaLink:
      type: object
      description: link to images, videos, audio, and other content media
      required: [contentId]
      properties:
        applicationId: {type: string, format: uuid, description: used when linked
            to an Application}
        contentDataId: {type: string, format: uuid, description: used when linked
            to ContentData}
        contentUse:
          type: string
          description: specialized usage for the media object if any
          enum: [none, screenshot, selfie, portrait, promotional, informational, entertainment,
            product, support, training]
        contentType:
          type: string
          description: content type of the media object
          enum: [image, icon, video, audio, text, json, yaml, xml, markdown, spreadsheet,
            pdf]
        mediaUrl: {type: string, format: url, description: url to the media object}
        id:
          example: 4bcae14f-ebda-407f-8b0c-a56f55dfc105
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
        ownerId: {example: 2d11afd6-a493-41a1-9d62-a990109853b7, description: UUID
            of owner of the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_BY, enabled = true)', format: uuid}
        createdDate: {example: '2024-12-30T15:09:38.593-0800', description: Date of
            object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {example: beafba28-c74b-4eda-92f6-6d92e3eb6311, description: Last
            user to access object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_BY, enabled = true)', format: uuid}
        lastAccessedDate: {example: '2024-12-30T15:09:38.593-0800', description: Timestamp
            of last access of object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_DATE, enabled = true)', format: date-time}
        lastModifiedById: {example: 131b8785-fb84-4a76-bd89-c106da033d87, description: Unique
            identifier for user who last modifed the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_BY,
            enabled = true)', format: uuid}
        lastModifiedDate: {example: '2024-12-30T15:09:38.593-0800', description: Date
            of last object modification, type: string, x-field-extra-annotation: '    @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_DATE, enabled = true)', format: date-time}
    Rating:
      type: object
      description: TODO Rating CLASS DESCRIPTION
      required: [contentId]
      properties:
        targetType:
          type: string
          enum: [homepage, blog, product, none]
          description: target object for the rating and comments
        contentId: {type: string, format: uuid, description: The unique identifier
            for the content item}
        comments: {type: string, example: Your real feelings, maxLength: 100000, x-field-extra-annotation: '@Column(length
            = 100000)'}
        url: {type: string, example: The URL of the rating record is about, maxLength: 500,
          x-field-extra-annotation: '@Column(length = 500)'}
        rating: {type: integer, format: int64, minimum: 0, maximum: 10}
        id:
          example: 592d255d-af44-48fd-8f79-802dc0719f64
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
        ownerId: {example: 6be1134d-5b91-4871-adb7-1ecbd20b5130, description: UUID
            of owner of the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_BY, enabled = true)', format: uuid}
        createdDate: {example: '2024-12-30T15:09:38.593-0800', description: Date of
            object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {example: 6a000693-a1cd-46c0-a61a-dafc59c384a1, description: Last
            user to access object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_BY, enabled = true)', format: uuid}
        lastAccessedDate: {example: '2024-12-30T15:09:38.593-0800', description: Timestamp
            of last access of object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_DATE, enabled = true)', format: date-time}
        lastModifiedById: {example: 21034b49-d420-4cbe-8d99-3664090d0c1d, description: Unique
            identifier for user who last modifed the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_BY,
            enabled = true)', format: uuid}
        lastModifiedDate: {example: '2024-12-30T15:09:38.593-0800', description: Date
            of last object modification, type: string, x-field-extra-annotation: '    @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_DATE, enabled = true)', format: date-time}
      xml: {name: Rating}
    UserPreferences:
      type: object
      description: Various System User Preferences
      properties:
        preference: {type: string, description: The value of the User Preferences,
          example: darquartz}
        preferenceType:
          type: string
          description: The type of the preference
          enum: [ux-layout, ux-mode, ux-theme, measurement]
        id:
          example: 7e6020f3-a371-49a5-b59c-b9e1e2f6cbdd
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
        ownerId: {example: 8e946982-fa69-4ae0-927a-df39fa57ded2, description: UUID
            of owner of the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_BY, enabled = true)', format: uuid}
        createdDate: {example: '2024-12-30T15:09:38.593-0800', description: Date of
            object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {example: 44a603ab-9cce-4861-bd7b-0795dacb22de, description: Last
            user to access object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_BY, enabled = true)', format: uuid}
        lastAccessedDate: {example: '2024-12-30T15:09:38.594-0800', description: Timestamp
            of last access of object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_DATE, enabled = true)', format: date-time}
        lastModifiedById: {example: 7f7bb7a0-397f-4f15-a772-9c6ed559104e, description: Unique
            identifier for user who last modifed the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_BY,
            enabled = true)', format: uuid}
        lastModifiedDate: {example: '2024-12-30T15:09:38.594-0800', description: Date
            of last object modification, type: string, x-field-extra-annotation: '    @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_DATE, enabled = true)', format: date-time}
    ThorUXMeta:
      type: object
      description: Metadata for ThorUX components.
      properties:
        thoruxComponents: {type: string, description: Temporary string holder for
            config data., example: 'theme: odin, locale: en'}
        id:
          example: 4678b214-400a-4b80-8a0a-5735380bb8b8
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
        ownerId: {example: 8699e570-36af-4acb-a02e-13b454e975d3, description: UUID
            of owner of the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_BY, enabled = true)', format: uuid}
        createdDate: {example: '2024-12-30T15:09:38.594-0800', description: Date of
            object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {example: 9a242183-a252-482c-85ab-ee445f650e10, description: Last
            user to access object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_BY, enabled = true)', format: uuid}
        lastAccessedDate: {example: '2024-12-30T15:09:38.594-0800', description: Timestamp
            of last access of object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_DATE, enabled = true)', format: date-time}
        lastModifiedById: {example: 7e730025-b115-4010-8e5e-9c651b3da476, description: Unique
            identifier for user who last modifed the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_BY,
            enabled = true)', format: uuid}
        lastModifiedDate: {example: '2024-12-30T15:09:38.594-0800', description: Date
            of last object modification, type: string, x-field-extra-annotation: '    @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_DATE, enabled = true)', format: date-time}
    ThorUXComponent:
      type: object
      description: TODO ThorUXComponent CLASS DESCRIPTION
      properties:
        componentType: {type: string, description: The type of the UX component.,
          example: button}
        status:
          type: string
          description: The status of the component in the UX.
          enum: [ready, pending, disabled, hidden]
          example: ready
        settings:
          type: string
          description: The option for the component in the UX.
          enum: [opt1, opt2, opt3, opt4]
          example: opt1
        id:
          example: 29244b0a-617d-4f0c-a531-e958da44e06a
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
        ownerId: {example: ef1cda1f-89ce-4399-b967-1389c99e19e0, description: UUID
            of owner of the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_BY, enabled = true)', format: uuid}
        createdDate: {example: '2024-12-30T15:09:38.594-0800', description: Date of
            object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {example: a57cce74-5195-44e4-bfaf-f300154ae77f, description: Last
            user to access object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_BY, enabled = true)', format: uuid}
        lastAccessedDate: {example: '2024-12-30T15:09:38.594-0800', description: Timestamp
            of last access of object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_DATE, enabled = true)', format: date-time}
        lastModifiedById: {example: 0b894c30-8c0d-4163-bb10-949d4f9e68f2, description: Unique
            identifier for user who last modifed the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_BY,
            enabled = true)', format: uuid}
        lastModifiedDate: {example: '2024-12-30T15:09:38.594-0800', description: Date
            of last object modification, type: string, x-field-extra-annotation: '    @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_DATE, enabled = true)', format: date-time}
    Login:
      type: object
      description: TODO Login CLASS DESCRIPTION
      properties:
        username: {type: string, maxLength: 64, x-field-extra-annotation: '@Column(length
            = 64)'}
        password: {type: string, x-starter-secureField: true}
        description: {type: string}
        id:
          example: b17caa59-b8fb-4976-a058-e782b50dd4e8
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
        ownerId: {example: 2e65b4e9-e0aa-4acb-a38b-17c5f0ca7734, description: UUID
            of owner of the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_BY, enabled = true)', format: uuid}
        createdDate: {example: '2024-12-30T15:09:38.594-0800', description: Date of
            object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {example: 046552f0-be92-4acf-9099-c7e17b53df43, description: Last
            user to access object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_BY, enabled = true)', format: uuid}
        lastAccessedDate: {example: '2024-12-30T15:09:38.594-0800', description: Timestamp
            of last access of object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_DATE, enabled = true)', format: date-time}
        lastModifiedById: {example: a3fc7754-e3bc-4281-aa42-75b0b617a34a, description: Unique
            identifier for user who last modifed the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_BY,
            enabled = true)', format: uuid}
        lastModifiedDate: {example: '2024-12-30T15:09:38.594-0800', description: Date
            of last object modification, type: string, x-field-extra-annotation: '    @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_DATE, enabled = true)', format: date-time}
    Logout:
      type: object
      description: Logout functionality
      properties:
        description: {type: string}
        id:
          example: a99d72c9-2920-460a-859d-c993af1b9de2
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
        ownerId: {example: baae8290-b012-4775-8932-0d556dbfa06c, description: UUID
            of owner of the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_BY, enabled = true)', format: uuid}
        createdDate: {example: '2024-12-30T15:09:38.594-0800', description: Date of
            object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {example: 6e09c888-52b7-4b52-b433-c98128ec65bf, description: Last
            user to access object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_BY, enabled = true)', format: uuid}
        lastAccessedDate: {example: '2024-12-30T15:09:38.594-0800', description: Timestamp
            of last access of object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_DATE, enabled = true)', format: date-time}
        lastModifiedById: {example: d2a0d709-0912-4724-b28b-b46c6420a40b, description: Unique
            identifier for user who last modifed the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_BY,
            enabled = true)', format: uuid}
        lastModifiedDate: {example: '2024-12-30T15:09:38.594-0800', description: Date
            of last object modification, type: string, x-field-extra-annotation: '    @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_DATE, enabled = true)', format: date-time}
    PersistentLogin:
      type: object
      description: Persistent Login for Spring Security
      properties:
        username: {type: string, maxLength: 64, x-field-extra-annotation: '@Column(length
            = 64)'}
        series: {type: string, maxLength: 64, x-field-extra-annotation: '@Column(length
            = 64)'}
        token: {type: string, maxLength: 64, x-field-extra-annotation: '@Column(length
            = 64)'}
        lastUsed: {type: string, format: date-time}
        id:
          example: 76f55b7c-8ec2-4b3e-945b-55aa8dd04c4a
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
        ownerId: {example: 90a352ae-164d-45fb-a1eb-0a4d07cc5241, description: UUID
            of owner of the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_BY, enabled = true)', format: uuid}
        createdDate: {example: '2024-12-30T15:09:38.594-0800', description: Date of
            object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {example: 8757393f-45fd-455f-99b4-4790c67d897a, description: Last
            user to access object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_BY, enabled = true)', format: uuid}
        lastAccessedDate: {example: '2024-12-30T15:09:38.594-0800', description: Timestamp
            of last access of object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_DATE, enabled = true)', format: date-time}
        lastModifiedById: {example: 6c072b87-3cfa-443d-9671-87595edcac10, description: Unique
            identifier for user who last modifed the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_BY,
            enabled = true)', format: uuid}
        lastModifiedDate: {example: '2024-12-30T15:09:38.594-0800', description: Date
            of last object modification, type: string, x-field-extra-annotation: '    @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_DATE, enabled = true)', format: date-time}
      required: [username, series, token, last_used]
    Role:
      type: object
      description: A Role for a Principal in the system
      properties:
        principalId: {type: string, format: uuid}
        roleName:
          type: string
          description: the role
          enum: [ANONYMOUS, USER, STAFF, ADMIN]
          x-enum-descriptions: [Anonymous User, Authenticated User, Staff Role, Admin
              Role]
          x-enum-varnames: [ROLE_ANONYMOUS, ROLE_USER, ROLE_STAFF, ROLE_ADMIN]
          default: ANONYMOUS
        id:
          example: 371319fa-5841-4629-90e1-8efc64e1e46b
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
        ownerId: {example: d8e9498f-13a3-41db-b4b5-e9baeb7d1ed8, description: UUID
            of owner of the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_BY, enabled = true)', format: uuid}
        createdDate: {example: '2024-12-30T15:09:38.594-0800', description: Date of
            object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {example: 00221d96-f7a4-4e57-a794-a47ca5ccaf5a, description: Last
            user to access object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_BY, enabled = true)', format: uuid}
        lastAccessedDate: {example: '2024-12-30T15:09:38.594-0800', description: Timestamp
            of last access of object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_DATE, enabled = true)', format: date-time}
        lastModifiedById: {example: 43215f01-808e-4b85-a4f6-d64a7bd2a040, description: Unique
            identifier for user who last modifed the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_BY,
            enabled = true)', format: uuid}
        lastModifiedDate: {example: '2024-12-30T15:09:38.594-0800', description: Date
            of last object modification, type: string, x-field-extra-annotation: '    @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_DATE, enabled = true)', format: date-time}
    Authority:
      type: object
      description: TODO Authority CLASS DESCRIPTION
      properties:
        principalId: {type: string, format: uuid}
        username: {type: string, maxLength: 50, x-field-extra-annotation: '@Column(length
            = 50)'}
        authority: {type: string, maxLength: 50, x-field-extra-annotation: '@Column(length
            = 50)'}
        id:
          example: ba628965-3893-462a-8e76-e14471d96d85
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
        ownerId: {example: 83d9fe47-0529-46e5-826e-a4b00d78f9c3, description: UUID
            of owner of the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_BY, enabled = true)', format: uuid}
        createdDate: {example: '2024-12-30T15:09:38.594-0800', description: Date of
            object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {example: 144f38c6-8ab9-4613-9135-3fc0eadd246a, description: Last
            user to access object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_BY, enabled = true)', format: uuid}
        lastAccessedDate: {example: '2024-12-30T15:09:38.595-0800', description: Timestamp
            of last access of object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_DATE, enabled = true)', format: date-time}
        lastModifiedById: {example: b36b39fc-57ea-4899-b341-8228887709c0, description: Unique
            identifier for user who last modifed the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_BY,
            enabled = true)', format: uuid}
        lastModifiedDate: {example: '2024-12-30T15:09:38.595-0800', description: Date
            of last object modification, type: string, x-field-extra-annotation: '    @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_DATE, enabled = true)', format: date-time}
      required: [username, authority]
    AclSid:
      type: object
      description: System ID of the ACL
      properties:
        sid: {type: string, maxLength: 245, nullable: true, x-field-extra-annotation: '@Column(length
            = 245)'}
        principal: {type: string, format: uuid, nullable: true}
        id:
          example: e6d7c63a-6456-4b9a-816d-726971ad8d35
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
        ownerId: {example: b38c7782-bab2-49a8-9d8c-105d617bea2a, description: UUID
            of owner of the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_BY, enabled = true)', format: uuid}
        createdDate: {example: '2024-12-30T15:09:38.595-0800', description: Date of
            object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {example: 84ae2c4b-7c09-42e7-9a5a-85971abb5bfa, description: Last
            user to access object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_BY, enabled = true)', format: uuid}
        lastAccessedDate: {example: '2024-12-30T15:09:38.595-0800', description: Timestamp
            of last access of object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_DATE, enabled = true)', format: date-time}
        lastModifiedById: {example: c3e68d13-b181-451c-bb11-6b7cf278f759, description: Unique
            identifier for user who last modifed the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_BY,
            enabled = true)', format: uuid}
        lastModifiedDate: {example: '2024-12-30T15:09:38.595-0800', description: Date
            of last object modification, type: string, x-field-extra-annotation: '    @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_DATE, enabled = true)', format: date-time}
    AclClass:
      type: object
      description: Problematic class for ACL
      properties:
        className: {type: string, maxLength: 245, nullable: true, x-field-extra-annotation: '@Column(length
            = 245)'}
        id:
          example: a2054957-232e-4dd3-b571-45f7ea4085b5
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
        ownerId: {example: f6ca7f49-f4a6-42c9-b51b-f0dd67a4c57f, description: UUID
            of owner of the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_BY, enabled = true)', format: uuid}
        createdDate: {example: '2024-12-30T15:09:38.595-0800', description: Date of
            object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {example: 6d8a604a-04dd-4814-9dba-9bab46b65bc0, description: Last
            user to access object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_BY, enabled = true)', format: uuid}
        lastAccessedDate: {example: '2024-12-30T15:09:38.595-0800', description: Timestamp
            of last access of object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_DATE, enabled = true)', format: date-time}
        lastModifiedById: {example: 1f0dc2eb-723c-4d01-8cf6-5f1dbe2777e1, description: Unique
            identifier for user who last modifed the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_BY,
            enabled = true)', format: uuid}
        lastModifiedDate: {example: '2024-12-30T15:09:38.595-0800', description: Date
            of last object modification, type: string, x-field-extra-annotation: '    @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_DATE, enabled = true)', format: date-time}
    AclObjectIdentity:
      type: object
      description: ACL identity for an object
      properties:
        objectIdClass: {type: string, format: uuid, nullable: true}
        objectIdIdentity: {type: string, format: uuid, nullable: true}
        parentObject: {type: string, format: uuid, nullable: true}
        ownerSid: {type: string, format: uuid, nullable: true}
        entriesInheriting: {type: integer, format: int32, nullable: true}
        id:
          example: 4d67c4d8-a323-432a-a8f8-849737b7cb9c
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
        ownerId: {example: 728cf324-dbdb-427c-a625-48c2eab856e1, description: UUID
            of owner of the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_BY, enabled = true)', format: uuid}
        createdDate: {example: '2024-12-30T15:09:38.595-0800', description: Date of
            object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {example: 330f056c-287e-4fec-8173-6e2da60c657c, description: Last
            user to access object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_BY, enabled = true)', format: uuid}
        lastAccessedDate: {example: '2024-12-30T15:09:38.595-0800', description: Timestamp
            of last access of object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_DATE, enabled = true)', format: date-time}
        lastModifiedById: {example: 9527a31c-ec29-40fa-a579-558d12fd56c7, description: Unique
            identifier for user who last modifed the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_BY,
            enabled = true)', format: uuid}
        lastModifiedDate: {example: '2024-12-30T15:09:38.595-0800', description: Date
            of last object modification, type: string, x-field-extra-annotation: '    @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_DATE, enabled = true)', format: date-time}
    AclEntry:
      type: object
      description: TODO AclEntry CLASS DESCRIPTION
      properties:
        aclObjectOdentity: {type: string, format: uuid, nullable: true}
        aceOrder: {type: integer, format: int32, nullable: true}
        sid: {type: string, format: uuid, nullable: true}
        mask: {type: integer, format: int32, nullable: true}
        granting: {type: integer, format: int32, nullable: true}
        auditSuccess: {type: integer, format: int32, nullable: true}
        auditFailure: {type: integer, format: int32, nullable: true}
        id:
          example: f7a74d59-c1e0-4512-81b9-123a7fdace09
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
        ownerId: {example: 5467cc8e-4a0e-4119-b41b-12355c6446b5, description: UUID
            of owner of the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_BY, enabled = true)', format: uuid}
        createdDate: {example: '2024-12-30T15:09:38.595-0800', description: Date of
            object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {example: 5fafe120-cd5a-4c37-b75b-49c1af68f6db, description: Last
            user to access object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_BY, enabled = true)', format: uuid}
        lastAccessedDate: {example: '2024-12-30T15:09:38.595-0800', description: Timestamp
            of last access of object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_DATE, enabled = true)', format: date-time}
        lastModifiedById: {example: 243ed6b0-d140-4f82-baf7-68264547d3a4, description: Unique
            identifier for user who last modifed the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_BY,
            enabled = true)', format: uuid}
        lastModifiedDate: {example: '2024-12-30T15:09:38.595-0800', description: Date
            of last object modification, type: string, x-field-extra-annotation: '    @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_DATE, enabled = true)', format: date-time}
    IntegrationAccount:
      type: object
      description: An integration account to authenticate workflows with various systems
      properties:
        execModuleId: {type: string, format: uuid}
        accountName: {type: string, description: account name, example: 'STRIPE, Shopify,
            Gmail, X.com'}
        username: {type: string, description: account username, example: 'STRIPE,
            Shopify, Gmail, X.com'}
        password: {type: string, description: account password - encrypted, x-starter-secureField: true}
        accountId: {type: string, x-starter-secureField: true}
        status:
          type: string
          description: Integration Connection Status
          enum: [ready, closed, executed, error]
        verified: {type: boolean, default: false}
        id:
          example: 3440d9ce-d386-4eff-8160-3524a92a4b9d
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
        ownerId: {example: 3d03701b-d39b-476a-821b-9a71c11b03c7, description: UUID
            of owner of the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_BY, enabled = true)', format: uuid}
        createdDate: {example: '2024-12-30T15:09:38.595-0800', description: Date of
            object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {example: 04ae5ed6-7aa4-4a8e-a356-aa1860a4b622, description: Last
            user to access object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_BY, enabled = true)', format: uuid}
        lastAccessedDate: {example: '2024-12-30T15:09:38.595-0800', description: Timestamp
            of last access of object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_DATE, enabled = true)', format: date-time}
        lastModifiedById: {example: b650bde4-aa39-4089-9952-1ce5dbbbcd9f, description: Unique
            identifier for user who last modifed the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_BY,
            enabled = true)', format: uuid}
        lastModifiedDate: {example: '2024-12-30T15:09:38.595-0800', description: Date
            of last object modification, type: string, x-field-extra-annotation: '    @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_DATE, enabled = true)', format: date-time}
      xml: {name: Account}
    Workbook:
      type: object
      description: Sheetster Workbook Spreadsheet
      properties:
        name: {type: string, description: name of the workbook, example: My Workbook}
        sheets:
          type: array
          description: the sheets in the workbook
          items: {$ref: '#/components/schemas/Sheet'}
        formats:
          type: array
          description: the sheets in the workbook
          items: {$ref: '#/components/schemas/Format'}
        status:
          type: string
          enum: [OPEN, CLOSED, ARCHIVED, ERROR, INVALID]
          x-enum-descriptions: [Workbook is open and is actively used, Workbook is
              closed and not in use, Workbook is not being used but still valid, Workbook
              is in an error state, Workbook is invalid and will not work]
          x-enum-varnames: [WorkbookOpen, WorkbookClosed, WorkbookArchived, WorkbookError,
            WorkbookInvalid]
        id:
          example: bc6ebcbb-99f4-4fbd-9e21-a8529b394d40
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
        ownerId: {example: 1af86b42-539d-42c2-9d95-828e651aeedd, description: UUID
            of owner of the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_BY, enabled = true)', format: uuid}
        createdDate: {example: '2024-12-30T15:09:38.595-0800', description: Date of
            object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {example: 4660a33d-471a-41c1-b87b-59d7a4b612db, description: Last
            user to access object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_BY, enabled = true)', format: uuid}
        lastAccessedDate: {example: '2024-12-30T15:09:38.595-0800', description: Timestamp
            of last access of object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_DATE, enabled = true)', format: date-time}
        lastModifiedById: {example: 719619ee-9b21-404f-8329-96f90a82844e, description: Unique
            identifier for user who last modifed the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_BY,
            enabled = true)', format: uuid}
        lastModifiedDate: {example: '2024-12-30T15:09:38.595-0800', description: Date
            of last object modification, type: string, x-field-extra-annotation: '    @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_DATE, enabled = true)', format: date-time}
      xml: {name: Workbook}
    Sheet:
      type: object
      description: Sheetster sheet
      properties:
        workbookId: {type: string, format: uuid, description: the workbook containing
            this sheet, example: 3fa85f64-5717-4562-b3fc-2c963f66afa7}
        name: {type: string}
        cells:
          type: array
          items: {$ref: '#/components/schemas/Cell'}
        rows:
          type: array
          items: {$ref: '#/components/schemas/SheetRow'}
        cols:
          type: array
          items: {$ref: '#/components/schemas/SheetColumn'}
        namedRanges:
          type: array
          items: {$ref: '#/components/schemas/NamedRange'}
        mergeRanges:
          type: array
          items: {$ref: '#/components/schemas/MergeRange'}
        blankRanges:
          type: array
          items: {$ref: '#/components/schemas/BlankRange'}
        charts:
          type: array
          items: {$ref: '#/components/schemas/Chart'}
        pivotTables:
          type: array
          items: {$ref: '#/components/schemas/PivotTable'}
        id:
          example: 0cc6a9db-15b5-49c0-afe3-277e516bfbc7
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
        ownerId: {example: 76f2c2af-ced1-4550-b2be-1f45092f3217, description: UUID
            of owner of the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_BY, enabled = true)', format: uuid}
        createdDate: {example: '2024-12-30T15:09:38.595-0800', description: Date of
            object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {example: 0cc69366-a534-434d-8c0f-74379bf79706, description: Last
            user to access object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_BY, enabled = true)', format: uuid}
        lastAccessedDate: {example: '2024-12-30T15:09:38.595-0800', description: Timestamp
            of last access of object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_DATE, enabled = true)', format: date-time}
        lastModifiedById: {example: 308fadc8-e7eb-4fc2-a4e1-807c010b2365, description: Unique
            identifier for user who last modifed the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_BY,
            enabled = true)', format: uuid}
        lastModifiedDate: {example: '2024-12-30T15:09:38.595-0800', description: Date
            of last object modification, type: string, x-field-extra-annotation: '    @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_DATE, enabled = true)', format: date-time}
      xml: {name: Sheet}
    Cell:
      type: object
      description: Sheetster spreadsheet cell
      properties:
        sheetId: {type: string, format: uuid, description: the sheet containing this
            cell, example: 3fa85f64-5717-4562-b3fc-2c963f66afa6}
        comment: {type: string, description: Cell comment (if any)}
        hyperlink: {type: string, description: 'If this cell is a hyperlink, store
            the target URL here'}
        sheetRowId: {type: string, format: uuid}
        row: {$ref: '#/components/schemas/SheetRow'}
        sheetColumnId: {type: string, format: uuid}
        column: {$ref: '#/components/schemas/SheetColumn'}
        stringValue: {type: string}
        numberValue: {type: number, format: double}
        formula: {description: if this cell contains a formula calculated value, $ref: '#/components/schemas/Formula'}
        format: {$ref: '#/components/schemas/Format'}
        id:
          example: 825d5768-4409-43c6-add1-76782207495c
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
        ownerId: {example: 0c6e37b4-706a-40fd-a128-18e2910a5335, description: UUID
            of owner of the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_BY, enabled = true)', format: uuid}
        createdDate: {example: '2024-12-30T15:09:38.595-0800', description: Date of
            object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {example: 5e6b59f9-3c20-47fe-bcb2-cd971299cfea, description: Last
            user to access object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_BY, enabled = true)', format: uuid}
        lastAccessedDate: {example: '2024-12-30T15:09:38.596-0800', description: Timestamp
            of last access of object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_DATE, enabled = true)', format: date-time}
        lastModifiedById: {example: 0f626ae0-0527-4780-b003-79ac2d3b172a, description: Unique
            identifier for user who last modifed the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_BY,
            enabled = true)', format: uuid}
        lastModifiedDate: {example: '2024-12-30T15:09:38.596-0800', description: Date
            of last object modification, type: string, x-field-extra-annotation: '    @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_DATE, enabled = true)', format: date-time}
      xml: {name: Cell}
    SheetRow:
      type: object
      description: Sheetster Spreadsheet Row
      properties:
        sheetId: {type: string, format: uuid, description: the sheet containing this
            row, example: 3fa85f64-5717-4562-b3fc-2c963f66afa6}
        rowIndex: {type: integer}
        hidden: {type: boolean}
        collapsed: {type: boolean}
        outlineLevel: {type: integer, description: For nested grouping}
        cells:
          type: array
          items: {$ref: '#/components/schemas/Cell'}
        id:
          example: a47cbdf6-7087-4584-9a6e-e690aa83cc33
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
        ownerId: {example: bff931e7-749e-47d8-b3ad-57f05d97e8ae, description: UUID
            of owner of the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_BY, enabled = true)', format: uuid}
        createdDate: {example: '2024-12-30T15:09:38.596-0800', description: Date of
            object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {example: b60d5609-3b94-4ffb-b1df-781c79b8bf6b, description: Last
            user to access object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_BY, enabled = true)', format: uuid}
        lastAccessedDate: {example: '2024-12-30T15:09:38.596-0800', description: Timestamp
            of last access of object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_DATE, enabled = true)', format: date-time}
        lastModifiedById: {example: 0bea9d4b-34c8-44f9-98d6-815d40c7d805, description: Unique
            identifier for user who last modifed the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_BY,
            enabled = true)', format: uuid}
        lastModifiedDate: {example: '2024-12-30T15:09:38.596-0800', description: Date
            of last object modification, type: string, x-field-extra-annotation: '    @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_DATE, enabled = true)', format: date-time}
    SheetColumn:
      type: object
      description: Sheetster Spreadsheet Column
      properties:
        sheetId: {type: string, format: uuid, description: the sheet containing this
            column, example: 3fa85f64-5717-4562-b3fc-2c963f66afa6}
        colIndex: {type: integer}
        hidden: {type: boolean}
        collapsed: {type: boolean}
        outlineLevel: {type: integer, description: For nested grouping}
        cells:
          type: array
          items: {$ref: '#/components/schemas/Cell'}
        id:
          example: 3b27856c-af35-4ace-a1f5-adb5044804aa
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
        ownerId: {example: 83c88d68-2e60-4141-babd-ac94c1c7cc8e, description: UUID
            of owner of the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_BY, enabled = true)', format: uuid}
        createdDate: {example: '2024-12-30T15:09:38.596-0800', description: Date of
            object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {example: ccdea6ba-4ffa-4713-beb8-cb1a8380e1ff, description: Last
            user to access object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_BY, enabled = true)', format: uuid}
        lastAccessedDate: {example: '2024-12-30T15:09:38.596-0800', description: Timestamp
            of last access of object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_DATE, enabled = true)', format: date-time}
        lastModifiedById: {example: 44b37449-badb-4363-8322-49d80ec24b60, description: Unique
            identifier for user who last modifed the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_BY,
            enabled = true)', format: uuid}
        lastModifiedDate: {example: '2024-12-30T15:09:38.596-0800', description: Date
            of last object modification, type: string, x-field-extra-annotation: '    @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_DATE, enabled = true)', format: date-time}
    NamedRange:
      type: object
      description: Sheetster Named CellRange
      properties:
        sheetId: {type: string, format: uuid, description: the sheet containing this
            named range, example: 3fa85f64-5717-4562-b3fc-2c963f66afa6}
        name: {type: string}
        startCell: {$ref: '#/components/schemas/Cell'}
        endCell: {$ref: '#/components/schemas/Cell'}
        id:
          example: f0d1b5d7-b110-40fe-b997-9aa8a779327c
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
        ownerId: {example: 85d5e191-cfa8-4e01-bb17-2dee53227e28, description: UUID
            of owner of the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_BY, enabled = true)', format: uuid}
        createdDate: {example: '2024-12-30T15:09:38.596-0800', description: Date of
            object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {example: 99d33b93-909d-414f-aad0-49853aee8174, description: Last
            user to access object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_BY, enabled = true)', format: uuid}
        lastAccessedDate: {example: '2024-12-30T15:09:38.596-0800', description: Timestamp
            of last access of object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_DATE, enabled = true)', format: date-time}
        lastModifiedById: {example: 44824840-6ab8-42c3-9841-2012e957f68e, description: Unique
            identifier for user who last modifed the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_BY,
            enabled = true)', format: uuid}
        lastModifiedDate: {example: '2024-12-30T15:09:38.596-0800', description: Date
            of last object modification, type: string, x-field-extra-annotation: '    @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_DATE, enabled = true)', format: date-time}
    MergeRange:
      type: object
      description: Sheetster Merged CellRange
      properties:
        sheetId: {type: string, format: uuid, description: the sheet containing this
            merged range, example: 3fa85f64-5717-4562-b3fc-2c963f66afa6}
        startCell: {$ref: '#/components/schemas/Cell'}
        endCell: {$ref: '#/components/schemas/Cell'}
        id:
          example: 2b064497-c853-4e9c-a5e3-181c35321d91
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
        ownerId: {example: a0af0a76-5654-4f41-8f19-bf4cfd02dd73, description: UUID
            of owner of the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_BY, enabled = true)', format: uuid}
        createdDate: {example: '2024-12-30T15:09:38.596-0800', description: Date of
            object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {example: f67addf3-0edb-407c-8802-a2d2137451b5, description: Last
            user to access object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_BY, enabled = true)', format: uuid}
        lastAccessedDate: {example: '2024-12-30T15:09:38.596-0800', description: Timestamp
            of last access of object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_DATE, enabled = true)', format: date-time}
        lastModifiedById: {example: 069374ca-49f1-49f7-9f71-9640a46e6a1a, description: Unique
            identifier for user who last modifed the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_BY,
            enabled = true)', format: uuid}
        lastModifiedDate: {example: '2024-12-30T15:09:38.596-0800', description: Date
            of last object modification, type: string, x-field-extra-annotation: '    @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_DATE, enabled = true)', format: date-time}
    BlankRange:
      type: object
      properties:
        sheetId: {type: string, format: uuid, description: the sheet containing this
            blank range, example: 3fa85f64-5717-4562-b3fc-2c963f66afa6}
        startCell: {$ref: '#/components/schemas/Cell'}
        endCell: {$ref: '#/components/schemas/Cell'}
        id:
          example: 00b23f6b-0111-48dd-815e-0acc2f7e456f
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
        ownerId: {example: efd13014-5c43-4c34-b161-f6d097a727d2, description: UUID
            of owner of the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_BY, enabled = true)', format: uuid}
        createdDate: {example: '2024-12-30T15:09:38.596-0800', description: Date of
            object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {example: f955dc3f-817b-4f77-a0d6-68a4c47bd338, description: Last
            user to access object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_BY, enabled = true)', format: uuid}
        lastAccessedDate: {example: '2024-12-30T15:09:38.596-0800', description: Timestamp
            of last access of object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_DATE, enabled = true)', format: date-time}
        lastModifiedById: {example: 8698b578-2fec-4971-a508-403fdd2f0895, description: Unique
            identifier for user who last modifed the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_BY,
            enabled = true)', format: uuid}
        lastModifiedDate: {example: '2024-12-30T15:09:38.596-0800', description: Date
            of last object modification, type: string, x-field-extra-annotation: '    @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_DATE, enabled = true)', format: date-time}
    Formula:
      type: object
      description: Sheetster Formula
      properties:
        workbookId: {type: string, format: uuid, description: the sheet where this
            formula will display, example: 3fa85f64-5717-4562-b3fc-2c963f66afa7}
        sheetId: {type: string, format: uuid, description: the sheet where this formula
            will display, example: 3fa85f64-5717-4562-b3fc-2c963f66afa6}
        expression: {type: string, description: the human readable formula string,
          example: =sum(a1+b1)}
        ptgRefs:
          description: the cell references in this formula
          type: array
          items: {$ref: '#/components/schemas/PtgRef'}
        calculatingPtgs:
          type: array
          description: the calculations in this formula
          items: {$ref: '#/components/schemas/Ptg'}
        id:
          example: 7fa87894-5cf6-4d52-ba8f-d74e2669dd10
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
        ownerId: {example: fdab9c7f-c575-46d0-9ad9-7ee6c297f842, description: UUID
            of owner of the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_BY, enabled = true)', format: uuid}
        createdDate: {example: '2024-12-30T15:09:38.596-0800', description: Date of
            object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {example: f8ead157-3dfa-4fd7-9fb7-93d7f275616e, description: Last
            user to access object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_BY, enabled = true)', format: uuid}
        lastAccessedDate: {example: '2024-12-30T15:09:38.596-0800', description: Timestamp
            of last access of object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_DATE, enabled = true)', format: date-time}
        lastModifiedById: {example: 1f481c7b-ecb7-4bd7-8cd7-b2a04eae4436, description: Unique
            identifier for user who last modifed the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_BY,
            enabled = true)', format: uuid}
        lastModifiedDate: {example: '2024-12-30T15:09:38.596-0800', description: Date
            of last object modification, type: string, x-field-extra-annotation: '    @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_DATE, enabled = true)', format: date-time}
    PtgRef:
      type: object
      description: Sheetster Formula Reference
      properties:
        sheetId: {type: string, format: uuid}
        formulaId: {type: string}
        reference: {type: string}
        type:
          type: string
          enum: [PtgAdd, PtgSub, PtgMul, PtgDiv]
          x-enum-descriptions: [Addition operation, Subtraction operation, Multiplication
              operation, Division operation]
          x-enum-varnames: [ptgAdd, ptgSub, ptgMul, ptgDiv]
        id:
          example: 44122440-4475-4308-b8af-207528b70a42
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
        ownerId: {example: c36dde4a-cc8c-40e1-ad3e-b92e4734d459, description: UUID
            of owner of the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_BY, enabled = true)', format: uuid}
        createdDate: {example: '2024-12-30T15:09:38.596-0800', description: Date of
            object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {example: a575ace6-c83d-4ecb-9895-0a4d7da6293b, description: Last
            user to access object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_BY, enabled = true)', format: uuid}
        lastAccessedDate: {example: '2024-12-30T15:09:38.596-0800', description: Timestamp
            of last access of object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_DATE, enabled = true)', format: date-time}
        lastModifiedById: {example: 621fe119-1cf4-4f18-9b58-82b450e616c3, description: Unique
            identifier for user who last modifed the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_BY,
            enabled = true)', format: uuid}
        lastModifiedDate: {example: '2024-12-30T15:09:38.597-0800', description: Date
            of last object modification, type: string, x-field-extra-annotation: '    @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_DATE, enabled = true)', format: date-time}
    Ptg:
      type: object
      description: Sheetster Formula Function Reference
      properties:
        sheetId: {type: string, format: uuid}
        formulaId: {type: string}
        stringValue: {type: string}
        numberValue: {type: number, format: double}
        type:
          type: string
          enum: [PtgInt, PtgStr, PtgAttr, PtgFunc, PtgFuncVar, PtgName, PtgRef, PtgArea]
          x-enum-descriptions: [Integer constant in formula, String constant in formula,
            Attribute specifying formula behavior, Function reference in formula,
            Variable function reference in formula, Named reference in formula, Cell
              reference in formula, Area (range) reference in formula]
          x-enum-varnames: [ptgInt, ptgStr, ptgAttr, ptgFunc, ptgFuncVar, ptgName,
            ptgRef, ptgArea]
        id:
          example: 901cc7b7-3a4e-4944-bc56-09c4d693fa98
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
        ownerId: {example: 1a03eecf-774e-4c7b-af87-efa46d12b817, description: UUID
            of owner of the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_BY, enabled = true)', format: uuid}
        createdDate: {example: '2024-12-30T15:09:38.597-0800', description: Date of
            object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {example: e6791a54-f0af-4919-a3bf-29b64ffa97bc, description: Last
            user to access object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_BY, enabled = true)', format: uuid}
        lastAccessedDate: {example: '2024-12-30T15:09:38.597-0800', description: Timestamp
            of last access of object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_DATE, enabled = true)', format: date-time}
        lastModifiedById: {example: f8f74218-5d8a-48a0-9eec-64107054da8b, description: Unique
            identifier for user who last modifed the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_BY,
            enabled = true)', format: uuid}
        lastModifiedDate: {example: '2024-12-30T15:09:38.597-0800', description: Date
            of last object modification, type: string, x-field-extra-annotation: '    @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_DATE, enabled = true)', format: date-time}
    PivotTable:
      type: object
      description: Sheetster PivotTable
      properties:
        sheetId: {type: string, format: uuid}
        sourceRange: {$ref: '#/components/schemas/NamedRange'}
        dataRange: {$ref: '#/components/schemas/NamedRange'}
        id:
          example: fa5ae767-65a6-40f9-8b19-5c12e14761d3
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
        ownerId: {example: 2c71407d-ed06-4091-b63a-9724c208dbae, description: UUID
            of owner of the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_BY, enabled = true)', format: uuid}
        createdDate: {example: '2024-12-30T15:09:38.597-0800', description: Date of
            object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {example: 00248b76-2563-4d7e-af91-3344a8432626, description: Last
            user to access object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_BY, enabled = true)', format: uuid}
        lastAccessedDate: {example: '2024-12-30T15:09:38.597-0800', description: Timestamp
            of last access of object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_DATE, enabled = true)', format: date-time}
        lastModifiedById: {example: a5ba3e88-4dec-42b2-98c3-7f90b7e12426, description: Unique
            identifier for user who last modifed the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_BY,
            enabled = true)', format: uuid}
        lastModifiedDate: {example: '2024-12-30T15:09:38.597-0800', description: Date
            of last object modification, type: string, x-field-extra-annotation: '    @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_DATE, enabled = true)', format: date-time}
    Format:
      type: object
      description: Sheetster Formatting Object
      properties:
        workbookId: {type: string, format: uuid, description: the workbook containing
            this format, example: 3fa85f64-5717-4562-b3fc-2c963f66afa7}
        fontWeight:
          type: integer
          enum: [200, 400, 700]
          x-enum-descriptions: [Light font weight, Regular font weight, Bold font
              weight]
          x-enum-varnames: [fontWeightLight, fontWeightRegular, fontWeightBold]
        fontSize: {type: integer, example: 20}
        fontFace: {type: string, example: Arial}
        underline:
          type: integer
          enum: [0, 1, 2, 21, 22]
          x-enum-descriptions: [No underline, Single underline, Double underline,
            Single accounting underline, Double accounting underline]
          x-enum-varnames: [underlineNone, underlineSingle, underlineDouble, underlineSingleAccounting,
            underlineDoubleAccounting]
        color:
          type: string
          enum: [Black, White, Red, BrightGreen, Blue, Yellow, Pink, Turquoise, DarkRed,
            Orange, DarkYellow, Green, Teal, LightBlue, Violet, Gray80]
          x-enum-descriptions: [Black color, White color, Red color, Bright green
              color, Blue color, Yellow color, Pink color, Turquoise color, Dark red
              color, Orange color, Dark yellow color, Green color, Teal color, Light
              blue color, Violet color, 80% gray color]
          x-enum-varnames: [colorBlack, colorWhite, colorRed, colorBrightGreen, colorBlue,
            colorYellow, colorPink, colorTurquoise, colorDarkRed, colorOrange, colorDarkYellow,
            colorGreen, colorTeal, colorLightBlue, colorViolet, colorGray80]
        alignment-horizontal:
          type: string
          enum: [Left, Center, Right, Fill, Justify, CenterAcrossSelection]
          x-enum-descriptions: [Left alignment, Center alignment, Right alignment,
            Fill alignment, Justified alignment, Center across selected cells]
          x-enum-varnames: [alignLeft, alignCenter, alignRight, alignFill, alignJustify,
            alignCenterAcrossSelection]
        alignment-vertical:
          type: string
          enum: [Top, Middle, Bottom, Justify]
          x-enum-descriptions: [Align to top, Align to middle, Align to bottom, Justified
              alignment]
          x-enum-varnames: [alignTop, alignMiddle, alignBottom, alignJustify]
        pattern:
          type: integer
          enum: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
          x-enum-descriptions: [No pattern, Filled pattern, Light fill pattern, Medium
              fill pattern, Heavy fill pattern, Horizontal stripes, Vertical stripes,
            Diagonal stripes, Diagonal stripes (alternative), Checkerboard pattern]
          x-enum-varnames: [patternNone, patternFilled, patternLightFill, patternMediumFill,
            patternHeavyFill, patternHorizontalStripes, patternVerticalStripes, patternDiagonalStripes,
            patternDiagonalStripesAlt, patternCheckerboard]
        border-left: {$ref: '#/components/schemas/Border'}
        border-right: {$ref: '#/components/schemas/Border'}
        border-top: {$ref: '#/components/schemas/Border'}
        border-bottom: {$ref: '#/components/schemas/Border'}
        id:
          example: a2de619e-6d5e-44a3-a7aa-4be5c8309d8d
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
        ownerId: {example: 09d5146f-29d3-4e14-8055-32004ef4e4dc, description: UUID
            of owner of the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_BY, enabled = true)', format: uuid}
        createdDate: {example: '2024-12-30T15:09:38.597-0800', description: Date of
            object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {example: 2ae775d3-d9b1-42ed-989c-9811dde2f2a5, description: Last
            user to access object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_BY, enabled = true)', format: uuid}
        lastAccessedDate: {example: '2024-12-30T15:09:38.597-0800', description: Timestamp
            of last access of object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_DATE, enabled = true)', format: date-time}
        lastModifiedById: {example: d5633a45-d08c-41c4-a8fe-4a335be9921b, description: Unique
            identifier for user who last modifed the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_BY,
            enabled = true)', format: uuid}
        lastModifiedDate: {example: '2024-12-30T15:09:38.597-0800', description: Date
            of last object modification, type: string, x-field-extra-annotation: '    @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_DATE, enabled = true)', format: date-time}
    Border:
      type: object
      description: Sheetster Formatting Border
      properties:
        formatId: {type: string, format: uuid}
        style:
          type: string
          enum: [None, Thin, Medium, Dashed, Dotted, Thick, Double, Hair, MediumDashed,
            DashDot, MediumDashDot, DashDotDot, MediumDashDotDot, SlantedDashDot]
          x-enum-descriptions: [No border, Thin border, Medium border, Dashed border,
            Dotted border, Thick border, Double border, Hairline border, Medium dashed
              border, Dash-dot border, Medium dash-dot border, Dash-dot-dot border,
            Medium dash-dot-dot border, Slanted dash-dot-dot border]
          x-enum-varnames: [borderNone, borderThin, borderMedium, borderDashed, borderDotted,
            borderThick, borderDouble, borderHair, borderMediumDashed, borderDashDot,
            borderMediumDashDot, borderDashDotDot, borderMediumDashDotDot, borderSlantedDashDot]
        color:
          type: string
          enum: [Black, Red, Blue, Yellow, Green, Teal, Gray50]
          x-enum-descriptions: [Black color, Red color, Blue color, Yellow color,
            Green color, Teal color, 50% gray color]
          x-enum-varnames: [colorBlack, colorRed, colorBlue, colorYellow, colorGreen,
            colorTeal, colorGray50]
        id:
          example: 2203e7d0-1e8e-4665-a8f7-76e3c8840852
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
        ownerId: {example: ab4bdb13-6369-45c2-8947-121b670d9f54, description: UUID
            of owner of the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_BY, enabled = true)', format: uuid}
        createdDate: {example: '2024-12-30T15:09:38.597-0800', description: Date of
            object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {example: f56878e4-2b61-4de6-820d-d14b168ba158, description: Last
            user to access object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_BY, enabled = true)', format: uuid}
        lastAccessedDate: {example: '2024-12-30T15:09:38.597-0800', description: Timestamp
            of last access of object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_DATE, enabled = true)', format: date-time}
        lastModifiedById: {example: a6ac4d58-04a6-498d-96d2-7467939539a0, description: Unique
            identifier for user who last modifed the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_BY,
            enabled = true)', format: uuid}
        lastModifiedDate: {example: '2024-12-30T15:09:38.597-0800', description: Date
            of last object modification, type: string, x-field-extra-annotation: '    @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_DATE, enabled = true)', format: date-time}
    Chart:
      type: object
      description: A spreadsheet chart that can be mapped to/from an OpenXLS ChartHandle.
      properties:
        sheetId: {type: string, format: uuid, description: The UUID of the sheet containing
            this chart.}
        name: {type: string, description: Internal name of the chart (like ChartHandle.getChartName()).,
          example: SalesPerformanceChart}
        chartType:
          type: string
          description: The type of chart, corresponding to ChartHandle chart type
            in OpenXLS.
          enum: [Area, Bar, Column, Line, Pie, Scatter, Radar, Doughnut, Stock]
        title: {type: string, description: The main title displayed on the chart.,
          example: Monthly Sales Performance}
        axisLabelX: {type: string, description: Label for the X axis (if applicable).,
          example: Months}
        axisLabelY: {type: string, description: Label for the Y axis (if applicable).,
          example: Revenue (USD)}
        categoryRange: {type: string, description: 'Cell range for the category (X)
            axis labels. Matches e.g. "Sheet1!A2:A12"', example: 'Sheet1!A2:A12'}
        series:
          type: array
          description: Data series definitions for this chart.
          items: {$ref: '#/components/schemas/ChartSeries'}
        embedded: {type: boolean, description: Whether chart is embedded in the sheet
            or is a separate chart sheet., default: true}
        anchorCell: {type: string, description: Top-left cell position where the chart
            is anchored if embedded., example: B2}
        anchorOffsetX: {type: integer, description: Optional offset in pixels from
            the anchor cell horizontally., example: 5}
        anchorOffsetY: {type: integer, description: Optional offset in pixels from
            the anchor cell vertically., example: 10}
        width: {type: integer, description: Width of the chart in pixels when embedded.,
          example: 400}
        height: {type: integer, description: Height of the chart in pixels when embedded.,
          example: 300}
        id:
          example: 07ed66a8-7068-4e1d-a456-9c82ef0979d9
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
        ownerId: {example: ea3b2af7-75be-4a31-bbd7-562636fcebec, description: UUID
            of owner of the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_BY, enabled = true)', format: uuid}
        createdDate: {example: '2024-12-30T15:09:38.597-0800', description: Date of
            object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {example: 13813030-68f0-430f-b350-756c52dcf26b, description: Last
            user to access object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_BY, enabled = true)', format: uuid}
        lastAccessedDate: {example: '2024-12-30T15:09:38.597-0800', description: Timestamp
            of last access of object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_DATE, enabled = true)', format: date-time}
        lastModifiedById: {example: e54344b9-9e4d-4704-84b3-8c14f1d8e334, description: Unique
            identifier for user who last modifed the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_BY,
            enabled = true)', format: uuid}
        lastModifiedDate: {example: '2024-12-30T15:09:38.597-0800', description: Date
            of last object modification, type: string, x-field-extra-annotation: '    @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_DATE, enabled = true)', format: date-time}
    ChartSeries:
      type: object
      description: Represents one data series in the chart.
      properties:
        chartId: {type: string, format: uuid}
        name: {type: string, description: Name or label of the series., example: Product
            A}
        valuesRange: {type: string, description: The cell range for the data (y-values)
            in this series., example: 'Sheet1!B2:B12'}
        color: {type: string, description: Optional color or style hint for the series.,
          example: '#ff9900'}
        markerStyle: {type: string, description: 'For line/scatter charts, the style
            of the data markers.', example: Circle}
        showDataLabels: {type: boolean, description: Whether to display data labels
            on this series., default: false}
        id:
          example: 21c946f3-3ef9-448d-801d-8031448b2561
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
        ownerId: {example: c9236fa0-71d4-4642-8c51-7dc83714613b, description: UUID
            of owner of the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_BY, enabled = true)', format: uuid}
        createdDate: {example: '2024-12-30T15:09:38.597-0800', description: Date of
            object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {example: 3364f048-80ed-4d2f-9638-c9ad111f68d7, description: Last
            user to access object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_BY, enabled = true)', format: uuid}
        lastAccessedDate: {example: '2024-12-30T15:09:38.597-0800', description: Timestamp
            of last access of object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_DATE, enabled = true)', format: date-time}
        lastModifiedById: {example: fe5ebabb-7400-4180-838d-3d630669a983, description: Unique
            identifier for user who last modifed the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_BY,
            enabled = true)', format: uuid}
        lastModifiedDate: {example: '2024-12-30T15:09:38.597-0800', description: Date
            of last object modification, type: string, x-field-extra-annotation: '    @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_DATE, enabled = true)', format: date-time}
    MediaObject:
      type: object
      description: Sheetster Embedded Media Object
      properties:
        sheetId: {type: string, format: uuid}
        type:
          type: string
          enum: [Image, Audio, Video, Shape]
          x-enum-descriptions: [Image media type, Audio media type, Video media type,
            Shape media type]
          x-enum-varnames: [mediaImage, mediaAudio, mediaVideo, mediaShape]
        url: {type: string}
        position:-row: {type: integer}
        position-col: {type: integer}
        id:
          example: 0b9f9303-c285-4905-82ee-c4d544276514
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
        ownerId: {example: d2b2a1a1-c15d-4733-9efd-2f07f0ffbbe1, description: UUID
            of owner of the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_BY, enabled = true)', format: uuid}
        createdDate: {example: '2024-12-30T15:09:38.597-0800', description: Date of
            object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {example: ccbae31b-44fc-4d7d-bd68-fcd9a3e7d434, description: Last
            user to access object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_BY, enabled = true)', format: uuid}
        lastAccessedDate: {example: '2024-12-30T15:09:38.597-0800', description: Timestamp
            of last access of object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_DATE, enabled = true)', format: date-time}
        lastModifiedById: {example: 7d547ec3-3696-4794-8db2-a550b90a9e22, description: Unique
            identifier for user who last modifed the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_BY,
            enabled = true)', format: uuid}
        lastModifiedDate: {example: '2024-12-30T15:09:38.597-0800', description: Date
            of last object modification, type: string, x-field-extra-annotation: '    @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_DATE, enabled = true)', format: date-time}
    Customer:
      description: Represents a customer entity for CRM.
      properties:
        customerId: {type: string, format: uuid, description: Associated customer
            Principal ID.}
        customer: {$ref: '#/components/schemas/Principal'}
        status:
          type: string
          enum: [active, inactive, prospect]
          description: Status of the customer.
        role:
          type: string
          enum: [ceo, management, procurement, technical]
          description: Role of the contact person within the customer account (e.g.,
            CEO, Procurement, Technical Lead).
        id:
          example: f743e80c-42cf-407f-abe5-bb66138b6021
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
        ownerId: {example: c10de482-cce7-479e-9f1b-6d5a02dee55b, description: UUID
            of owner of the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_BY, enabled = true)', format: uuid}
        createdDate: {example: '2024-12-30T15:09:38.597-0800', description: Date of
            object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {example: f57ce2af-071b-48c4-97bc-a34dff9a9707, description: Last
            user to access object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_BY, enabled = true)', format: uuid}
        lastAccessedDate: {example: '2024-12-30T15:09:38.597-0800', description: Timestamp
            of last access of object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_DATE, enabled = true)', format: date-time}
        lastModifiedById: {example: 72cca1af-877f-40b4-8800-2a23e80a943d, description: Unique
            identifier for user who last modifed the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_BY,
            enabled = true)', format: uuid}
        lastModifiedDate: {example: '2024-12-30T15:09:38.597-0800', description: Date
            of last object modification, type: string, x-field-extra-annotation: '    @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_DATE, enabled = true)', format: date-time}
      required: [customerId]
    Opportunity:
      type: object
      description: Represents a sales opportunity related to a customer.
      properties:
        customerId: {type: string, format: uuid, description: The customer associated
            with the opportunity.}
        customer: {$ref: '#/components/schemas/Customer'}
        description: {type: string, description: Description of the opportunity.}
        totalValue: {type: number, format: double, description: Expected total value
            of the opportunity.}
        currentStatus:
          type: string
          enum: [won, open, lost, inactive, revive, legal, blocked]
          description: Status of the opportunity.
        estimatedCloseDate: {type: string, format: date-time, description: Estimated
            closing date for the opportunity.}
        id:
          example: a00a0e06-1f68-41f0-9a85-496a5b08710e
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
        ownerId: {example: 25aed47e-4405-4410-8a7d-fd825e7445de, description: UUID
            of owner of the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_BY, enabled = true)', format: uuid}
        createdDate: {example: '2024-12-30T15:09:38.597-0800', description: Date of
            object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {example: e8af729a-7666-4630-a710-1bfa955689f1, description: Last
            user to access object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_BY, enabled = true)', format: uuid}
        lastAccessedDate: {example: '2024-12-30T15:09:38.597-0800', description: Timestamp
            of last access of object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_DATE, enabled = true)', format: date-time}
        lastModifiedById: {example: 2313f9d7-f038-4e26-a9ec-b8f4b66357c2, description: Unique
            identifier for user who last modifed the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_BY,
            enabled = true)', format: uuid}
        lastModifiedDate: {example: '2024-12-30T15:09:38.597-0800', description: Date
            of last object modification, type: string, x-field-extra-annotation: '    @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_DATE, enabled = true)', format: date-time}
      required: [customerId, description, status]
    SalesActivity:
      type: object
      description: Represents a sales activity or engagement related to an opportunity.
      properties:
        opportunityId: {type: string, format: uuid, description: The associated opportunity.}
        type:
          type: string
          enum: [call, meeting, email, follow-up]
          description: Type of the sales activity.
        details: {type: string, description: Details about the activity.}
        activityDate: {type: string, format: date-time, description: Date and time
            of the activity.}
        performedBy: {type: string, format: uuid, description: The user who performed
            the activity.}
        id:
          example: a813d01b-2f90-4c21-a9de-aac330306cb5
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
        ownerId: {example: 939628f0-3393-42e0-959d-02b89bf41ce1, description: UUID
            of owner of the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_BY, enabled = true)', format: uuid}
        createdDate: {example: '2024-12-30T15:09:38.598-0800', description: Date of
            object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {example: 577ac378-19f6-4df7-ba06-600df75c7f3f, description: Last
            user to access object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_BY, enabled = true)', format: uuid}
        lastAccessedDate: {example: '2024-12-30T15:09:38.598-0800', description: Timestamp
            of last access of object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_DATE, enabled = true)', format: date-time}
        lastModifiedById: {example: 42b374a7-c56a-4450-ac68-792f5147eab6, description: Unique
            identifier for user who last modifed the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_BY,
            enabled = true)', format: uuid}
        lastModifiedDate: {example: '2024-12-30T15:09:38.598-0800', description: Date
            of last object modification, type: string, x-field-extra-annotation: '    @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_DATE, enabled = true)', format: date-time}
      required: [opportunityId, type, activityDate, performedBy]
    SalesPipeline:
      type: object
      description: Represents the stages in a sales pipeline.
      properties:
        name:
          type: string
          enum: [lead, qualification, proposal, negotiation, closed]
          description: Name of the sales stage (e.g., Lead, Qualification, Proposal,
            Negotiation, Closed).
        sequenceOrder: {type: integer, description: The order in which the stages
            are followed in the sales process.}
        id:
          example: 2ea91c90-17da-45e4-b210-ab0b59faae51
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
        ownerId: {example: 808d0486-965f-4058-b2b9-56389c42154d, description: UUID
            of owner of the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_BY, enabled = true)', format: uuid}
        createdDate: {example: '2024-12-30T15:09:38.598-0800', description: Date of
            object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {example: e37ee03b-5915-4971-9969-4cbb477a7f50, description: Last
            user to access object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_BY, enabled = true)', format: uuid}
        lastAccessedDate: {example: '2024-12-30T15:09:38.598-0800', description: Timestamp
            of last access of object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_DATE, enabled = true)', format: date-time}
        lastModifiedById: {example: 5ec2363c-a883-49a1-aa3f-39b593b73a1d, description: Unique
            identifier for user who last modifed the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_BY,
            enabled = true)', format: uuid}
        lastModifiedDate: {example: '2024-12-30T15:09:38.598-0800', description: Date
            of last object modification, type: string, x-field-extra-annotation: '    @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_DATE, enabled = true)', format: date-time}
      required: [name, order]
    Invoice:
      type: object
      description: Represents an invoice sent to a customer.
      properties:
        invoiceId: {type: string, format: uuid}
        customerId: {type: string, format: uuid, description: The associated customer
            ID.}
        invoiceDate: {type: string, format: date-time}
        dueDate: {type: string, format: date-time}
        amount: {type: number, format: double}
        status:
          type: string
          enum: [draft, sent, paid, overdue, canceled]
        id:
          example: 5fa86fd6-0b4c-42d4-8706-3507e2f310a2
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
        ownerId: {example: 4ae8ef51-a44b-4069-9a6f-e6cd91662d82, description: UUID
            of owner of the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_BY, enabled = true)', format: uuid}
        createdDate: {example: '2024-12-30T15:09:38.598-0800', description: Date of
            object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {example: a6560142-7ffa-43ce-b917-b83324dbe8cf, description: Last
            user to access object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_BY, enabled = true)', format: uuid}
        lastAccessedDate: {example: '2024-12-30T15:09:38.598-0800', description: Timestamp
            of last access of object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_DATE, enabled = true)', format: date-time}
        lastModifiedById: {example: 427b28be-fc39-4e45-9b9d-635a19112a1b, description: Unique
            identifier for user who last modifed the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_BY,
            enabled = true)', format: uuid}
        lastModifiedDate: {example: '2024-12-30T15:09:38.598-0800', description: Date
            of last object modification, type: string, x-field-extra-annotation: '    @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_DATE, enabled = true)', format: date-time}
      required: [invoiceId, customerId, invoiceDate, dueDate, amount, status]
    Note:
      type: object
      description: Represents a note added to a CRM entity.
      properties:
        noteId: {type: string, format: uuid}
        associatedEntityId: {type: string, format: uuid, description: 'ID of the entity
            (Customer, Opportunity, etc.) the note is attached to.'}
        entityType:
          type: string
          enum: [customer, opportunity, contact, sales-activity]
          description: Type of the associated entity.
        content: {type: string, description: The actual note content.}
        createdDate: {example: '2024-12-30T15:09:38.598-0800', description: Date of
            object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time}
        createdBy: {type: string, format: uuid, description: The user who created
            the note.}
        id:
          example: 14f1564e-3da7-4358-baa1-8eebea1ceb4b
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
        ownerId: {example: a3b78378-3bc5-44a4-87ab-eae4c606975e, description: UUID
            of owner of the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_BY, enabled = true)', format: uuid}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {example: 931d731a-6912-41cf-b809-d69ad56ade1f, description: Last
            user to access object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_BY, enabled = true)', format: uuid}
        lastAccessedDate: {example: '2024-12-30T15:09:38.598-0800', description: Timestamp
            of last access of object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_DATE, enabled = true)', format: date-time}
        lastModifiedById: {example: 443ddc14-6d7e-49e9-be74-323b1964ee1b, description: Unique
            identifier for user who last modifed the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_BY,
            enabled = true)', format: uuid}
        lastModifiedDate: {example: '2024-12-30T15:09:38.598-0800', description: Date
            of last object modification, type: string, x-field-extra-annotation: '    @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_DATE, enabled = true)', format: date-time}
      required: [noteId, associatedEntityId, entityType, content, createdDate, createdBy]
    Product:
      type: object
      description: Represents a product or service in the CRM.
      properties:
        productId: {type: string, format: uuid}
        name: {type: string}
        description: {type: string}
        unitPrice: {type: number, format: double}
        status:
          type: string
          enum: [available, discontinued, out_of_stock]
          description: Availability status of the product.
        id:
          example: 6d9f1c08-2de2-43b6-9b54-98cd9313315d
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
        ownerId: {example: 70387fb1-3318-4455-a9fc-2392f73658d2, description: UUID
            of owner of the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_BY, enabled = true)', format: uuid}
        createdDate: {example: '2024-12-30T15:09:38.598-0800', description: Date of
            object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {example: bc7a4b36-b309-475b-b831-b7abe2b60eca, description: Last
            user to access object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_BY, enabled = true)', format: uuid}
        lastAccessedDate: {example: '2024-12-30T15:09:38.598-0800', description: Timestamp
            of last access of object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_DATE, enabled = true)', format: date-time}
        lastModifiedById: {example: 3adc1e04-7b0d-407c-b1d4-26209ca0cbf0, description: Unique
            identifier for user who last modifed the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_BY,
            enabled = true)', format: uuid}
        lastModifiedDate: {example: '2024-12-30T15:09:38.598-0800', description: Date
            of last object modification, type: string, x-field-extra-annotation: '    @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_DATE, enabled = true)', format: date-time}
      required: [productId, name, unitPrice, status]
    LineItem:
      type: object
      description: Represents an order lineitem in a customer order.
      properties:
        salesOrderId: {type: string, format: uuid}
        productId: {type: string, format: uuid}
        product: {$ref: '#/components/schemas/Product'}
        lineItemAmount: {type: number, format: double}
        id:
          example: 9ceea105-cea8-4578-81d3-ef8b1823a4c7
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
        ownerId: {example: 539ff920-4408-4488-8437-f473176d5ce5, description: UUID
            of owner of the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_BY, enabled = true)', format: uuid}
        createdDate: {example: '2024-12-30T15:09:38.598-0800', description: Date of
            object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {example: b959ba58-709c-4f55-a3d1-6d42f4b4b5c2, description: Last
            user to access object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_BY, enabled = true)', format: uuid}
        lastAccessedDate: {example: '2024-12-30T15:09:38.598-0800', description: Timestamp
            of last access of object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_DATE, enabled = true)', format: date-time}
        lastModifiedById: {example: 5e22227a-67ef-4c09-b6be-92ea3c3152c2, description: Unique
            identifier for user who last modifed the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_BY,
            enabled = true)', format: uuid}
        lastModifiedDate: {example: '2024-12-30T15:09:38.598-0800', description: Date
            of last object modification, type: string, x-field-extra-annotation: '    @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_DATE, enabled = true)', format: date-time}
    SalesOrder:
      type: object
      description: Represents an order placed by a customer.
      properties:
        customerId: {type: string, format: uuid, description: The customer who placed
            the order.}
        orderItems:
          type: array
          items: {$ref: '#/components/schemas/LineItem'}
        totalAmount: {type: number, format: double}
        orderDate: {type: string, format: date-time}
        status:
          type: string
          enum: [pending, shipped, delivered, canceled]
        id:
          example: 840e72ad-bb38-4e5b-810a-5a25e91bb413
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
        ownerId: {example: 6c8d3831-6049-4a90-8cf1-366cefbbf43c, description: UUID
            of owner of the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_BY, enabled = true)', format: uuid}
        createdDate: {example: '2024-12-30T15:09:38.598-0800', description: Date of
            object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {example: 04a58e94-5408-4314-ae69-4e7980303039, description: Last
            user to access object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_BY, enabled = true)', format: uuid}
        lastAccessedDate: {example: '2024-12-30T15:09:38.598-0800', description: Timestamp
            of last access of object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_DATE, enabled = true)', format: date-time}
        lastModifiedById: {example: fcc5800d-222b-4dc3-a0be-842c2ac4c1fc, description: Unique
            identifier for user who last modifed the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_BY,
            enabled = true)', format: uuid}
        lastModifiedDate: {example: '2024-12-30T15:09:38.598-0800', description: Date
            of last object modification, type: string, x-field-extra-annotation: '    @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_DATE, enabled = true)', format: date-time}
      required: [orderId, customerId, totalAmount, orderDate, status]
    Campaign:
      type: object
      description: Represents a marketing campaign.
      properties:
        campaignId: {type: string, format: uuid}
        name: {type: string, description: Name of the campaign.}
        notes: {type: string, description: Details about the campaign.}
        startDate: {type: string, format: date-time}
        endDate: {type: string, format: date-time}
        status:
          type: string
          enum: [planned, active, completed, canceled]
        budget: {type: number, format: double, description: Budget for the campaign.}
        id:
          example: 5091c829-04a2-454c-ac70-ea2de6d7556f
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
        ownerId: {example: 4b551a39-f754-479b-92fb-7d30a7e91739, description: UUID
            of owner of the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_BY, enabled = true)', format: uuid}
        createdDate: {example: '2024-12-30T15:09:38.598-0800', description: Date of
            object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {example: 7a6548a4-717e-439f-87e5-8e2f67204573, description: Last
            user to access object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_BY, enabled = true)', format: uuid}
        lastAccessedDate: {example: '2024-12-30T15:09:38.598-0800', description: Timestamp
            of last access of object, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_ACCESSED_DATE, enabled = true)', format: date-time}
        lastModifiedById: {example: c93a8a35-8f2f-45d6-b77e-06e8e5c91b96, description: Unique
            identifier for user who last modifed the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_BY,
            enabled = true)', format: uuid}
        lastModifiedDate: {example: '2024-12-30T15:09:38.598-0800', description: Date
            of last object modification, type: string, x-field-extra-annotation: '    @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_DATE, enabled = true)', format: date-time}
      required: [campaignId, name, startDate, endDate, status]
  securitySchemes:
    thorapi_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://{username}.valkyrlabs.com:{port}/oauth
          scopes: {'write:items': modify owned items, 'read:items': read owned items}
