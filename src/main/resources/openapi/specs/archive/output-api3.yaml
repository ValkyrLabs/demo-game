openapi: 3.0.1
info:
  title: ValkyrAI CORE API
  description: The API for accessing ValkyrAI services
  termsOfService: https://valkyrlabs.com/tos/
  contact: {email: info@valkyrlabs.com}
  license: {name: AGPL 3.0, url: 'https://www.gnu.org/licenses/agpl-3.0.html'}
  version: 0.9.25
externalDocs: {description: Learn more about ValkyrAI, url: 'https://valkyrlabs.com/vai/docs'}
servers:
- {url: 'http://localhost:8080/v1', description: local server (uses live data)}
- {url: 'https://valkyrlabs.com/v1', description: production server}
tags:
- {name: admins, description: Secured Admin-only calls}
- {name: users, description: Operations available to regular users}
paths:
  /Workflow:
    get:
      tags: [Workflow]
      summary: Retrieve a list of Workflows
      description: Retrieves a list of Workflows.
      x-spring-cacheable: true
      operationId: getWorkflowList
      responses:
        '200':
          description: Successfully retrieved the list of Workflows.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/Workflow'}
        '404': {description: No Workflows were found.}
        '500': {description: Internal server error.}
    post:
      tags: [Workflow]
      summary: Create a new Workflow
      description: Creates a new Workflow.
      operationId: postWorkflow
      requestBody:
        description: Workflow details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/Workflow'}
      responses:
        '201':
          description: Workflow created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Workflow'}
        '400': {description: Invalid input.}
        '404': {description: Workflow not found.}
        '500': {description: Internal server error.}
  /Workflow/{id}:
    get:
      tags: [Workflow]
      summary: Retrieve a Workflow
      description: Retrieves a Workflow for a specific uid.
      x-spring-cacheable: true
      operationId: getWorkflow
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Workflow.
      responses:
        '200':
          description: Successfully retrieved Workflows.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Workflow'}
        '404': {description: Workflow not found.}
        '500': {description: Internal server error.}
    put:
      tags: [Workflow]
      summary: Update an existing Workflow
      description: Updates an existing Workflow.
      operationId: updateWorkflow
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Workflow.
      requestBody:
        description: Updated Workflow details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/Workflow'}
      responses:
        '200':
          description: Workflow updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Workflow'}
        '400': {description: Invalid input.}
        '404': {description: Workflow not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [Workflow]
      summary: Delete a Workflow.
      description: Deletes a specific Workflow.
      operationId: deleteWorkflow
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Workflow.
      responses:
        '204': {description: Workflow deleted successfully.}
        '404': {description: Workflow not found.}
        '500': {description: Internal server error.}
  /Task:
    get:
      tags: [Task]
      summary: Retrieve a list of Tasks
      description: Retrieves a list of Tasks.
      x-spring-cacheable: true
      operationId: getTaskList
      responses:
        '200':
          description: Successfully retrieved the list of Tasks.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/Task'}
        '404': {description: No Tasks were found.}
        '500': {description: Internal server error.}
    post:
      tags: [Task]
      summary: Create a new Task
      description: Creates a new Task.
      operationId: postTask
      requestBody:
        description: Task details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/Task'}
      responses:
        '201':
          description: Task created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Task'}
        '400': {description: Invalid input.}
        '404': {description: Task not found.}
        '500': {description: Internal server error.}
  /Task/{id}:
    get:
      tags: [Task]
      summary: Retrieve a Task
      description: Retrieves a Task for a specific uid.
      x-spring-cacheable: true
      operationId: getTask
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Task.
      responses:
        '200':
          description: Successfully retrieved Tasks.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Task'}
        '404': {description: Task not found.}
        '500': {description: Internal server error.}
    put:
      tags: [Task]
      summary: Update an existing Task
      description: Updates an existing Task.
      operationId: updateTask
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Task.
      requestBody:
        description: Updated Task details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/Task'}
      responses:
        '200':
          description: Task updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Task'}
        '400': {description: Invalid input.}
        '404': {description: Task not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [Task]
      summary: Delete a Task.
      description: Deletes a specific Task.
      operationId: deleteTask
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Task.
      responses:
        '204': {description: Task deleted successfully.}
        '404': {description: Task not found.}
        '500': {description: Internal server error.}
  /ExecModule:
    get:
      tags: [ExecModule]
      summary: Retrieve a list of ExecModules
      description: Retrieves a list of ExecModules.
      x-spring-cacheable: true
      operationId: getExecModuleList
      responses:
        '200':
          description: Successfully retrieved the list of ExecModules.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/ExecModule'}
        '404': {description: No ExecModules were found.}
        '500': {description: Internal server error.}
    post:
      tags: [ExecModule]
      summary: Create a new ExecModule
      description: Creates a new ExecModule.
      operationId: postExecModule
      requestBody:
        description: ExecModule details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/ExecModule'}
      responses:
        '201':
          description: ExecModule created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ExecModule'}
        '400': {description: Invalid input.}
        '404': {description: ExecModule not found.}
        '500': {description: Internal server error.}
  /ExecModule/{id}:
    get:
      tags: [ExecModule]
      summary: Retrieve a ExecModule
      description: Retrieves a ExecModule for a specific uid.
      x-spring-cacheable: true
      operationId: getExecModule
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the ExecModule.
      responses:
        '200':
          description: Successfully retrieved ExecModules.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ExecModule'}
        '404': {description: ExecModule not found.}
        '500': {description: Internal server error.}
    put:
      tags: [ExecModule]
      summary: Update an existing ExecModule
      description: Updates an existing ExecModule.
      operationId: updateExecModule
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the ExecModule.
      requestBody:
        description: Updated ExecModule details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/ExecModule'}
      responses:
        '200':
          description: ExecModule updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ExecModule'}
        '400': {description: Invalid input.}
        '404': {description: ExecModule not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [ExecModule]
      summary: Delete a ExecModule.
      description: Deletes a specific ExecModule.
      operationId: deleteExecModule
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the ExecModule.
      responses:
        '204': {description: ExecModule deleted successfully.}
        '404': {description: ExecModule not found.}
        '500': {description: Internal server error.}
  /EventLog:
    get:
      tags: [EventLog]
      summary: Retrieve a list of EventLogs
      description: Retrieves a list of EventLogs.
      x-spring-cacheable: true
      operationId: getEventLogList
      responses:
        '200':
          description: Successfully retrieved the list of EventLogs.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/EventLog'}
        '404': {description: No EventLogs were found.}
        '500': {description: Internal server error.}
    post:
      tags: [EventLog]
      summary: Create a new EventLog
      description: Creates a new EventLog.
      operationId: postEventLog
      requestBody:
        description: EventLog details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/EventLog'}
      responses:
        '201':
          description: EventLog created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/EventLog'}
        '400': {description: Invalid input.}
        '404': {description: EventLog not found.}
        '500': {description: Internal server error.}
  /EventLog/{id}:
    get:
      tags: [EventLog]
      summary: Retrieve a EventLog
      description: Retrieves a EventLog for a specific uid.
      x-spring-cacheable: true
      operationId: getEventLog
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the EventLog.
      responses:
        '200':
          description: Successfully retrieved EventLogs.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/EventLog'}
        '404': {description: EventLog not found.}
        '500': {description: Internal server error.}
    put:
      tags: [EventLog]
      summary: Update an existing EventLog
      description: Updates an existing EventLog.
      operationId: updateEventLog
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the EventLog.
      requestBody:
        description: Updated EventLog details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/EventLog'}
      responses:
        '200':
          description: EventLog updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/EventLog'}
        '400': {description: Invalid input.}
        '404': {description: EventLog not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [EventLog]
      summary: Delete a EventLog.
      description: Deletes a specific EventLog.
      operationId: deleteEventLog
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the EventLog.
      responses:
        '204': {description: EventLog deleted successfully.}
        '404': {description: EventLog not found.}
        '500': {description: Internal server error.}
  /OpenAPISpec:
    get:
      tags: [OpenAPISpec]
      summary: Retrieve a list of OpenAPISpecs
      description: Retrieves a list of OpenAPISpecs.
      x-spring-cacheable: true
      operationId: getOpenAPISpecList
      responses:
        '200':
          description: Successfully retrieved the list of OpenAPISpecs.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/OpenAPISpec'}
        '404': {description: No OpenAPISpecs were found.}
        '500': {description: Internal server error.}
    post:
      tags: [OpenAPISpec]
      summary: Create a new OpenAPISpec
      description: Creates a new OpenAPISpec.
      operationId: postOpenAPISpec
      requestBody:
        description: OpenAPISpec details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/OpenAPISpec'}
      responses:
        '201':
          description: OpenAPISpec created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/OpenAPISpec'}
        '400': {description: Invalid input.}
        '404': {description: OpenAPISpec not found.}
        '500': {description: Internal server error.}
  /OpenAPISpec/{id}:
    get:
      tags: [OpenAPISpec]
      summary: Retrieve a OpenAPISpec
      description: Retrieves a OpenAPISpec for a specific uid.
      x-spring-cacheable: true
      operationId: getOpenAPISpec
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the OpenAPISpec.
      responses:
        '200':
          description: Successfully retrieved OpenAPISpecs.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/OpenAPISpec'}
        '404': {description: OpenAPISpec not found.}
        '500': {description: Internal server error.}
    put:
      tags: [OpenAPISpec]
      summary: Update an existing OpenAPISpec
      description: Updates an existing OpenAPISpec.
      operationId: updateOpenAPISpec
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the OpenAPISpec.
      requestBody:
        description: Updated OpenAPISpec details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/OpenAPISpec'}
      responses:
        '200':
          description: OpenAPISpec updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/OpenAPISpec'}
        '400': {description: Invalid input.}
        '404': {description: OpenAPISpec not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [OpenAPISpec]
      summary: Delete a OpenAPISpec.
      description: Deletes a specific OpenAPISpec.
      operationId: deleteOpenAPISpec
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the OpenAPISpec.
      responses:
        '204': {description: OpenAPISpec deleted successfully.}
        '404': {description: OpenAPISpec not found.}
        '500': {description: Internal server error.}

  /ContentData:
    get:
      tags: [ContentData]
      summary: Retrieve a list of ContentDatas
      description: Retrieves a list of ContentDatas.
      x-spring-cacheable: true
      operationId: getContentDataList
      responses:
        '200':
          description: Successfully retrieved the list of ContentDatas.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/ContentData'}
        '404': {description: No ContentDatas were found.}
        '500': {description: Internal server error.}
    post:
      tags: [ContentData]
      summary: Create a new ContentData
      description: Creates a new ContentData.
      operationId: postContentData
      requestBody:
        description: ContentData details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/ContentData'}
      responses:
        '201':
          description: ContentData created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ContentData'}
        '400': {description: Invalid input.}
        '404': {description: ContentData not found.}
        '500': {description: Internal server error.}
  /ContentData/{id}:
    get:
      tags: [ContentData]
      summary: Retrieve a ContentData
      description: Retrieves a ContentData for a specific uid.
      x-spring-cacheable: true
      operationId: getContentData
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the ContentData.
      responses:
        '200':
          description: Successfully retrieved ContentDatas.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ContentData'}
        '404': {description: ContentData not found.}
        '500': {description: Internal server error.}
    put:
      tags: [ContentData]
      summary: Update an existing ContentData
      description: Updates an existing ContentData.
      operationId: updateContentData
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the ContentData.
      requestBody:
        description: Updated ContentData details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/ContentData'}
      responses:
        '200':
          description: ContentData updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ContentData'}
        '400': {description: Invalid input.}
        '404': {description: ContentData not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [ContentData]
      summary: Delete a ContentData.
      description: Deletes a specific ContentData.
      operationId: deleteContentData
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the ContentData.
      responses:
        '204': {description: ContentData deleted successfully.}
        '404': {description: ContentData not found.}
        '500': {description: Internal server error.}
  /Rating:
    get:
      tags: [Rating]
      summary: Retrieve a list of Ratings
      description: Retrieves a list of Ratings.
      x-spring-cacheable: true
      operationId: getRatingList
      responses:
        '200':
          description: Successfully retrieved the list of Ratings.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/Rating'}
        '404': {description: No Ratings were found.}
        '500': {description: Internal server error.}
    post:
      tags: [Rating]
      summary: Create a new Rating
      description: Creates a new Rating.
      operationId: postRating
      requestBody:
        description: Rating details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/Rating'}
      responses:
        '201':
          description: Rating created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Rating'}
        '400': {description: Invalid input.}
        '404': {description: Rating not found.}
        '500': {description: Internal server error.}
  /Rating/{id}:
    get:
      tags: [Rating]
      summary: Retrieve a Rating
      description: Retrieves a Rating for a specific uid.
      x-spring-cacheable: true
      operationId: getRating
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Rating.
      responses:
        '200':
          description: Successfully retrieved Ratings.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Rating'}
        '404': {description: Rating not found.}
        '500': {description: Internal server error.}
    put:
      tags: [Rating]
      summary: Update an existing Rating
      description: Updates an existing Rating.
      operationId: updateRating
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Rating.
      requestBody:
        description: Updated Rating details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/Rating'}
      responses:
        '200':
          description: Rating updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Rating'}
        '400': {description: Invalid input.}
        '404': {description: Rating not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [Rating]
      summary: Delete a Rating.
      description: Deletes a specific Rating.
      operationId: deleteRating
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Rating.
      responses:
        '204': {description: Rating deleted successfully.}
        '404': {description: Rating not found.}
        '500': {description: Internal server error.}
  /ChatMessage:
    get:
      tags: [ChatMessage]
      summary: Retrieve a list of ChatMessages
      description: Retrieves a list of ChatMessages.
      x-spring-cacheable: true
      operationId: getChatMessageList
      responses:
        '200':
          description: Successfully retrieved the list of ChatMessages.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/ChatMessage'}
        '404': {description: No ChatMessages were found.}
        '500': {description: Internal server error.}
    post:
      tags: [ChatMessage]
      summary: Create a new ChatMessage
      description: Creates a new ChatMessage.
      operationId: postChatMessage
      requestBody:
        description: ChatMessage details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/ChatMessage'}
      responses:
        '201':
          description: ChatMessage created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ChatMessage'}
        '400': {description: Invalid input.}
        '404': {description: ChatMessage not found.}
        '500': {description: Internal server error.}
  /ChatMessage/{id}:
    get:
      tags: [ChatMessage]
      summary: Retrieve a ChatMessage
      description: Retrieves a ChatMessage for a specific uid.
      x-spring-cacheable: true
      operationId: getChatMessage
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the ChatMessage.
      responses:
        '200':
          description: Successfully retrieved ChatMessages.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ChatMessage'}
        '404': {description: ChatMessage not found.}
        '500': {description: Internal server error.}
    put:
      tags: [ChatMessage]
      summary: Update an existing ChatMessage
      description: Updates an existing ChatMessage.
      operationId: updateChatMessage
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the ChatMessage.
      requestBody:
        description: Updated ChatMessage details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/ChatMessage'}
      responses:
        '200':
          description: ChatMessage updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ChatMessage'}
        '400': {description: Invalid input.}
        '404': {description: ChatMessage not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [ChatMessage]
      summary: Delete a ChatMessage.
      description: Deletes a specific ChatMessage.
      operationId: deleteChatMessage
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the ChatMessage.
      responses:
        '204': {description: ChatMessage deleted successfully.}
        '404': {description: ChatMessage not found.}
        '500': {description: Internal server error.}
  /User:
    get:
      tags: [User]
      summary: Retrieve a list of Users
      description: Retrieves a list of Users.
      x-spring-cacheable: true
      operationId: getUserList
      responses:
        '200':
          description: Successfully retrieved the list of Users.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/User'}
        '404': {description: No Users were found.}
        '500': {description: Internal server error.}
    post:
      tags: [User]
      summary: Create a new User
      description: Creates a new User.
      operationId: postUser
      requestBody:
        description: User details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/User'}
      responses:
        '201':
          description: User created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/User'}
        '400': {description: Invalid input.}
        '404': {description: User not found.}
        '500': {description: Internal server error.}
  /User/{id}:
    get:
      tags: [User]
      summary: Retrieve a User
      description: Retrieves a User for a specific uid.
      x-spring-cacheable: true
      operationId: getUser
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the User.
      responses:
        '200':
          description: Successfully retrieved Users.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/User'}
        '404': {description: User not found.}
        '500': {description: Internal server error.}
    put:
      tags: [User]
      summary: Update an existing User
      description: Updates an existing User.
      operationId: updateUser
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the User.
      requestBody:
        description: Updated User details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/User'}
      responses:
        '200':
          description: User updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/User'}
        '400': {description: Invalid input.}
        '404': {description: User not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [User]
      summary: Delete a User.
      description: Deletes a specific User.
      operationId: deleteUser
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the User.
      responses:
        '204': {description: User deleted successfully.}
        '404': {description: User not found.}
        '500': {description: Internal server error.}
  /Organization:
    get:
      tags: [Organization]
      summary: Retrieve a list of Organizations
      description: Retrieves a list of Organizations.
      x-spring-cacheable: true
      operationId: getOrganizationList
      responses:
        '200':
          description: Successfully retrieved the list of Organizations.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/Organization'}
        '404': {description: No Organizations were found.}
        '500': {description: Internal server error.}
    post:
      tags: [Organization]
      summary: Create a new Organization
      description: Creates a new Organization.
      operationId: postOrganization
      requestBody:
        description: Organization details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/Organization'}
      responses:
        '201':
          description: Organization created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Organization'}
        '400': {description: Invalid input.}
        '404': {description: Organization not found.}
        '500': {description: Internal server error.}
  /Organization/{id}:
    get:
      tags: [Organization]
      summary: Retrieve a Organization
      description: Retrieves a Organization for a specific uid.
      x-spring-cacheable: true
      operationId: getOrganization
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Organization.
      responses:
        '200':
          description: Successfully retrieved Organizations.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Organization'}
        '404': {description: Organization not found.}
        '500': {description: Internal server error.}
    put:
      tags: [Organization]
      summary: Update an existing Organization
      description: Updates an existing Organization.
      operationId: updateOrganization
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Organization.
      requestBody:
        description: Updated Organization details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/Organization'}
      responses:
        '200':
          description: Organization updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Organization'}
        '400': {description: Invalid input.}
        '404': {description: Organization not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [Organization]
      summary: Delete a Organization.
      description: Deletes a specific Organization.
      operationId: deleteOrganization
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Organization.
      responses:
        '204': {description: Organization deleted successfully.}
        '404': {description: Organization not found.}
        '500': {description: Internal server error.}
  /Address:
    get:
      tags: [Address]
      summary: Retrieve a list of Addresss
      description: Retrieves a list of Addresss.
      x-spring-cacheable: true
      operationId: getAddressList
      responses:
        '200':
          description: Successfully retrieved the list of Addresss.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/Address'}
        '404': {description: No Addresss were found.}
        '500': {description: Internal server error.}
    post:
      tags: [Address]
      summary: Create a new Address
      description: Creates a new Address.
      operationId: postAddress
      requestBody:
        description: Address details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/Address'}
      responses:
        '201':
          description: Address created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Address'}
        '400': {description: Invalid input.}
        '404': {description: Address not found.}
        '500': {description: Internal server error.}
  /Address/{id}:
    get:
      tags: [Address]
      summary: Retrieve a Address
      description: Retrieves a Address for a specific uid.
      x-spring-cacheable: true
      operationId: getAddress
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Address.
      responses:
        '200':
          description: Successfully retrieved Addresss.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Address'}
        '404': {description: Address not found.}
        '500': {description: Internal server error.}
    put:
      tags: [Address]
      summary: Update an existing Address
      description: Updates an existing Address.
      operationId: updateAddress
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Address.
      requestBody:
        description: Updated Address details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/Address'}
      responses:
        '200':
          description: Address updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Address'}
        '400': {description: Invalid input.}
        '404': {description: Address not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [Address]
      summary: Delete a Address.
      description: Deletes a specific Address.
      operationId: deleteAddress
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Address.
      responses:
        '204': {description: Address deleted successfully.}
        '404': {description: Address not found.}
        '500': {description: Internal server error.}
  /Role:
    get:
      tags: [Role]
      summary: Retrieve a list of Roles
      description: Retrieves a list of Roles.
      x-spring-cacheable: true
      operationId: getRoleList
      responses:
        '200':
          description: Successfully retrieved the list of Roles.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/Role'}
        '404': {description: No Roles were found.}
        '500': {description: Internal server error.}
    post:
      tags: [Role]
      summary: Create a new Role
      description: Creates a new Role.
      operationId: postRole
      requestBody:
        description: Role details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/Role'}
      responses:
        '201':
          description: Role created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Role'}
        '400': {description: Invalid input.}
        '404': {description: Role not found.}
        '500': {description: Internal server error.}
  /Role/{id}:
    get:
      tags: [Role]
      summary: Retrieve a Role
      description: Retrieves a Role for a specific uid.
      x-spring-cacheable: true
      operationId: getRole
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Role.
      responses:
        '200':
          description: Successfully retrieved Roles.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Role'}
        '404': {description: Role not found.}
        '500': {description: Internal server error.}
    put:
      tags: [Role]
      summary: Update an existing Role
      description: Updates an existing Role.
      operationId: updateRole
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Role.
      requestBody:
        description: Updated Role details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/Role'}
      responses:
        '200':
          description: Role updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Role'}
        '400': {description: Invalid input.}
        '404': {description: Role not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [Role]
      summary: Delete a Role.
      description: Deletes a specific Role.
      operationId: deleteRole
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Role.
      responses:
        '204': {description: Role deleted successfully.}
        '404': {description: Role not found.}
        '500': {description: Internal server error.}
  /AclEntry:
    get:
      tags: [AclEntry]
      summary: Retrieve a list of AclEntrys
      description: Retrieves a list of AclEntrys.
      x-spring-cacheable: true
      operationId: getAclEntryList
      responses:
        '200':
          description: Successfully retrieved the list of AclEntrys.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/AclEntry'}
        '404': {description: No AclEntrys were found.}
        '500': {description: Internal server error.}
    post:
      tags: [AclEntry]
      summary: Create a new AclEntry
      description: Creates a new AclEntry.
      operationId: postAclEntry
      requestBody:
        description: AclEntry details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/AclEntry'}
      responses:
        '201':
          description: AclEntry created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/AclEntry'}
        '400': {description: Invalid input.}
        '404': {description: AclEntry not found.}
        '500': {description: Internal server error.}
  /AclEntry/{id}:
    get:
      tags: [AclEntry]
      summary: Retrieve a AclEntry
      description: Retrieves a AclEntry for a specific uid.
      x-spring-cacheable: true
      operationId: getAclEntry
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the AclEntry.
      responses:
        '200':
          description: Successfully retrieved AclEntrys.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/AclEntry'}
        '404': {description: AclEntry not found.}
        '500': {description: Internal server error.}
    put:
      tags: [AclEntry]
      summary: Update an existing AclEntry
      description: Updates an existing AclEntry.
      operationId: updateAclEntry
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the AclEntry.
      requestBody:
        description: Updated AclEntry details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/AclEntry'}
      responses:
        '200':
          description: AclEntry updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/AclEntry'}
        '400': {description: Invalid input.}
        '404': {description: AclEntry not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [AclEntry]
      summary: Delete a AclEntry.
      description: Deletes a specific AclEntry.
      operationId: deleteAclEntry
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the AclEntry.
      responses:
        '204': {description: AclEntry deleted successfully.}
        '404': {description: AclEntry not found.}
        '500': {description: Internal server error.}
  /ThorUXMeta:
    get:
      tags: [ThorUXMeta]
      summary: Retrieve a list of ThorUXMetas
      description: Retrieves a list of ThorUXMetas.
      x-spring-cacheable: true
      operationId: getThorUXMetaList
      responses:
        '200':
          description: Successfully retrieved the list of ThorUXMetas.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/ThorUXMeta'}
        '404': {description: No ThorUXMetas were found.}
        '500': {description: Internal server error.}
    post:
      tags: [ThorUXMeta]
      summary: Create a new ThorUXMeta
      description: Creates a new ThorUXMeta.
      operationId: postThorUXMeta
      requestBody:
        description: ThorUXMeta details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/ThorUXMeta'}
      responses:
        '201':
          description: ThorUXMeta created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ThorUXMeta'}
        '400': {description: Invalid input.}
        '404': {description: ThorUXMeta not found.}
        '500': {description: Internal server error.}
  /ThorUXMeta/{id}:
    get:
      tags: [ThorUXMeta]
      summary: Retrieve a ThorUXMeta
      description: Retrieves a ThorUXMeta for a specific uid.
      x-spring-cacheable: true
      operationId: getThorUXMeta
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the ThorUXMeta.
      responses:
        '200':
          description: Successfully retrieved ThorUXMetas.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ThorUXMeta'}
        '404': {description: ThorUXMeta not found.}
        '500': {description: Internal server error.}
    put:
      tags: [ThorUXMeta]
      summary: Update an existing ThorUXMeta
      description: Updates an existing ThorUXMeta.
      operationId: updateThorUXMeta
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the ThorUXMeta.
      requestBody:
        description: Updated ThorUXMeta details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/ThorUXMeta'}
      responses:
        '200':
          description: ThorUXMeta updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ThorUXMeta'}
        '400': {description: Invalid input.}
        '404': {description: ThorUXMeta not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [ThorUXMeta]
      summary: Delete a ThorUXMeta.
      description: Deletes a specific ThorUXMeta.
      operationId: deleteThorUXMeta
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the ThorUXMeta.
      responses:
        '204': {description: ThorUXMeta deleted successfully.}
        '404': {description: ThorUXMeta not found.}
        '500': {description: Internal server error.}
  /ThorUXComponent:
    get:
      tags: [ThorUXComponent]
      summary: Retrieve a list of ThorUXComponents
      description: Retrieves a list of ThorUXComponents.
      x-spring-cacheable: true
      operationId: getThorUXComponentList
      responses:
        '200':
          description: Successfully retrieved the list of ThorUXComponents.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/ThorUXComponent'}
        '404': {description: No ThorUXComponents were found.}
        '500': {description: Internal server error.}
    post:
      tags: [ThorUXComponent]
      summary: Create a new ThorUXComponent
      description: Creates a new ThorUXComponent.
      operationId: postThorUXComponent
      requestBody:
        description: ThorUXComponent details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/ThorUXComponent'}
      responses:
        '201':
          description: ThorUXComponent created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ThorUXComponent'}
        '400': {description: Invalid input.}
        '404': {description: ThorUXComponent not found.}
        '500': {description: Internal server error.}
  /ThorUXComponent/{id}:
    get:
      tags: [ThorUXComponent]
      summary: Retrieve a ThorUXComponent
      description: Retrieves a ThorUXComponent for a specific uid.
      x-spring-cacheable: true
      operationId: getThorUXComponent
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the ThorUXComponent.
      responses:
        '200':
          description: Successfully retrieved ThorUXComponents.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ThorUXComponent'}
        '404': {description: ThorUXComponent not found.}
        '500': {description: Internal server error.}
    put:
      tags: [ThorUXComponent]
      summary: Update an existing ThorUXComponent
      description: Updates an existing ThorUXComponent.
      operationId: updateThorUXComponent
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the ThorUXComponent.
      requestBody:
        description: Updated ThorUXComponent details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/ThorUXComponent'}
      responses:
        '200':
          description: ThorUXComponent updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ThorUXComponent'}
        '400': {description: Invalid input.}
        '404': {description: ThorUXComponent not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [ThorUXComponent]
      summary: Delete a ThorUXComponent.
      description: Deletes a specific ThorUXComponent.
      operationId: deleteThorUXComponent
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the ThorUXComponent.
      responses:
        '204': {description: ThorUXComponent deleted successfully.}
        '404': {description: ThorUXComponent not found.}
        '500': {description: Internal server error.}
  /Login:
    get:
      tags: [Login]
      summary: Retrieve a list of Logins
      description: Retrieves a list of Logins.
      x-spring-cacheable: true
      operationId: getLoginList
      responses:
        '200':
          description: Successfully retrieved the list of Logins.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/Login'}
        '404': {description: No Logins were found.}
        '500': {description: Internal server error.}
    post:
      tags: [Login]
      summary: Create a new Login
      description: Creates a new Login.
      operationId: postLogin
      requestBody:
        description: Login details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/Login'}
      responses:
        '201':
          description: Login created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Login'}
        '400': {description: Invalid input.}
        '404': {description: Login not found.}
        '500': {description: Internal server error.}
  /Login/{id}:
    get:
      tags: [Login]
      summary: Retrieve a Login
      description: Retrieves a Login for a specific uid.
      x-spring-cacheable: true
      operationId: getLogin
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Login.
      responses:
        '200':
          description: Successfully retrieved Logins.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Login'}
        '404': {description: Login not found.}
        '500': {description: Internal server error.}
    put:
      tags: [Login]
      summary: Update an existing Login
      description: Updates an existing Login.
      operationId: updateLogin
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Login.
      requestBody:
        description: Updated Login details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/Login'}
      responses:
        '200':
          description: Login updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Login'}
        '400': {description: Invalid input.}
        '404': {description: Login not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [Login]
      summary: Delete a Login.
      description: Deletes a specific Login.
      operationId: deleteLogin
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Login.
      responses:
        '204': {description: Login deleted successfully.}
        '404': {description: Login not found.}
        '500': {description: Internal server error.}
  /Logout:
    get:
      tags: [Logout]
      summary: Retrieve a list of Logouts
      description: Retrieves a list of Logouts.
      x-spring-cacheable: true
      operationId: getLogoutList
      responses:
        '200':
          description: Successfully retrieved the list of Logouts.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/Logout'}
        '404': {description: No Logouts were found.}
        '500': {description: Internal server error.}
    post:
      tags: [Logout]
      summary: Create a new Logout
      description: Creates a new Logout.
      operationId: postLogout
      requestBody:
        description: Logout details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/Logout'}
      responses:
        '201':
          description: Logout created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Logout'}
        '400': {description: Invalid input.}
        '404': {description: Logout not found.}
        '500': {description: Internal server error.}
  /Logout/{id}:
    get:
      tags: [Logout]
      summary: Retrieve a Logout
      description: Retrieves a Logout for a specific uid.
      x-spring-cacheable: true
      operationId: getLogout
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Logout.
      responses:
        '200':
          description: Successfully retrieved Logouts.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Logout'}
        '404': {description: Logout not found.}
        '500': {description: Internal server error.}
    put:
      tags: [Logout]
      summary: Update an existing Logout
      description: Updates an existing Logout.
      operationId: updateLogout
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Logout.
      requestBody:
        description: Updated Logout details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/Logout'}
      responses:
        '200':
          description: Logout updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Logout'}
        '400': {description: Invalid input.}
        '404': {description: Logout not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [Logout]
      summary: Delete a Logout.
      description: Deletes a specific Logout.
      operationId: deleteLogout
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Logout.
      responses:
        '204': {description: Logout deleted successfully.}
        '404': {description: Logout not found.}
        '500': {description: Internal server error.}
components:
  parameters:
    id:
      name: id
      in: path
      required: true
      description: The unique identifier of the object to retrieve.
      schema: {type: string, format: uuid}
  schemas:
    Workflow:
      type: object
      properties:
        description: {type: string}
        role:
          type: string
          enum: [user, assistant]
          description: the role with permissions (temporary user is created)
        schedule: {type: string, description: cron string (optional) to determine
            when this runs}
        meta: {type: string, description: metadata in any text format to be used in
            client code}
        id:
          example: 3724a788-e619-4969-aa62-10dd250ec235
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n   // @Column(updatable = false, nullable\
            \ = false, columnDefinition = \"binary(16) default (uuid_to_bin(uuid()))\"\
            )\n    @GeneratedValue(generator = \"UUID\")\n    @GenericGenerator(name\
            \ = \"UUID\", strategy = \"org.hibernate.id.UUIDGenerator\")"
          format: uuid
        ownerId: {example: 545dd058-4d34-438d-9991-6f95f754c76e, description: Unique
            identifier for owner of the object in the system, type: string, x-field-extra-annotation: '@CreatedBy',
          format: uuid}
        lastModifiedById: {example: 181c185d-63a9-455d-ab6f-020d62df5f35, description: Unique
            identifier for user who last modifed the object in the system, type: string,
          x-field-extra-annotation: '@LastModifiedBy', format: uuid}
        createdDate:
          example: 2024-09-25T21:56:13.633-0700
          description: Date of object creation
          type: string
          x-field-extra-annotation: "@CreatedDate \n @Column(name = \"created_date\"\
            , nullable = false, updatable = false)"
          format: date-time
        modifiedDate:
          example: 2024-09-25T21:56:13.633-0700
          description: Date of object modification
          type: string
          x-field-extra-annotation: "@LastModifiedDate \n @Column(name = \"last_modified_date\"\
            , nullable = false )"
          format: date-time
      xml: {name: Workflow}
    Task:
      type: object
      properties:
        description: {type: string}
        role:
          type: string
          enum: [user, assistant]
          description: override the workflow role for specific task (login to a system)
            the role with permissions (temporary user is created)
        id:
          example: 3c794d95-7895-4b78-b7b2-1264e368fe44
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n   // @Column(updatable = false, nullable\
            \ = false, columnDefinition = \"binary(16) default (uuid_to_bin(uuid()))\"\
            )\n    @GeneratedValue(generator = \"UUID\")\n    @GenericGenerator(name\
            \ = \"UUID\", strategy = \"org.hibernate.id.UUIDGenerator\")"
          format: uuid
        ownerId: {example: 566d3786-5e3e-413f-8a7f-ea407db37694, description: Unique
            identifier for owner of the object in the system, type: string, x-field-extra-annotation: '@CreatedBy',
          format: uuid}
        lastModifiedById: {example: c34f033e-63da-4acc-86e1-f985d339330f, description: Unique
            identifier for user who last modifed the object in the system, type: string,
          x-field-extra-annotation: '@LastModifiedBy', format: uuid}
        createdDate:
          example: 2024-09-25T21:56:13.634-0700
          description: Date of object creation
          type: string
          x-field-extra-annotation: "@CreatedDate \n @Column(name = \"created_date\"\
            , nullable = false, updatable = false)"
          format: date-time
        modifiedDate:
          example: 2024-09-25T21:56:13.634-0700
          description: Date of object modification
          type: string
          x-field-extra-annotation: "@LastModifiedDate \n @Column(name = \"last_modified_date\"\
            , nullable = false )"
          format: date-time
      xml: {name: Task}
    ExecModule:
      type: object
      properties:
        systemId: {type: string, format: uuid, description: UUID of the system object}
        role:
          type: string
          enum: [user, assistant]
        content: {type: string, description: json content for configuring the module}
        status:
          type: string
          enum: [good, warning, error, disabled]
        id:
          example: 56f66f3b-6d17-4ba7-8f6d-dfdac80343a2
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n   // @Column(updatable = false, nullable\
            \ = false, columnDefinition = \"binary(16) default (uuid_to_bin(uuid()))\"\
            )\n    @GeneratedValue(generator = \"UUID\")\n    @GenericGenerator(name\
            \ = \"UUID\", strategy = \"org.hibernate.id.UUIDGenerator\")"
          format: uuid
        ownerId: {example: fde34248-6c38-4874-9367-a2538fed3ffe, description: Unique
            identifier for owner of the object in the system, type: string, x-field-extra-annotation: '@CreatedBy',
          format: uuid}
        lastModifiedById: {example: e517aa95-185c-4817-8c85-cc139cfcf85e, description: Unique
            identifier for user who last modifed the object in the system, type: string,
          x-field-extra-annotation: '@LastModifiedBy', format: uuid}
        createdDate:
          example: 2024-09-25T21:56:13.634-0700
          description: Date of object creation
          type: string
          x-field-extra-annotation: "@CreatedDate \n @Column(name = \"created_date\"\
            , nullable = false, updatable = false)"
          format: date-time
        modifiedDate:
          example: 2024-09-25T21:56:13.634-0700
          description: Date of object modification
          type: string
          x-field-extra-annotation: "@LastModifiedDate \n @Column(name = \"last_modified_date\"\
            , nullable = false )"
          format: date-time
      xml: {name: ExecModule}
    EventLog:
      type: object
      properties:
        description: {type: string, description: detailed event description}
        status:
          type: string
          enum: [ok, error, disabled]
          description: status for event
        id:
          example: 8deca16f-3c9a-4c36-bf89-fb3050d32d5e
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n   // @Column(updatable = false, nullable\
            \ = false, columnDefinition = \"binary(16) default (uuid_to_bin(uuid()))\"\
            )\n    @GeneratedValue(generator = \"UUID\")\n    @GenericGenerator(name\
            \ = \"UUID\", strategy = \"org.hibernate.id.UUIDGenerator\")"
          format: uuid
        ownerId: {example: 7736db2d-d35d-4fa9-856b-10808e3173bc, description: Unique
            identifier for owner of the object in the system, type: string, x-field-extra-annotation: '@CreatedBy',
          format: uuid}
        lastModifiedById: {example: 301a3c48-9b80-4711-b48c-8af3b1a85860, description: Unique
            identifier for user who last modifed the object in the system, type: string,
          x-field-extra-annotation: '@LastModifiedBy', format: uuid}
        createdDate:
          example: 2024-09-25T21:56:13.635-0700
          description: Date of object creation
          type: string
          x-field-extra-annotation: "@CreatedDate \n @Column(name = \"created_date\"\
            , nullable = false, updatable = false)"
          format: date-time
        modifiedDate:
          example: 2024-09-25T21:56:13.635-0700
          description: Date of object modification
          type: string
          x-field-extra-annotation: "@LastModifiedDate \n @Column(name = \"last_modified_date\"\
            , nullable = false )"
          format: date-time
      xml: {name: EventLog}
      

    OpenAPISpec:
      required: [name, schemaData]
      type: object
      properties:
        category:
          type: string
          description: category of generated output
          enum: [Full Stack, Front End, API, Data Library, Infrastructure, Documentation]
        name: {type: string, description: Name of the service API displayed in the
            UI, example: My New Stack}
        artifactId: {maxLength: 256, type: string, description: 'Name of the output
            build file(s) ie: mvn ArtifactID', example: valkyrai}
        applicationId: {type: integer, description: 'Id of the Application that this
            Stack belongs to, if any', format: int64}
        adminServerHost: {maxLength: 256, type: string, description: 'host (FQDN)
            name of to connect to the admin server -- do not include ''http(s):''
            or slashes', example: www.mycompany.com, x-thorapi-dataField: 'fieldGroup=admin-config,
            advanced=true'}
        adminServerPort: {maxLength: 256, type: string, description: port of to connect
            to the admin server, example: '8009', x-thorapi-dataField: 'fieldGroup=admin-config,
            advanced=true'}
        hostName: {maxLength: 256, type: string, description: 'host of this service
            (FQDN) -- do not include ''http(s):'' or slashes', example: localhost,
          x-thorapi-dataField: 'fieldGroup=service-config, advanced=true'}
        hostPort: {maxLength: 5, type: string, description: port of this service,
          example: '8099', x-thorapi-dataField: 'fieldGroup=service-config, advanced=true'}
        orgName: {maxLength: 256, type: string, description: the name of the organization
            owner of the service used in classpath, example: Valkyr Labs Inc., x-thorapi-dataField: 'fieldGroup=github-settings,
            advanced=true'}
        gitUser: {maxLength: 256, type: string, description: The name of the git USER
            or ORG to push generated stack code, example: Valkyr Labs Inc, x-thorapi-dataField: 'fieldGroup=github-settings,
            advanced=true'}
        gitRepo: {maxLength: 256, type: string, description: The repository where
            the output Project will be pushed after generation, example: MyValkyrAIApp,
          x-thorapi-dataField: 'fieldGroup=github-settings, advanced=true'}
        skipSwaggerGen: {type: boolean, description: Whether to skip Swagger API build
            during Generation, default: false, x-thorapi-dataField: 'fieldGroup=generator-config,
            advanced=true'}
        skipJavaGen: {type: boolean, description: Whether to skip Java Services and
            DAO build during Generation, default: false, x-thorapi-dataField: 'fieldGroup=generator-config,
            advanced=true'}
        skipDbGen: {type: boolean, description: Whether to skip Database Modification
            during Generation, default: false, x-thorapi-dataField: 'fieldGroup=generator-config,
            advanced=true'}
        skipReactGen: {type: boolean, description: Whether to skip React Front End
            during Generation, default: false, x-thorapi-dataField: 'fieldGroup=generator-config,
            advanced=true'}
        dbGenDropTable: {type: boolean, description: Will rename and any conflicting
            pre-existing tables during generation, default: true, x-thorapi-dataField: 'fieldGroup=generator-config,
            advanced=true'}
        thorApiSecureKey: {maxLength: 256, type: string, description: Secure key used
            to encrypt the data in the new platform, example: =W34sdcwdsfwC34W34sdcwdsfwC34W34sdcwdsfw=,
          x-thorapi-secureField: true}
        dbUrl: {maxLength: 256, type: string, description: database url for the system,
          example: 'jdbc:mysql//db.myco.com', x-thorapi-dataField: fieldGroup=database-config}
        dbName: {maxLength: 256, type: string, description: 'db name (schema name)
            for the system NOTE: must exist prior to initialization', example: ValkyrAIApp1,
          x-thorapi-dataField: fieldGroup=database-config}
        dbUser: {maxLength: 256, type: string, description: database user for the
            system, example: igniteuser, x-thorapi-dataField: fieldGroup=database-config,
          x-thorapi-secureField: true}
        dbPassword: {maxLength: 256, type: string, description: database password
            for the system, format: password, example: hard2Gu3ss, x-thorapi-dataField: fieldGroup=database-config,
          x-thorapi-secureField: true}
        schemaName: {maxLength: 256, type: string, description: 'Name of the DB Schema
            to connect to  NOTE: must exist prior to initialization', example: starter,
          x-thorapi-dataField: 'advanced=true, fieldGroup=database-config'}
        language:
          type: string
          description: Backend Stack Service Language
          enum: [valkyrai_java_spring, valkyrai_kotlin_spring]
        templateRepo:
          type: string
          description: Stack template repo
          enum: [java_spring_mybatis_react_redux, kotlin_spring_mybatis_react_redux,
            kotlin_spring_jpa_react_redux, gatsby_front_page]
        schemaData: {maxLength: 1000000, minLength: 20, type: string, description: YAML
            Swagger/OpenAPI Schema, example: Sparkyt}
        schemaFileName: {maxLength: 256, type: string, description: File name containing
            Schema definition, example: ignite_commerce.yml}
        status:
          type: string
          description: Current Stack status
          enum: [available, syntax_error, compilation_error, runtime_error, database_error,
            locked]
        id:
          example: 11b13b76-06d9-459d-994c-fa4a43b2e6aa
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n   // @Column(updatable = false, nullable\
            \ = false, columnDefinition = \"binary(16) default (uuid_to_bin(uuid()))\"\
            )\n    @GeneratedValue(generator = \"UUID\")\n    @GenericGenerator(name\
            \ = \"UUID\", strategy = \"org.hibernate.id.UUIDGenerator\")"
          format: uuid
        ownerId: {example: 32538ce4-9905-436c-a979-d0c6b1207831, description: Unique
            identifier for owner of the object in the system, type: string, x-field-extra-annotation: '@CreatedBy',
          format: uuid}
        lastModifiedById: {example: 0e61f2fe-0ab8-4b09-9a7c-2588916d82c7, description: Unique
            identifier for user who last modifed the object in the system, type: string,
          x-field-extra-annotation: '@LastModifiedBy', format: uuid}
        createdDate:
          example: 2024-09-25T21:56:13.636-0700
          description: Date of object creation
          type: string
          x-field-extra-annotation: "@CreatedDate \n @Column(name = \"created_date\"\
            , nullable = false, updatable = false)"
          format: date-time
        modifiedDate:
          example: 2024-09-25T21:56:13.636-0700
          description: Date of object modification
          type: string
          x-field-extra-annotation: "@LastModifiedDate \n @Column(name = \"last_modified_date\"\
            , nullable = false )"
          format: date-time
      description: ValkyrAI Design Spec
      xml: {name: OpenAPISpec}
    ChatMessage:
      type: object
      properties:
        sessionId: {type: string}
        role:
          type: string
          enum: [user, assistant]
        content: {type: string}
        id:
          example: b33077da-f40b-4bb9-a702-9fa7accb1067
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n   // @Column(updatable = false, nullable\
            \ = false, columnDefinition = \"binary(16) default (uuid_to_bin(uuid()))\"\
            )\n    @GeneratedValue(generator = \"UUID\")\n    @GenericGenerator(name\
            \ = \"UUID\", strategy = \"org.hibernate.id.UUIDGenerator\")"
          format: uuid
        ownerId: {example: abf959f2-e788-4f6b-9736-06b301443397, description: Unique
            identifier for owner of the object in the system, type: string, x-field-extra-annotation: '@CreatedBy',
          format: uuid}
        lastModifiedById: {example: ecb86e58-2748-44f5-a653-20595a84e60e, description: Unique
            identifier for user who last modifed the object in the system, type: string,
          x-field-extra-annotation: '@LastModifiedBy', format: uuid}
        createdDate:
          example: 2024-09-25T21:56:13.636-0700
          description: Date of object creation
          type: string
          x-field-extra-annotation: "@CreatedDate \n @Column(name = \"created_date\"\
            , nullable = false, updatable = false)"
          format: date-time
        modifiedDate:
          example: 2024-09-25T21:56:13.637-0700
          description: Date of object modification
          type: string
          x-field-extra-annotation: "@LastModifiedDate \n @Column(name = \"last_modified_date\"\
            , nullable = false )"
          format: date-time
    ChatResponse:
      type: object
      properties:
        content: {type: string}
        id:
          example: 90306a1d-c581-4d43-8cc5-6945000b099e
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n   // @Column(updatable = false, nullable\
            \ = false, columnDefinition = \"binary(16) default (uuid_to_bin(uuid()))\"\
            )\n    @GeneratedValue(generator = \"UUID\")\n    @GenericGenerator(name\
            \ = \"UUID\", strategy = \"org.hibernate.id.UUIDGenerator\")"
          format: uuid
        ownerId: {example: 96552db6-9a52-4959-ae31-f51651090ae4, description: Unique
            identifier for owner of the object in the system, type: string, x-field-extra-annotation: '@CreatedBy',
          format: uuid}
        lastModifiedById: {example: 01aaba57-3ab3-4578-a37e-f2f58f650a41, description: Unique
            identifier for user who last modifed the object in the system, type: string,
          x-field-extra-annotation: '@LastModifiedBy', format: uuid}
        createdDate:
          example: 2024-09-25T21:56:13.637-0700
          description: Date of object creation
          type: string
          x-field-extra-annotation: "@CreatedDate \n @Column(name = \"created_date\"\
            , nullable = false, updatable = false)"
          format: date-time
        modifiedDate:
          example: 2024-09-25T21:56:13.637-0700
          description: Date of object modification
          type: string
          x-field-extra-annotation: "@LastModifiedDate \n @Column(name = \"last_modified_date\"\
            , nullable = false )"
          format: date-time
    Reaction:
      required: [target, value]
      properties:
        target: {type: string, format: uuid, description: UUID of the system object,
          example: ABC234}
        value:
          type: string
          description: the reaction to the item
          enum: [like, dislike, neutral, angry, sad, question]
          example: neutral
        id:
          example: 3f3687da-a1ed-467d-811a-5b2a2dcf606a
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n   // @Column(updatable = false, nullable\
            \ = false, columnDefinition = \"binary(16) default (uuid_to_bin(uuid()))\"\
            )\n    @GeneratedValue(generator = \"UUID\")\n    @GenericGenerator(name\
            \ = \"UUID\", strategy = \"org.hibernate.id.UUIDGenerator\")"
          format: uuid
        ownerId: {example: 11d29549-5a93-4b0d-b859-afbb4086dbfe, description: Unique
            identifier for owner of the object in the system, type: string, x-field-extra-annotation: '@CreatedBy',
          format: uuid}
        lastModifiedById: {example: 10cfe5fd-9795-4218-a5c5-2a35495f4c45, description: Unique
            identifier for user who last modifed the object in the system, type: string,
          x-field-extra-annotation: '@LastModifiedBy', format: uuid}
        createdDate:
          example: 2024-09-25T21:56:13.637-0700
          description: Date of object creation
          type: string
          x-field-extra-annotation: "@CreatedDate \n @Column(name = \"created_date\"\
            , nullable = false, updatable = false)"
          format: date-time
        modifiedDate:
          example: 2024-09-25T21:56:13.638-0700
          description: Date of object modification
          type: string
          x-field-extra-annotation: "@LastModifiedDate \n @Column(name = \"last_modified_date\"\
            , nullable = false )"
          format: date-time
    User:
      required: [email, password]
      type: object
      properties:
        firstName:
          type: string
          description: first name of user (encrypted)
          example: Peace
          x-thorapi-dataField: fieldGroup=personal-details
          x-thorapi-secureField: true
          x-field-extra-annotation: |-
            @SecureField(encryptionType = SecureField.EncryptionType.SYMMETRIC, strength = 5)
             @DataField(hidden = true, advanced = true)
        middleName:
          type: string
          description: middle name of user
          example: Love
          x-thorapi-dataField: fieldGroup=personal-details
          x-thorapi-secureField: true
          x-field-extra-annotation: |-
            @SecureField(encryptionType = SecureField.EncryptionType.SYMMETRIC, strength = 5)
             @DataField(hidden = true, advanced = true)
        lastName:
          type: string
          description: last name of user (encrypted)
          example: Harmony
          x-field-extra-annotation: |-
            @SecureField(encryptionType = SecureField.EncryptionType.SYMMETRIC, strength = 5)
             @DataField(hidden = true, advanced = true)
        userName: {maxLength: 50, minLength: 4, type: string, description: Your account
            Username, example: Sparky, x-thorapi-dataField: 'fieldGroup=personal-details,
            unique=true'}
        password:
          maxLength: 35
          minLength: 8
          type: string
          description: Your account Password
          format: password
          example: HardToGuess1980
          x-field-extra-annotation: |-
            @SecureField(encryptionType = SecureField.EncryptionType.HASHED, strength = 5)
             @DataField(hidden = true, advanced = true)
        fingerprint: {type: string, description: 'Encrypted identity (Facial Recognition,
            Fingerprint Scanner, etc.)', readOnly: true, example: DK$DFSJaraDD, x-thorapi-dataField: advanced=true,
          x-thorapi-secureField: true}
        federalIdentification:
          minLength: 11
          maxLength: 11
          pattern: ^\d{3}-\d{2}-\d{4}$
          default: 333-22-4444
          type: string
          description: SSN or a 10 digit federal government ID (encrypted)
          example: 111-22-3333
          x-field-extra-annotation: |-
            @SecureField(encryptionType = SecureField.EncryptionType.SYMMETRIC, strength = 5)
             @DataField(hidden = true, advanced = true)
        residenceCountry: {minLength: 3, maxLength: 3, type: string, description: Country
            of residence 3-character code, example: USA, x-thorapi-dataField: advanced=true,
          x-thorapi-secureField: true}
        stateIdentification: {minLength: 10, maxLength: 10, pattern: '^\d{10}$', type: string,
          description: Driver's License or a 10 digit state government ID, example: 3333333333,
          default: 2222222222, x-thorapi-dataField: advanced=true, x-thorapi-secureField: true}
        residenceState: {minLength: 2, maxLength: 2, type: string, description: State
            of residence 2-character code (USA), example: CA, x-thorapi-dataField: advanced=true,
          x-thorapi-secureField: true}
        email: {pattern: '^.+@[^.].*.[a-z]{2,}$', type: string, description: The main
            email address for the user (encrypted), format: email, example: wiley.coyote@acme-corp.com}
        social:
          type: string
          description: The username for your primary social account (if any)
          format: url
          example: https://twitter.com/ValkyrAI
          x-field-extra-annotation: |-
            @SecureField(encryptionType = SecureField.EncryptionType.SYMMETRIC, strength = 5)
             @DataField(hidden = true, advanced = true)
        bio: {type: string, description: More in-depth information about you and your
            account, format: url, example: 'https://twitter.com/ValkyrAI'}
        avatar_url: {type: string, description: URL for user avatar image, format: url,
          example: 'https://img.com/mypic.png'}
        organizationId: {type: string, format: uuid}
        organization: {$ref: '#/components/schemas/Organization'}
        addresses:
          type: array
          items: {$ref: '#/components/schemas/Address'}
        enabled: {type: boolean, description: Spring Security User field whether the
            user is enabled, default: true, x-thorapi-dataField: 'advanced=true, fieldGroup=accountStatus'}
        credentialNonExpired: {type: boolean, description: Spring Security User field
            whether the user's login credentials have expired, default: true, x-thorapi-dataField: 'advanced=true,
            fieldGroup=accountStatus'}
        accountEnabled: {type: boolean, description: Spring Security User field whether
            the user account is enabled, default: true, x-thorapi-dataField: 'advanced=true,
            fieldGroup=accountStatus'}
        accountNonLocked: {type: boolean, description: Spring Security User field
            whether the user account is locked, default: true, x-thorapi-dataField: 'advanced=true,
            fieldGroup=accountStatus'}
        accountNonExpired: {type: boolean, description: Spring Security User field
            whether the user account has expired, default: false, x-thorapi-dataField: 'advanced=true,
            fieldGroup=accountStatus'}
        roles:
          x-thorapi-dataField: advanced=true, fieldGroup=accountStatus
          description: the granted roles (or null if the granted authority cannot
            be expressed as a String with sufficient precision).
          type: array
          items: {$ref: '#/components/schemas/Role'}
        authorityList:
          x-thorapi-dataField: advanced=true, fieldGroup=accountStatus
          description: the granted authorities (or null if the granted authority cannot
            be expressed as a String with sufficient precision).
          type: array
          items: {$ref: '#/components/schemas/Authority'}
        id:
          example: 31fb9259-70cf-4755-adcb-9d7e1b75271d
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n   // @Column(updatable = false, nullable\
            \ = false, columnDefinition = \"binary(16) default (uuid_to_bin(uuid()))\"\
            )\n    @GeneratedValue(generator = \"UUID\")\n    @GenericGenerator(name\
            \ = \"UUID\", strategy = \"org.hibernate.id.UUIDGenerator\")"
          format: uuid
        ownerId: {example: fb4ec1eb-2f7b-4725-bc96-f915f06a858e, description: Unique
            identifier for owner of the object in the system, type: string, x-field-extra-annotation: '@CreatedBy',
          format: uuid}
        lastModifiedById: {example: 5bda9fb9-0289-4f4c-b081-01030a584be5, description: Unique
            identifier for user who last modifed the object in the system, type: string,
          x-field-extra-annotation: '@LastModifiedBy', format: uuid}
        createdDate:
          example: 2024-09-25T21:56:13.638-0700
          description: Date of object creation
          type: string
          x-field-extra-annotation: "@CreatedDate \n @Column(name = \"created_date\"\
            , nullable = false, updatable = false)"
          format: date-time
        modifiedDate:
          example: 2024-09-25T21:56:13.638-0700
          description: Date of object modification
          type: string
          x-field-extra-annotation: "@LastModifiedDate \n @Column(name = \"last_modified_date\"\
            , nullable = false )"
          format: date-time
      xml: {name: User}
    Organization:
      required: [name]
      type: object
      properties:
        name: {type: string, example: ACME Corp Inc.}
        homePage: {type: string, format: url, example: 'https://www.acme-corp.com'}
        phone: {type: string, example: 415-867-5309}
        addressId: {type: string, format: uuid}
        address: {$ref: '#/components/schemas/Address'}
        id:
          example: 907dab1d-5b99-4420-8a25-ecfe7572d61d
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n   // @Column(updatable = false, nullable\
            \ = false, columnDefinition = \"binary(16) default (uuid_to_bin(uuid()))\"\
            )\n    @GeneratedValue(generator = \"UUID\")\n    @GenericGenerator(name\
            \ = \"UUID\", strategy = \"org.hibernate.id.UUIDGenerator\")"
          format: uuid
        ownerId: {example: d40e13b4-b10a-4db5-8adc-c12f2e03e0a5, description: Unique
            identifier for owner of the object in the system, type: string, x-field-extra-annotation: '@CreatedBy',
          format: uuid}
        lastModifiedById: {example: 717770b2-acee-47b9-a355-460b61be1511, description: Unique
            identifier for user who last modifed the object in the system, type: string,
          x-field-extra-annotation: '@LastModifiedBy', format: uuid}
        createdDate:
          example: 2024-09-25T21:56:13.638-0700
          description: Date of object creation
          type: string
          x-field-extra-annotation: "@CreatedDate \n @Column(name = \"created_date\"\
            , nullable = false, updatable = false)"
          format: date-time
        modifiedDate:
          example: 2024-09-25T21:56:13.638-0700
          description: Date of object modification
          type: string
          x-field-extra-annotation: "@LastModifiedDate \n @Column(name = \"last_modified_date\"\
            , nullable = false )"
          format: date-time
      xml: {name: Organization}
    Address:
      required: [city, name, state, street1, postal_code]
      type: object
      properties:
        hasWifi: {type: boolean}
        userId: {type: string, format: uuid}
        addressType:
          type: string
          description: The type of address
          enum: [home, mail, work, school, other]
          example: home
        name: {type: string, description: full name of addressee, example: Henry Johnson,
          x-thorapi-dataField: advanced=true, x-thorapi-secureField: true}
        street1: {type: string, description: street address line 1, example: 123 Daydream
            Blvd.}
        street2: {type: string, description: street address line 2, example: Apt.
            7}
        city: {type: string, description: full name of city, example: San Francisco,
          x-thorapi-dataField: advanced=true, x-thorapi-secureField: true}
        state: {minLength: 2, maxLength: 2, type: string, description: State of residence
            2-character code (USA), example: CA, x-thorapi-dataField: advanced=true,
          x-thorapi-secureField: true}
        country: {maxLength: 3, minLength: 3, type: string, description: 3 character
            country code (upper case)}
        postal_code: {maxLength: 10, minLength: 10, type: string, pattern: '^\d{5}-\d{4}$',
          description: 5+4 digit zip code, example: 94210-0000}
        id:
          example: 2693c27e-229e-493b-ba1c-1ac3dde84637
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n   // @Column(updatable = false, nullable\
            \ = false, columnDefinition = \"binary(16) default (uuid_to_bin(uuid()))\"\
            )\n    @GeneratedValue(generator = \"UUID\")\n    @GenericGenerator(name\
            \ = \"UUID\", strategy = \"org.hibernate.id.UUIDGenerator\")"
          format: uuid
        ownerId: {example: 459e7032-db01-4fff-9b64-0bb1046e1b8e, description: Unique
            identifier for owner of the object in the system, type: string, x-field-extra-annotation: '@CreatedBy',
          format: uuid}
        lastModifiedById: {example: 0565e8b8-99d3-40cf-9f06-239495ca8ea4, description: Unique
            identifier for user who last modifed the object in the system, type: string,
          x-field-extra-annotation: '@LastModifiedBy', format: uuid}
        createdDate:
          example: 2024-09-25T21:56:13.639-0700
          description: Date of object creation
          type: string
          x-field-extra-annotation: "@CreatedDate \n @Column(name = \"created_date\"\
            , nullable = false, updatable = false)"
          format: date-time
        modifiedDate:
          example: 2024-09-25T21:56:13.639-0700
          description: Date of object modification
          type: string
          x-field-extra-annotation: "@LastModifiedDate \n @Column(name = \"last_modified_date\"\
            , nullable = false )"
          format: date-time
      xml: {name: Address}
    ContentData:
      type: object
      required: [name]
      properties:
        name: {type: string, example: Widget Adapter}
        contentData: {type: string, example: The full content, maxLength: 50000, minLength: 50}
        releaseDate: {type: string, format: date-time}
        id:
          example: f3e0d77a-6431-4ca7-8d98-f39624e3aebc
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n   // @Column(updatable = false, nullable\
            \ = false, columnDefinition = \"binary(16) default (uuid_to_bin(uuid()))\"\
            )\n    @GeneratedValue(generator = \"UUID\")\n    @GenericGenerator(name\
            \ = \"UUID\", strategy = \"org.hibernate.id.UUIDGenerator\")"
          format: uuid
        ownerId: {example: c52c0d9f-a088-413a-823c-b45f491a3609, description: Unique
            identifier for owner of the object in the system, type: string, x-field-extra-annotation: '@CreatedBy',
          format: uuid}
        lastModifiedById: {example: b4fb8939-d2a9-475c-8db1-00dee3ddbe89, description: Unique
            identifier for user who last modifed the object in the system, type: string,
          x-field-extra-annotation: '@LastModifiedBy', format: uuid}
        createdDate:
          example: 2024-09-25T21:56:13.639-0700
          description: Date of object creation
          type: string
          x-field-extra-annotation: "@CreatedDate \n @Column(name = \"created_date\"\
            , nullable = false, updatable = false)"
          format: date-time
        modifiedDate:
          example: 2024-09-25T21:56:13.639-0700
          description: Date of object modification
          type: string
          x-field-extra-annotation: "@LastModifiedDate \n @Column(name = \"last_modified_date\"\
            , nullable = false )"
          format: date-time
      xml: {name: ContentData}
    Rating:
      type: object
      required: [contentId]
      properties:
        targetType:
          type: string
          enum: [homepage, blog, product, null]
          description: target object for the rating and comments
        contentId: {type: string, format: uuid, description: The unique identifier
            for the content item}
        comments: {type: string, example: Your real feelings, maxLength: 100000}
        url: {type: string, example: The URL of the rating record is about, maxLength: 500}
        rating: {type: integer, format: int64, minimum: 0, maximum: 10}
        id:
          example: fbacfc48-4d39-42c2-82bb-31619f575f1e
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n   // @Column(updatable = false, nullable\
            \ = false, columnDefinition = \"binary(16) default (uuid_to_bin(uuid()))\"\
            )\n    @GeneratedValue(generator = \"UUID\")\n    @GenericGenerator(name\
            \ = \"UUID\", strategy = \"org.hibernate.id.UUIDGenerator\")"
          format: uuid
        ownerId: {example: 0ba6944e-8973-48e0-b6eb-8c129dc09245, description: Unique
            identifier for owner of the object in the system, type: string, x-field-extra-annotation: '@CreatedBy',
          format: uuid}
        lastModifiedById: {example: ed0d1151-9ede-444a-be85-468c063b0dde, description: Unique
            identifier for user who last modifed the object in the system, type: string,
          x-field-extra-annotation: '@LastModifiedBy', format: uuid}
        createdDate:
          example: 2024-09-25T21:56:13.640-0700
          description: Date of object creation
          type: string
          x-field-extra-annotation: "@CreatedDate \n @Column(name = \"created_date\"\
            , nullable = false, updatable = false)"
          format: date-time
        modifiedDate:
          example: 2024-09-25T21:56:13.640-0700
          description: Date of object modification
          type: string
          x-field-extra-annotation: "@LastModifiedDate \n @Column(name = \"last_modified_date\"\
            , nullable = false )"
          format: date-time
      xml: {name: Rating}
    ThorUXMeta:
      type: object
      description: Metadata for ThorUX components.
      properties:
        thoruxComponents: {type: string, description: Temporary string holder for
            config data., example: 'theme: odin, locale: en'}
        id:
          example: 58925a16-a5fa-42c7-b720-d1b6302f671a
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n   // @Column(updatable = false, nullable\
            \ = false, columnDefinition = \"binary(16) default (uuid_to_bin(uuid()))\"\
            )\n    @GeneratedValue(generator = \"UUID\")\n    @GenericGenerator(name\
            \ = \"UUID\", strategy = \"org.hibernate.id.UUIDGenerator\")"
          format: uuid
        ownerId: {example: 2998db3d-d9fb-4c83-be2a-8b3de78b1dbe, description: Unique
            identifier for owner of the object in the system, type: string, x-field-extra-annotation: '@CreatedBy',
          format: uuid}
        lastModifiedById: {example: 422e5f17-5632-4ea4-8f6b-3060fd08c3d5, description: Unique
            identifier for user who last modifed the object in the system, type: string,
          x-field-extra-annotation: '@LastModifiedBy', format: uuid}
        createdDate:
          example: 2024-09-25T21:56:13.640-0700
          description: Date of object creation
          type: string
          x-field-extra-annotation: "@CreatedDate \n @Column(name = \"created_date\"\
            , nullable = false, updatable = false)"
          format: date-time
        modifiedDate:
          example: 2024-09-25T21:56:13.640-0700
          description: Date of object modification
          type: string
          x-field-extra-annotation: "@LastModifiedDate \n @Column(name = \"last_modified_date\"\
            , nullable = false )"
          format: date-time
    ThorUXComponent:
      type: object
      properties:
        componentType: {type: string, description: The type of the UX component.,
          example: button}
        status:
          type: string
          description: The status of the component in the UX.
          enum: [ready, pending, disabled, hidden]
          example: ready
        settings:
          type: string
          description: The option for the component in the UX.
          enum: [opt1, opt2, opt3, opt4]
          example: opt1
        id:
          example: ee7dbcb7-bbaf-42da-afd3-a1f3fd04d4bc
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n   // @Column(updatable = false, nullable\
            \ = false, columnDefinition = \"binary(16) default (uuid_to_bin(uuid()))\"\
            )\n    @GeneratedValue(generator = \"UUID\")\n    @GenericGenerator(name\
            \ = \"UUID\", strategy = \"org.hibernate.id.UUIDGenerator\")"
          format: uuid
        ownerId: {example: c3f5cc4d-6ee9-4c00-9ecb-0448f6c4ae5f, description: Unique
            identifier for owner of the object in the system, type: string, x-field-extra-annotation: '@CreatedBy',
          format: uuid}
        lastModifiedById: {example: aabf1554-ad9b-46df-91fa-5c81d6ddefa8, description: Unique
            identifier for user who last modifed the object in the system, type: string,
          x-field-extra-annotation: '@LastModifiedBy', format: uuid}
        createdDate:
          example: 2024-09-25T21:56:13.640-0700
          description: Date of object creation
          type: string
          x-field-extra-annotation: "@CreatedDate \n @Column(name = \"created_date\"\
            , nullable = false, updatable = false)"
          format: date-time
        modifiedDate:
          example: 2024-09-25T21:56:13.641-0700
          description: Date of object modification
          type: string
          x-field-extra-annotation: "@LastModifiedDate \n @Column(name = \"last_modified_date\"\
            , nullable = false )"
          format: date-time
    Login:
      type: object
      properties:
        username: {type: string, maxLength: 64}
        password: {type: string}
        description: {type: string}
        id:
          example: f7aabaab-1c3b-4953-bc1a-ed012854ecbe
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n   // @Column(updatable = false, nullable\
            \ = false, columnDefinition = \"binary(16) default (uuid_to_bin(uuid()))\"\
            )\n    @GeneratedValue(generator = \"UUID\")\n    @GenericGenerator(name\
            \ = \"UUID\", strategy = \"org.hibernate.id.UUIDGenerator\")"
          format: uuid
        ownerId: {example: 4abc6a2d-5c74-4a2a-a423-9061399a4347, description: Unique
            identifier for owner of the object in the system, type: string, x-field-extra-annotation: '@CreatedBy',
          format: uuid}
        lastModifiedById: {example: a4e7938a-b82a-4711-bc60-fc80dad64162, description: Unique
            identifier for user who last modifed the object in the system, type: string,
          x-field-extra-annotation: '@LastModifiedBy', format: uuid}
        createdDate:
          example: 2024-09-25T21:56:13.641-0700
          description: Date of object creation
          type: string
          x-field-extra-annotation: "@CreatedDate \n @Column(name = \"created_date\"\
            , nullable = false, updatable = false)"
          format: date-time
        modifiedDate:
          example: 2024-09-25T21:56:13.641-0700
          description: Date of object modification
          type: string
          x-field-extra-annotation: "@LastModifiedDate \n @Column(name = \"last_modified_date\"\
            , nullable = false )"
          format: date-time
    Logout:
      type: object
      properties:
        description: {type: string}
        id:
          example: 7ea4e1bd-1c26-4844-96f6-1388ecdf92d2
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n   // @Column(updatable = false, nullable\
            \ = false, columnDefinition = \"binary(16) default (uuid_to_bin(uuid()))\"\
            )\n    @GeneratedValue(generator = \"UUID\")\n    @GenericGenerator(name\
            \ = \"UUID\", strategy = \"org.hibernate.id.UUIDGenerator\")"
          format: uuid
        ownerId: {example: 1d23625b-bf0a-4304-b518-929d6f159bb3, description: Unique
            identifier for owner of the object in the system, type: string, x-field-extra-annotation: '@CreatedBy',
          format: uuid}
        lastModifiedById: {example: 98c6e98c-284e-420f-b12e-e4340fa0a21a, description: Unique
            identifier for user who last modifed the object in the system, type: string,
          x-field-extra-annotation: '@LastModifiedBy', format: uuid}
        createdDate:
          example: 2024-09-25T21:56:13.641-0700
          description: Date of object creation
          type: string
          x-field-extra-annotation: "@CreatedDate \n @Column(name = \"created_date\"\
            , nullable = false, updatable = false)"
          format: date-time
        modifiedDate:
          example: 2024-09-25T21:56:13.641-0700
          description: Date of object modification
          type: string
          x-field-extra-annotation: "@LastModifiedDate \n @Column(name = \"last_modified_date\"\
            , nullable = false )"
          format: date-time
    PersistentLogin:
      type: object
      properties:
        username: {type: string, maxLength: 64}
        series: {type: string, maxLength: 64}
        token: {type: string, maxLength: 64}
        last_used: {type: string, format: date-time}
        id:
          example: 92819029-6ae2-4153-8b32-e068dc115978
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n   // @Column(updatable = false, nullable\
            \ = false, columnDefinition = \"binary(16) default (uuid_to_bin(uuid()))\"\
            )\n    @GeneratedValue(generator = \"UUID\")\n    @GenericGenerator(name\
            \ = \"UUID\", strategy = \"org.hibernate.id.UUIDGenerator\")"
          format: uuid
        ownerId: {example: 4e5656aa-6385-40a5-b193-16db4009d788, description: Unique
            identifier for owner of the object in the system, type: string, x-field-extra-annotation: '@CreatedBy',
          format: uuid}
        lastModifiedById: {example: 1ef505c2-be01-4cbd-9282-cedb1037c7ce, description: Unique
            identifier for user who last modifed the object in the system, type: string,
          x-field-extra-annotation: '@LastModifiedBy', format: uuid}
        createdDate:
          example: 2024-09-25T21:56:13.642-0700
          description: Date of object creation
          type: string
          x-field-extra-annotation: "@CreatedDate \n @Column(name = \"created_date\"\
            , nullable = false, updatable = false)"
          format: date-time
        modifiedDate:
          example: 2024-09-25T21:56:13.642-0700
          description: Date of object modification
          type: string
          x-field-extra-annotation: "@LastModifiedDate \n @Column(name = \"last_modified_date\"\
            , nullable = false )"
          format: date-time
      required: [username, series, token, last_used]
    Role:
      type: object
      properties:
        userId: {type: string, format: uuid}
        roleName:
          type: string
          description: the role
          enum: [ANONYMOUS, CUSTOMER, STAFF, ADMIN]
          default: ANONYMOUS
        id:
          example: 069a8e08-bccc-40ef-9c69-83732919fc05
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n   // @Column(updatable = false, nullable\
            \ = false, columnDefinition = \"binary(16) default (uuid_to_bin(uuid()))\"\
            )\n    @GeneratedValue(generator = \"UUID\")\n    @GenericGenerator(name\
            \ = \"UUID\", strategy = \"org.hibernate.id.UUIDGenerator\")"
          format: uuid
        ownerId: {example: 7d6affc5-7449-4288-bbbe-dbe917909d9e, description: Unique
            identifier for owner of the object in the system, type: string, x-field-extra-annotation: '@CreatedBy',
          format: uuid}
        lastModifiedById: {example: 30d3570c-83ac-4f91-bdee-27a33584a1d8, description: Unique
            identifier for user who last modifed the object in the system, type: string,
          x-field-extra-annotation: '@LastModifiedBy', format: uuid}
        createdDate:
          example: 2024-09-25T21:56:13.642-0700
          description: Date of object creation
          type: string
          x-field-extra-annotation: "@CreatedDate \n @Column(name = \"created_date\"\
            , nullable = false, updatable = false)"
          format: date-time
        modifiedDate:
          example: 2024-09-25T21:56:13.642-0700
          description: Date of object modification
          type: string
          x-field-extra-annotation: "@LastModifiedDate \n @Column(name = \"last_modified_date\"\
            , nullable = false )"
          format: date-time
    Authority:
      type: object
      properties:
        userId: {type: string, format: uuid}
        username: {type: string, maxLength: 50}
        authority: {type: string, maxLength: 50}
        id:
          example: 8b314fdc-2708-42d7-b906-6815de380443
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n   // @Column(updatable = false, nullable\
            \ = false, columnDefinition = \"binary(16) default (uuid_to_bin(uuid()))\"\
            )\n    @GeneratedValue(generator = \"UUID\")\n    @GenericGenerator(name\
            \ = \"UUID\", strategy = \"org.hibernate.id.UUIDGenerator\")"
          format: uuid
        ownerId: {example: 16593300-7527-445d-85b2-12a7e1366fef, description: Unique
            identifier for owner of the object in the system, type: string, x-field-extra-annotation: '@CreatedBy',
          format: uuid}
        lastModifiedById: {example: 0c2f502b-9863-4f84-9b0a-deff70bdb3d3, description: Unique
            identifier for user who last modifed the object in the system, type: string,
          x-field-extra-annotation: '@LastModifiedBy', format: uuid}
        createdDate:
          example: 2024-09-25T21:56:13.642-0700
          description: Date of object creation
          type: string
          x-field-extra-annotation: "@CreatedDate \n @Column(name = \"created_date\"\
            , nullable = false, updatable = false)"
          format: date-time
        modifiedDate:
          example: 2024-09-25T21:56:13.642-0700
          description: Date of object modification
          type: string
          x-field-extra-annotation: "@LastModifiedDate \n @Column(name = \"last_modified_date\"\
            , nullable = false )"
          format: date-time
      required: [username, authority]
    AclSid:
      type: object
      properties:
        sid: {type: string, maxLength: 245, nullable: true}
        principal: {type: integer, format: int32, nullable: true}
        id:
          example: b6802e4f-8f77-41dd-b92d-ad9804b004dc
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n   // @Column(updatable = false, nullable\
            \ = false, columnDefinition = \"binary(16) default (uuid_to_bin(uuid()))\"\
            )\n    @GeneratedValue(generator = \"UUID\")\n    @GenericGenerator(name\
            \ = \"UUID\", strategy = \"org.hibernate.id.UUIDGenerator\")"
          format: uuid
        ownerId: {example: 9c934598-2be2-41b5-8746-20f0470ec443, description: Unique
            identifier for owner of the object in the system, type: string, x-field-extra-annotation: '@CreatedBy',
          format: uuid}
        lastModifiedById: {example: 1263a3a9-d663-4704-87a7-c05f33789594, description: Unique
            identifier for user who last modifed the object in the system, type: string,
          x-field-extra-annotation: '@LastModifiedBy', format: uuid}
        createdDate:
          example: 2024-09-25T21:56:13.643-0700
          description: Date of object creation
          type: string
          x-field-extra-annotation: "@CreatedDate \n @Column(name = \"created_date\"\
            , nullable = false, updatable = false)"
          format: date-time
        modifiedDate:
          example: 2024-09-25T21:56:13.643-0700
          description: Date of object modification
          type: string
          x-field-extra-annotation: "@LastModifiedDate \n @Column(name = \"last_modified_date\"\
            , nullable = false )"
          format: date-time
    AclClass:
      type: object
      properties:
        class: {type: string, maxLength: 245, nullable: true}
        id:
          example: 8fbd51a6-c2ce-4702-987d-5d537d80a87e
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n   // @Column(updatable = false, nullable\
            \ = false, columnDefinition = \"binary(16) default (uuid_to_bin(uuid()))\"\
            )\n    @GeneratedValue(generator = \"UUID\")\n    @GenericGenerator(name\
            \ = \"UUID\", strategy = \"org.hibernate.id.UUIDGenerator\")"
          format: uuid
        ownerId: {example: 7438dc0e-20e4-435b-9ed2-aa7507f3edc9, description: Unique
            identifier for owner of the object in the system, type: string, x-field-extra-annotation: '@CreatedBy',
          format: uuid}
        lastModifiedById: {example: efb7cd35-a3e2-4781-9fae-36dd39448018, description: Unique
            identifier for user who last modifed the object in the system, type: string,
          x-field-extra-annotation: '@LastModifiedBy', format: uuid}
        createdDate:
          example: 2024-09-25T21:56:13.643-0700
          description: Date of object creation
          type: string
          x-field-extra-annotation: "@CreatedDate \n @Column(name = \"created_date\"\
            , nullable = false, updatable = false)"
          format: date-time
        modifiedDate:
          example: 2024-09-25T21:56:13.643-0700
          description: Date of object modification
          type: string
          x-field-extra-annotation: "@LastModifiedDate \n @Column(name = \"last_modified_date\"\
            , nullable = false )"
          format: date-time
    AclObjectIdentity:
      type: object
      properties:
        object_id_class: {type: integer, format: int64, nullable: true}
        object_id_identity: {type: integer, format: int64, nullable: true}
        parent_object: {type: integer, format: int64, nullable: true}
        owner_sid: {type: integer, format: int64, nullable: true}
        entries_inheriting: {type: integer, format: int32, nullable: true}
        id:
          example: f7800bfc-808c-4385-9a23-9c05f5eac0e6
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n   // @Column(updatable = false, nullable\
            \ = false, columnDefinition = \"binary(16) default (uuid_to_bin(uuid()))\"\
            )\n    @GeneratedValue(generator = \"UUID\")\n    @GenericGenerator(name\
            \ = \"UUID\", strategy = \"org.hibernate.id.UUIDGenerator\")"
          format: uuid
        ownerId: {example: ce699b11-6cf5-42e0-8788-7fc097984dc1, description: Unique
            identifier for owner of the object in the system, type: string, x-field-extra-annotation: '@CreatedBy',
          format: uuid}
        lastModifiedById: {example: 718c6191-4e35-4e7d-94dc-28bdbc2f8e5a, description: Unique
            identifier for user who last modifed the object in the system, type: string,
          x-field-extra-annotation: '@LastModifiedBy', format: uuid}
        createdDate:
          example: 2024-09-25T21:56:13.643-0700
          description: Date of object creation
          type: string
          x-field-extra-annotation: "@CreatedDate \n @Column(name = \"created_date\"\
            , nullable = false, updatable = false)"
          format: date-time
        modifiedDate:
          example: 2024-09-25T21:56:13.644-0700
          description: Date of object modification
          type: string
          x-field-extra-annotation: "@LastModifiedDate \n @Column(name = \"last_modified_date\"\
            , nullable = false )"
          format: date-time
    AclEntry:
      type: object
      properties:
        acl_object_identity: {type: integer, format: int64, nullable: true}
        ace_order: {type: integer, format: int32, nullable: true}
        sid: {type: integer, format: int64, nullable: true}
        mask: {type: integer, format: int32, nullable: true}
        granting: {type: integer, format: int32, nullable: true}
        audit_success: {type: integer, format: int32, nullable: true}
        audit_failure: {type: integer, format: int32, nullable: true}
        id:
          example: d4423381-3932-45f5-982d-cc58706bd199
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n   // @Column(updatable = false, nullable\
            \ = false, columnDefinition = \"binary(16) default (uuid_to_bin(uuid()))\"\
            )\n    @GeneratedValue(generator = \"UUID\")\n    @GenericGenerator(name\
            \ = \"UUID\", strategy = \"org.hibernate.id.UUIDGenerator\")"
          format: uuid
        ownerId: {example: 5cffc31b-c4ad-4cb7-8e97-258d5bf0c1b3, description: Unique
            identifier for owner of the object in the system, type: string, x-field-extra-annotation: '@CreatedBy',
          format: uuid}
        lastModifiedById: {example: e8175fc9-d7e4-4338-b809-ae3988235111, description: Unique
            identifier for user who last modifed the object in the system, type: string,
          x-field-extra-annotation: '@LastModifiedBy', format: uuid}
        createdDate:
          example: 2024-09-25T21:56:13.644-0700
          description: Date of object creation
          type: string
          x-field-extra-annotation: "@CreatedDate \n @Column(name = \"created_date\"\
            , nullable = false, updatable = false)"
          format: date-time
        modifiedDate:
          example: 2024-09-25T21:56:13.644-0700
          description: Date of object modification
          type: string
          x-field-extra-annotation: "@LastModifiedDate \n @Column(name = \"last_modified_date\"\
            , nullable = false )"
          format: date-time
  securitySchemes:
    thorapi_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://{username}.valkyrlabs.com:{port}/oauth
          scopes: {'write:items': modify owned items, 'read:items': read owned items}
