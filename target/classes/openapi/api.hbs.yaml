openapi: 3.0.1

# ThorAPI Enhanced Sections
info:
externalDocs:
servers:
tags:
  - name: administration
    description: Secured Admin-only calls
paths:
{{#each schemas as |schema key|}}

  /{{key}}:
    get:
      tags:
        - {{key}}
      summary: Retrieve a list of {{key}}s
      description: Retrieves a list of {{key}}s.
      x-spring-cacheable: true
      operationId: get{{key}}List
      responses:
        '200':
          description: Successfully retrieved the list of {{key}}s.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/{{key}}'
        '404':
          description: No {{key}}s were found.
        '500':
          description: Internal server error.

    post:
      tags:
        - {{key}}
      summary: Create a new {{key}}
      description: Creates a new {{key}}.
      operationId: post{{key}}
      requestBody:
        description: {{key}} details.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/{{key}}'
      responses:
        '201':
          description: {{key}} created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/{{key}}'
        '400':
          description: Invalid input.
        '404':
          description: {{key}} not found.
        '500':
          description: Internal server error.


  /{{key}}/{id}:
    get:
      tags:
        - {{key}}
      summary: Retrieve a single {{key}}
      description: Retrieves a single {{key}} for a specific uid.
      x-spring-cacheable: true
      operationId: get{{key}}
      parameters:
        - name: id
          schema:
            type: string
            format: uuid
          in: path
          required: true
          description: Unique identifier for the {{key}}.

      responses:
        '200':
          description: Successfully retrieved the {{key}}.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/{{key}}'
        '404':
          description: {{key}} not found.
        '500':
          description: Internal server error.

    put:
      tags:
        - {{key}}
      summary: Update an existing {{key}}
      description: Updates an existing {{key}}.
      operationId: update{{key}}
      parameters:
        - name: id
          schema:
            type: string
            format: uuid
          in: path
          required: true
          description: Unique identifier for the {{key}}.

      requestBody:
        description: Updated {{key}} details.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/{{key}}'
      responses:
        '200':
          description: {{key}} updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/{{key}}'
        '400':
          description: Invalid input.
        '404':
          description: {{key}} not found.
        '500':
          description: Internal server error.

    delete:
      tags:
        - {{key}}
      summary: Delete a {{key}}.
      description: Deletes a specific {{key}}.
      operationId: delete{{key}}
      parameters:
        - name: id
          schema:
            type: string
            format: uuid
          in: path
          required: true
          description: Unique identifier for the {{key}}.

      responses:
        '204':
          description: {{key}} deleted successfully.
        '404':
          description: {{key}} not found.
        '500':
          description: Internal server error.


{{/each}}

components:
  parameters:
    id:
      name: id
      in: path
      required: true
      description: The unique identifier of the object to retrieve.
      schema:
        type: string
        format: uuid

  schemas:

    #TestInclude: DOES NOT WORK WITH CURRENT CODEGEN
    #  type: object
    #  description: test the include of a component
    #  properties:
    #    audioFile:
    #      $ref: './audio.yaml#/Audio'
    #    description:
    #      type: string

    ## Backup System - experimental
    BackupConfig:
      type: object
      description: System backup configuration for backup jobs workstation and server
      properties:
        name:
          type: string

        description:
          type: string
          description: source code only backup of test workspace
        
        remoteConfigUrl:
          type: string
          format: url
          description: basically a callback url

        runNumber:
          type: integer
          description: the number of times this has been run before

        percentComplete:
          type: integer
          description: 0-100 percentage of compleion of this backup if known
          
        type:
          description: the type of backup ie Workstation or Server
          type: string
          enum:
            - workstation
            - server
            - desktop
            - laptop
            - device            
        
        priorityLevel:
          type: string
          enum:
            - low
            - medium
            - high
            - critical

        backupDir:
          type: string
          example: /users/jax/project-one
          description: path to the folder that will be backed up

        workingDir:
          type: string
          example: /users/jax/project-one
          description: path to the folder that will be backed up

        skiplist:
          type: string
          description: a json string describing the items to skip in the backup set
          example: node_modules, etc.
          

    ## 6D Management System
    StrategicPriority:
      type: object
      description: Organization-Wide Strategic Priorities
      properties:
        name:
          type: string
        description:
          type: string
          description: high-level description of the strategic priority          
        priorityLevel:
          type: string
          enum:
            - low
            - medium
            - high
            - critical
        imageUrl:
          type: string
          description: URL for the strategic priority
          format: url
          example: https://strategic-images.irl/image.png
        
        startDate:
          type: string
          format: date
        targetDate:
          type: string
          format: date

        goals:
          type: array
          items:
            $ref: '#/components/schemas/Goal'         
        status:
          type: string
          enum: 
            - Not-Started
            - In-Progress
            - Complete
    
    KeyMetric:
      type: object
      description: A Key Metric for Tracking Strategy Results
      properties:
        goalId:
          type: string
          format: uuid
        metricName:
          type: string
        metricValue:
          type: float
          description: actual value of the metric
        targetValue:
          type: float          
          description: expected value of the metric

    Goal:
      type: object
      description: A Strategic Goal
      properties:
        strategicPriorityId:
          type: string
          format: uuid
          description: The strategic priority that this goal supports.
        name:
          type: string
          description: the name of the goal
        description:
          type: string
          description: the description of the goal
        keyMetrics:
          type: array
          items:
            $ref: '#/components/schemas/KeyMetric'          
          description: measurements used to track success
        goalDependencies:
          type: array
          items:
            $ref: '#/components/schemas/GoalDependency'
        expectedOutcome:
          type: string
          description: the positive expected outcome of the goal
          example: faster code execution
        risks:
          type: string
          description: description of the risk if the goal is not successful
          example: lower stock price
        timeline:
          type: string

    GoalDependency:
      type: object
      description: A dependency that a goal depends upon
      properties:
        goalId:
          type: string
          format: uuid
        dependencyOrder:
          type: integer
          description: the order in which this dependency exists
        dependencyName:
          type: string
          description: the name of the dependency

## Percival the Dragon Slayer
    Game:
      type: object
      description: Percival the Dragon Slayer
      properties:
        name: 
          type: string
          description: the name of the game
        weapons:
          type: map
          items:
            $ref: '#/components/schemas/GameWeaponIDX'

    GameWeaponIDX:
      type: object
      description: IDX object that links weapons to games
      properties:
        gameId:
          type: string
          format: uuid
        weaponId:
          type: string
          format: uuid

    Attack:
      type: object
      description: DEMO attack of various type
      properties:
        name: 
          type: string
          description: the name of the attack    
        type:
          type: string
          enum:
            - FRONTAL
            - SNEAK
            - FROM_ABOVE
            - FROM_BELOW
            - WATER
            - LAND
            - AIR
        weapon:
            $ref: '#/components/schemas/Weapon'

    Weapon:
      type: object
      description: DEMO weapon that can be used for the game
      properties:
        attackId:
          type: string
          format: uuid
        name: 
          type: string
          description: the name of the weapon
        game:
          $ref: '#/components/schemas/GameWeaponIDX'
        harmLevel:
          type: integer
          description: the the damage output level the weapon can have
          minimum: 0
          maximum: 100
        weight:
          type: integer
          description: how much one of these weapons weighs in lbs
        color:
          type: string
          enum:
            - BLACK
            - CAMO-AIRFORCE
            - CAMO-MARINE
            - CAMO-NAVY
            - CAMO-ARMY
            - GRAY
            - OLIVE
            - SILVER
            - GOLD            
            - EXOTIC
        weaponType:
          type: string
          enum:
            - BALLISTiC
            - PROJECTILE
            - FIRE
            - KINETIC
            - NUCLEAR
            - MUNITIONS
            - MELEE
            - AIRCRAFT            
            - VESSELS
            - BOWS
            - SLINGS
          description: the type of the weapon
    
    

    Level:
      type: object
      description: a game level
      properties:
        name: 
          type: string
          description: the name of level
        level:
          type: integer
          description: the sequential level index (if applicable)
          minimum: 0
        scoreMultiplier:
          type: integer
          description: use to increment extra points for harder levels
        color:
          type: string
          enum:
            - BLACK
            - CAMO-AIRFORCE
            - CAMO-MARINE
            - CAMO-NAVY
            - CAMO-ARMY
            - GRAY
            - OLIVE
            - SILVER
            - GOLD            
            - EXOTIC
        levelType:
          type: string
          enum:
            - MAP
            - ACHIEVEMENT
            - BATTLE
            - CINEMATIC
          description: the type of the level



    ## SecureField KMS - the ultimate encryption solution
    SecureKey:
      type: object
      description: SecureKey is the KMS for the SecureField keys 
      x-valkyrai-service: microservice
      properties:
        notes:
          description: any notes about the key
          type: string
          maxLength: 1000
          example: "This key was generated by the system"

        algorithm:
          description: the algorithm used for encryption/decryption
          type: string

        version:
          description: the version of this key
          type: string

        keyHash:
          description: the searchable hash of the key itself
          type: string
          minLength: 10
          maxLength: 100

        cipherWorkCost:
          description: the exponential strength of the BCrypt hashing used by the Hashing cipher
          example: 12
          type: integer
          minimum: 10
          maximum: 35
        
        keyValue:
          description: the key itself
          type: string
          minLength: 10
         # x-thorapi-secureField: true

        status:
          type: string
          enum:
            - ACTIVE
            - DEFAULT            
            - ARCHIVED
            - REVOKED
            - INVALID
          x-enum-descriptions:
            - Key is actively used
            - Key is the default to use when no specif key is provided
            - Key is not being used but still valid
            - Key is revoked and MUST NOT be used
            - Key is invalid and will not work
          x-enum-varnames:
            - keyActive
            - keyDefault
            - keyArchived
            - keyRevoked
            - keyInvalid
      required:
        - algorithm
        - version
        - keyValue
        - status

    Build:
      type: object
      description: Represents a ThorAPI build including success or failure
      properties:
        name:
          type: string
        applicationId:
          type: string
          format: uuid
        status:
          type: string
          enum:
            - PENDING
            - RUNNING
            - SUCCESS
            - FAILURE
        projectPath:
          type: string
        testEnumCodegen:
          type: integer
          format: int32
          enum:
            - 0
            - 10
            - 1000
          x-enum-descriptions:
            - 'zero balance'
            - 'money for lunch'
            - 'get on that plane'
          x-enum-varnames:
            - broke
            - poor
            - rich
        mavenHome:
          type: string
          
        outputs:
          type: array
          items:
            $ref: '#/components/schemas/BuildOutput'

        dependencies:
          type: array
          items:
            $ref: '#/components/schemas/Depend'
      required:
        - name
        - status
        - projectPath
        - mavenHome

    BuildOutput:
      type: object
      description: TODO BuildOutput CLASS DESCRIPTION   
      properties:
        applicationId:
          type: string
          format: uuid      
        buildId:
          type: string
          format: uuid
        lastSuccessfulRun:
          type: string
          format: date-time
        success:
          type: boolean
        output:
          type: string
        solutions:
          type: array
          items:
            $ref: '#/components/schemas/Solution'
      required:
        - buildId
        - timestamp
        - success
        - output

    # because this is a "leaf" object in the heirarchy 
    # no need for it to duplicate the "BaseEntity" fields    
    Solution:
      type: object
      description: TODO Solution CLASS DESCRIPTION   
      properties:
        buildOutputId:
          type: string
          format: uuid
        description:
          type: string
        appliedFix:
          type: boolean
      required:
        - buildOutputId
        - description
        - appliedFix

    # because this is a "leaf" object in the heirarchy 
    # no need for it to duplicate the "BaseEntity" fields
    Depend:
      type: object
      description: TODO Depend CLASS DESCRIPTION   
      properties:
        groupId:
          type: string
        artifactId:
          type: string
        version:
          type: string
        scope:
          type: string
        status:
          type: string
          enum:
            - UP_TO_DATE
            - OUTDATED
            - MISSING
        buildId:
          type: string
          format: uuid
      required:
        - groupId
        - artifactId
        - version

## VALKYRAI SYSTEM

    LlmDetails:
      type: object
      description: TODO LlmDetails CLASS DESCRIPTION   
      properties:
        name:
          type: string
          description: The name of the LLM
        version:
          type: string
          description: The vendor-specific version of the LLM
          example: v3.0.3-B8
        notes:
          type: string
          description: Notes on the LLM implementation
        role:
          type: string
          enum: [user, assistant]
          description: the user role to set for the target LLM
        provider:
          type: string
          enum: [valkyrai, openai, llama, phi, gemma, mistral, claude, gemini, other]
        apiType:
          type: string
          enum: [openai, ollama, other]

        initialPrompt:
          maxLength: 5000
          minLength: 64
          type: string
          description: the initial prompt to instruct the LLM how to behave
          example: You are a helpful assistant

        apiKey:
          maxLength: 1024
          minLength: 16
          type: string
          description: the api-key to access the llm
          format: password
          example: D6ObBZ599Z3xkuohG3/cogxZYwhxdVyLlIAPanlO35I=
          x-thorapi-secureField: true

        credential:
          type: string
          description: the user name to access the LLM
          x-thorapi-secureField: true

        credentialPassword:
          maxLength: 35
          minLength: 8
          type: string
          description: the password to access the LLM
          format: password
          example: c@nnotBeH@ckd!
          x-field-extra-annotation:
            "@SecureField(encryptionType = SecureField.EncryptionType.HASHED, strength = 10)"

        url:
          type: string
          format: url
          description: the URL to connect to the LLM api
        requestParameters:
          type: string
          description: request parameters to send to the service
        meta:
          type: string
          description: metadata in any text format to be used in client code
      xml:
        name: LLMDetails

    Workflow:
      type: object
      description: ValkyrAI Workflow object manages execution and state of automation workflows
      properties:
        name:
          type: string
          description: short description of this workflow
          example: Customer Email Workflow      
        description:
          type: string
          description: detailed description of this workflow
          example: this workflow is designed to keep customers in the loop
        role:
          type: string
          enum: [user, assistant, system]
          description: the role with permissions to execute the workfow as
        schedule:
          type: string
          example: '*/20 * * * * ?'
          description: cron string to determine when this runs
        meta:
          type: string
          description: metadata in any text format to be used in client code
        tasks:
          description: an array of Tasks to be performed
          type: array
          items:
            $ref: '#/components/schemas/Task'         
        state:
          description: an array stateful objects to be used in the workflow
          type: array
          items:
            $ref: '#/components/schemas/WorkflowState'             
        status:
          description: last known status of the workflow
          type: string
          enum: [ running, stopped, ready, warning, error, disabled ]                 
      xml:
        name: Workflow

    WorkflowState:
      type: object
      description: ValkyrAI Workflow State object holds the state container for a workflow
      properties:
        workflowId:
          type: string
          format: uuid
          description: The workflow this state is participating in
        name:
          description: name of the property that holds the value
          type: string
        value:
          description: value of the property
          type: array
          items:
            type: DataObject
    
    Task:
      type: object
      description: ValkyrAI Task object manages execution and state of automation workflows
      properties:
        description:
          type: string
        workflowId:
          type: string
          format: uuid
          description: The workflow this state is participating in
        role:
          type: string
          enum: [user, assistant]
          description: override the workflow role for specific task -login to a system- the role with permissions -temporary user is created
        modules:
          description: an array of ExecModules to be processed
          type: array
          items:
            $ref: '#/components/schemas/ExecModule'              
        status:
          description: last known status of the task
          type: string
          enum: [ running, stopped, ready, good, warning, error, disabled]            
      xml:
        name: Task

    
    ExecModule:
      type: object
      description: ExecModule is the execution unit of the ValkyrAI Workflow Engine
      properties:
        systemId:
          type: string
          format: uuid
          description: UUID of the system object being mutated/read (if any)
                  
        taskId:
          type: string
          format: uuid
          description: The task this module is executing in
        
        role:
          description: the RBAC role to use in mutating/reading any system object
          type: string
          enum: [ anonymous, user, admin ]
        
        name:
          description: the name of the module
          example: EmailSendModule, OpenApiSpecImportModule
          type: string
        
        notes:
          description: notes about the module
          type: string
        
        integrationAccount:
            $ref: '#/components/schemas/IntegrationAccount'

        className:
          description: the name of the implementation class for this module
          example: EmailModule, PipelineModule, RestApiModule
          type: string          
          
          # pick fields must be populated from a simple string list object at the same endpoint
          x-thorapi-dataField: pick~getAvailableVmodules
          
        moduleType:
          description: the type of module
          type: string
          enum: [ broadcast, io, reader, writer, transformer ]
        moduleData:
          type: string
          maxLength: 3000
          description: json for configuring the module
        status:
          description: last known status of the module
          type: string
          enum: [ running, stopped, ready, good, warning, error, disabled]      
      xml:
        name: ExecModule

    EventLog:
      type: object
      description: Logs specific Workflow Related Events 
      properties:
        eventDetails:
          type: string
          description: detailed event description
        status:
          type: string
          enum: [ok, error, disabled]
          description: status for event
      xml:
        name: EventLog

    Application:
      type: object
      description: Application represents a logical system
      properties:
        name:
          type: string
          description: name of the application
        description:
          type: string
          description: detailed description of the application
        isTemplate:
          type: boolean
          description: whether this Application is a Template
        type:
          type: string
          enum: [ full-stack, automation, agent, service, front-end, mobile, ci-cd, lambda ]
          description: type of application
        status:
          type: string
          enum: [ready, deployed, staging, error, disabled]
          description: status for event
        entrypointUrl:
          type: string
          format: url
          description: the url to the 'homepage' or service endpoint
        contentMedia:
          type: array
          items:
            $ref: '#/components/schemas/ContentMediaLink'
      xml:
        name: Application

## Sage Chat API
    ChatMessage:
      type: object
      description: A Chat message sent to a recipient
      properties:
        sessionId:
          type: string
        connected:
          type: boolean
          description: if this chat message is conencted to a service (ws)
        json:
          type: string
          maxLength: 3000
        sourceType:
          type: string
          description: type of the message source
          enum:
            - api
            - server_log
            - p2p
        sourceOwner:
          type: string
          format: uuid
        role:
          type: string
          enum: [user, assistant]
        content:
          maxLength: 100000
          minLength: 10
          type: string
          description: the message to send to the chat service
          example: What is the next step for our adventure?

    ChatResponse:
      type: object
      description: Chatresponse from the other side of the communication
      properties:
        sessionId:
          type: string
        json:
          type: string
          maxLength: 3000
        sourceType:
          type: string
          description: type of the message source
          enum:
            - api
            - server_log
            - p2p
        sourceOwner:
          type: string
          format: uuid
        role:
          type: string
          enum: [user, assistant]
        content:
          maxLength: 100000
          minLength: 10
          type: string
          description: the response fro the chat service
          example: We must cross the mighty Mississippi
    

## Basic Functionality Section
    Reaction:
      required:
        - target
        - value
      type: object
      description: Reaction allows for tagging any content in the system with an emoji
      properties:
        targetObject:
          type: string
          format: uuid
          description: UUID of the system object
          example: ABC234
        reaction:
          type: string
          description: the reaction to the item
          enum:
            - like
            - dislike
            - neutral
            - angry
            - sad
            - question
          example: "neutral"

    Principal:
      required:
        - email
        - password
        - username
      type: object
      description: The Valkyr Principal. Represents a user, service, or agent in the system with preferences and privileges.
      properties:
        firstName:
          type: string
          description: first name of user (encrypted)
          example: Peace
          x-thorapi-dataField: fieldGroup=personal-details
          x-thorapi-secureField: true

        middleName:
          type: string
          description: middle name of user
          example: Love
          x-thorapi-dataField: fieldGroup=personal-details
          x-thorapi-secureField: true          

        lastName:
          type: string
          description: last name of user (encrypted)
          example: Harmony
          x-thorapi-secureField: true

        username:
          maxLength: 60
          minLength: 5
          type: string
          description: Your account user name
          example: Sparky
          x-thorapi-dataField: fieldGroup=personal-details, unique=true
        
        password:
          minLength: 8
          type: string
          description: Your account password
          format: password
          example: HardToGuess1980
          x-field-extra-annotation:
            "@SecureField(encryptionType = SecureField.EncryptionType.HASHED, strength = 10)"

        fingerprint:
          type: string
          description: Encrypted identity (Facial Recognition, Fingerprint Scanner,
            etc.)
          readOnly: true
          example: DK$DFSJaraDD
          x-thorapi-dataField: advanced=true
          x-thorapi-secureField: true

        federalIdentification:
          pattern: ^\d{3}-\d{2}-\d{4}$
          default: 333-22-4444
          type: string
          description: SSN or a 10 digit federal government ID (encrypted)
          example: "111-22-3333"
          x-thorapi-secureField: true

        residenceCountry:
          minLength: 3

          type: string
          description: Country of residence 3-character code
          example: USA
          x-thorapi-dataField: advanced=true
          x-thorapi-secureField: true

        stateIdentification:
          minLength: 10
          # maxLength: 10
          pattern: ^\d{10}$
          type: string
          description: Driver's License or a 10 digit state government ID
          example: 3333333333
          default: 2222222222
          x-thorapi-dataField: advanced=true
          x-thorapi-secureField: true

        residenceState:
          minLength: 2
          # maxLength: 2
          type: string
          description: State of residence 2-character code (USA)
          example: CA
          x-thorapi-dataField: advanced=true
          x-thorapi-secureField: true

        email:
          pattern: ^.+@[^.].*.[a-z]{2,}$
          type: string
          description: The main email address for the user (encrypted)
          format: email
          example: wiley.coyote@acme-corp.com
          x-thorapi-dataField: unique=true
          # x-thorapi-secureField: true

        social:
          type: string
          description: The username for your primary social account (if any)
          format: url
          example: https://twitter.com/ValkyrAI
          x-thorapi-secureField: true

        bio:
          type: string
          description: More in-depth information about you and your account
          maxLength: 100000

        notes:
          type: string
          example: Notes about this account
          maxLength: 100000

        avatarUrl:
          type: string
          description: URL for the user avatar image
          format: url
          example: https://img.com/mypic.png
        
        # for now one per user
        organizationId:
          type: string
          format: uuid

        organization:
          $ref: '#/components/schemas/Organization'
          
        addresses:
          type: array
          items:
            $ref: '#/components/schemas/Address'

        acceptedCookies:
          type: boolean
          description: Whether the user accepted the use of cookies
          default: false
          x-thorapi-dataField: advanced=true, fieldGroup=signup

        acceptedTos:
          type: boolean
          description: Whether the user accepted the terms of service
          default: false
          x-thorapi-dataField: advanced=true, fieldGroup=signup

        # Spring Security section
        enabled:
          type: boolean
          description: Spring Security User field whether the user is enabled
          default: true
          x-thorapi-dataField: advanced=true, fieldGroup=accountStatus
        credentialNonExpired:
          type: boolean
          description: Spring Security User field whether the user's login credentials
            have expired
          default: true
          x-thorapi-dataField: advanced=true, fieldGroup=accountStatus
        accountEnabled:
          type: boolean
          description: Spring Security User field whether the user account is enabled
          default: true
          x-thorapi-dataField: advanced=true, fieldGroup=accountStatus
        accountNonLocked:
          type: boolean
          description: Spring Security User field whether the user account is locked
          default: true
          x-thorapi-dataField: advanced=true, fieldGroup=accountStatus
        accountNonExpired:
          type: boolean
          description: Spring Security User field whether the user account has expired
          default: false
          x-thorapi-dataField: advanced=true, fieldGroup=accountStatus

        roles:
          x-thorapi-dataField: advanced=true, fieldGroup=accountStatus
          description: the granted roles (or null if the granted authority cannot be expressed as a String with sufficient precision).
          type: array
          items:
            $ref: '#/components/schemas/Role'

        authorityList:
          x-thorapi-dataField: advanced=true, fieldGroup=accountStatus
          description: the granted authorities (or null if the granted authority cannot be expressed as a String with sufficient precision).
          type: array
          items:
            $ref: '#/components/schemas/Authority'
          
      xml:
        name: User

    Organization:
      required:
        - name
      type: object
      description: TODO Organization CLASS DESCRIPTION
      properties:
        name:
          type: string
          example: ACME Corp Inc.
        homePage:
          type: string
          format: url
          example: https://www.acme-corp.com
        phone:
          type: string
          example: 415-867-5309
        addressId:
          type: string
          format: uuid
        address:
          $ref: '#/components/schemas/Address'  
      xml:
        name: Organization

    Address:
      required:
        - city
        - name
        - state
        - street1
        - postal_code
      type: object
      description: TODO Address CLASS DESCRIPTION
      properties:
        hasWifi:
          type: boolean
        principalId:
          type: string
          format: uuid
        addressType:
          type: string
          description: The type of address
          enum:
            - home
            - mail
            - work
            - school
            - other
          example: "home"         

        name:
          type: string
          description: full name of addressee
          example: Henry Johnson
          x-thorapi-dataField: advanced=true
          x-thorapi-secureField: true

        street1:
          type: string
          description: street address line 1
          example: 123 Daydream Blvd.
        
        street2:
          type: string
          description: street address line 2
          example: Apt. 7

        city:
          type: string
          description: full name of city
          example: San Francisco
          x-thorapi-dataField: advanced=true
          x-thorapi-secureField: true
          
        state:
          minLength: 2
          type: string
          description: State of residence 2-character code (USA)
          example: CA
          x-thorapi-dataField: advanced=true
          x-thorapi-secureField: true
        
        country:
          maxLength: 3
          minLength: 3
          example: USA
          type: string
          description: 3 character country code (upper case) 
        
        postal_code:
          maxLength: 10
          minLength: 10
          type: string
          pattern: ^\d{5}-\d{4}$
          description: 5+4 digit zip code
          example: "94210-0000"
      
      xml:
        name: Address
  
## CMS

    ContentData:
      type: object
      description: TODO ContentData CLASS DESCRIPTION
      required:
        - name
      properties:
        authorName:
          type: string
          example: Jimjam McYoyo
        title:
          type: string
          example: Amazing Things Happened
        subtitle:
          type: string
          example: Many detailed things about all the things that hapened.
        contentUrl:
          type: string
          example: The url to the location of the full content
          maxLength: 500
          minLength: 8

        contentData:
          type: string
          example: The full content
          maxLength: 500000
          minLength: 1
        
        contentType:
          type: string
          example: CodeGen
          enum:
            - plaintext
            - markdown
            - json
            - yaml
            - audio
            - video
            - url
            - binary
                 
        thumbnailImage:
          type: string
          description: The large image (optional) for your content
          format: url
          example: https://valkyrlabs.com/assets/VALKYR_LABS_INC_LOGO-BKV9JIdt.png
        largeImage:
          type: string
          description: The large image (optional) for your content
          format: url
          example: https://valkyrlabs.com/assets/VALKYR_LABS_INC_LOGO-BKV9JIdt.png
        category:
          type: string
          example: CodeGen
          enum:
            - CodeGen
            - DOCS
            - BLOG
            - Product
            - SECURITY
            - Event            

        status:
          type: string
          example: editing
          enum:
            - holding
            - editing
            - published
        releaseDate:
          type:  string
          format: "date-time"
          description: the release date (used to automate publishing)
        contentMedia:
          type: array
          description: media contained in or referenced by the content
          items:
            $ref: '#/components/schemas/ContentMediaLink'
        principalId:
          description: the author or attibuted entity
          type: string
          format: uuid
        principal:
          description: the author object
          $ref: '#/components/schemas/Principal'
      xml:
        name: ContentData

    ContentMediaLink:
      type: object
      description: link to images, videos, audio, and other content media
      required:
        - contentId
      properties:
        applicationId:
          type: string
          format: uuid      
          description: used when linked to an Application
        contentDataId:
          type: string
          format: uuid
          description: used when linked to ContentData
        contentUse:
          type: string
          description: specialized usage for the media object if any
          enum:
            - none
            - screenshot
            - selfie
            - portrait
            - promotional
            - informational
            - entertainment
            - product
            - support
            - training
          
        contentType:
          type: string
          description: content type of the media object
          enum:
            - image
            - icon
            - video
            - audio
            - text
            - json
            - yaml
            - xml
            - markdown
            - spreadsheet
            - pdf
        mediaUrl: 
          type: string
          format: url
          description: url to the media object

## Ratings (formerly CSAT)

    Rating:
      type: object
      description: TODO Rating CLASS DESCRIPTION
      required:
        - contentId
      properties:
        targetType:
          type: string
          description: type of the target object
          enum:
            - homepage
            - blog
            - product
            - none
          description: target object for the rating and comments
        contentId:
          type: string
          format: uuid
          description: The unique identifier for the content item
        comments:
          type: string
          example: Your real feelings
          maxLength: 100000
        url:
          type: string
          example: The URL of the rating record is about
          maxLength: 500
        rating:
          type:  "integer"
          format: "int64"
          minimum: 0
          maximum: 10
      xml:
        name: Rating


    ## THORUX Section    

    UserPreferences:
      type: object
      description: Various System User Preferences
      properties:
        preference:
          type: string
          description: The value of the User Preferences
          example: "darquartz"
        preferenceType:
          type: string
          description: The type of the preference
          enum:
            - ux-layout
            - ux-mode
            - ux-theme
            - measurement

    ## Spring Security section
    Login:
      type: object
      description: TODO Login CLASS DESCRIPTION
      properties:
        username:
          type: string
          maxLength: 64
        password:
          type: string
          x-starter-secureField: true
        description:
          type: string

    Logout:
      type: object
      description: Logout functionality
      properties:
        description:
          type: string
          
    PersistentLogin:
      type: object
      description: Persistent Login for Spring Security
      properties:
        username:
          type: string
          maxLength: 64
        series:
          type: string
          maxLength: 64
        token:
          type: string
          maxLength: 64
        lastUsed:
          type: string
          format: date-time
      required:
        - username
        - series
        - token
        - last_used

    Role:
      type: object
      description: A Role for a Principal in the system
      properties:
        principalId:
          type: string
          format: uuid
        roleName:
          type: string
          description: the role
          enum:
            - ANONYMOUS
            - USER
            - STAFF 
            - ADMIN
          x-enum-descriptions:
            - Anonymous User
            - Authenticated User
            - Staff Role
            - Admin Role
          x-enum-varnames:
            - ROLE_ANONYMOUS
            - ROLE_USER
            - ROLE_STAFF
            - ROLE_ADMIN
          default: ANONYMOUS
          
    Authority:
      type: object
      description: TODO Authority CLASS DESCRIPTION
      properties:
        principalId:
          type: string
          format: uuid
        username:
          type: string
          maxLength: 50
        authority:
          type: string
          maxLength: 50
      required:
        - username
        - authority

    AclSid:
      type: object
      description: System ID of the ACL
      properties:
        sid:
          type: string
          maxLength: 245
          nullable: true
        principal:
          type: string
          format: uuid
          nullable: true

    AclClass:
      type: object
      description: Problematic class for ACL
      properties:
        className:
          type: string
          maxLength: 245
          nullable: true

    AclObjectIdentity:
      type: object
      description: ACL identity for an object
      properties:
        objectIdClass:
          type: string
          format: uuid
          nullable: true
        objectIdIdentity:
          type: string
          format: uuid
          nullable: true
        parentObject:
          type: string
          format: uuid
          nullable: true
        ownerSid:
          type: string
          format: uuid
          nullable: true
        entriesInheriting:
          type: integer
          format: int32
          nullable: true

    AclEntry:
      type: object
      description: TODO AclEntry CLASS DESCRIPTION
      properties:
        aclObjectOdentity:
          type: string
          format: uuid
          nullable: true
        aceOrder:
          type: integer
          format: int32
          nullable: true
        sid:
          type: string
          format: uuid
          nullable: true
        mask:
          type: integer
          format: int32
          nullable: true
        granting:
          type: integer
          format: int32
          nullable: true
        auditSuccess:
          type: integer
          format: int32
          nullable: true
        auditFailure:
          type: integer
          format: int32
          nullable: true

    IntegrationAccount:
      type: object
      description: An integration account to authenticate workflows with various systems
      properties:
        execModuleId:
          type: string
          format: uuid
        accountName:
          type: string
          description: account name
          example: STRIPE, Shopify, Gmail, X.com
        
        username:
          type: string
          description: account username
          example: STRIPE, Shopify, Gmail, X.com

        password:
          type: string
          description: account password - encrypted
          x-starter-secureField: true
        
        accountId:
          type: "string"
          x-starter-secureField: true
        
        
        status:
          type: string
          description: Integration Connection Status
          enum:
            - ready
            - closed
            - executed
            - error
        
        verified:
          type: "boolean"
          default: false
      xml:
        name: Account

## CRM    
    Customer:
      description: Represents a customer entity for CRM.
      properties:
        customerId:
          type: string
          format: uuid
          description: Associated customer Principal ID.
        customer:
          $ref: '#/components/schemas/Principal'
        status:
          type: string
          enum: 
            - active
            - inactive
            - prospect
          description: Status of the customer.
        role:
          type: string
          enum: 
            - ceo
            - management
            - procurement
            - technical
          description: Role of the contact person within the customer account (e.g., CEO, Procurement, Technical Lead).
      required:
        - customerId

    Opportunity:
      type: object
      description: Represents a sales opportunity related to a customer.
      properties:
        customerId:
          type: string
          format: uuid
          description: The customer associated with the opportunity.
        customer:
          $ref: '#/components/schemas/Customer'
        description:
          type: string
          description: Description of the opportunity.
        totalValue:
          type: number
          format: double
          description: Expected total value of the opportunity.
        currentStatus:
          type: string
          enum: 
            - won          
            - open
            - lost
            - inactive
            - revive
            - legal
            - blocked                        
          description: Status of the opportunity.
        estimatedCloseDate:
          type: string
          format: date-time
          description: Estimated closing date for the opportunity.
      required:
        - customerId
        - description
        - status

    SalesActivity:
      type: object
      description: Represents a sales activity or engagement related to an opportunity.
      properties:
        opportunityId:
          type: string
          format: uuid
          description: The associated opportunity.
        type:
          type: string
          enum: 
            - call
            - meeting
            - email
            - follow-up
          description: Type of the sales activity.
        details:
          type: string
          description: Details about the activity.
        activityDate:
          type: string
          format: date-time
          description: Date and time of the activity.
        performedBy:
          type: string
          format: uuid
          description: The user who performed the activity.
      required:
        - opportunityId
        - type
        - activityDate
        - performedBy

    SalesPipeline:
      type: object
      description: Represents the stages in a sales pipeline.
      properties:
        name:
          type: string
          enum: 
            - lead
            - qualification
            - proposal
            - negotiation
            - closed
          description: Name of the sales stage (e.g., Lead, Qualification, Proposal, Negotiation, Closed).
        sequenceOrder:
          type: integer
          description: The order in which the stages are followed in the sales process.
      required:
        - name
        - order

  securitySchemes:

    thorapi_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://{username}.valkyrlabs.com:{port}/oauth
          scopes:
            write:items: modify owned items
            read:items: read owned items
