openapi: 3.0.1
info:
  title: ValkyrAI CORE API
  description: The API for accessing ValkyrAI services
  termsOfService: https://valkyrlabs.com/tos/
  contact: {email: info@valkyrlabs.com}
  license: {name: AGPL 3.0, url: 'https://www.gnu.org/licenses/agpl-3.0.html'}
  version: 0.9.25
externalDocs: {description: Learn more about ValkyrAI, url: 'https://valkyrlabs.com/vai/docs'}
servers:
- {url: 'http://localhost:8080/v1', description: local server (uses live data)}
- {url: 'https://valkyrlabs.com/v1', description: production server}
tags:
- {name: administration, description: Secured Admin-only calls}
paths:
  /Game:
    get:
      tags: [Game]
      summary: Retrieve a list of Games
      description: Retrieves a list of Games.
      x-spring-cacheable: true
      operationId: getGameList
      responses:
        '200':
          description: Successfully retrieved the list of Games.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/Game'}
        '404': {description: No Games were found.}
        '500': {description: Internal server error.}
    post:
      tags: [Game]
      summary: Create a new Game
      description: Creates a new Game.
      operationId: postGame
      requestBody:
        description: Game details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/Game'}
      responses:
        '201':
          description: Game created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Game'}
        '400': {description: Invalid input.}
        '404': {description: Game not found.}
        '500': {description: Internal server error.}
  /Game/{id}:
    get:
      tags: [Game]
      summary: Retrieve a single Game
      description: Retrieves a single Game for a specific uid.
      x-spring-cacheable: true
      operationId: getGame
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Game.
      responses:
        '200':
          description: Successfully retrieved the Game.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Game'}
        '404': {description: Game not found.}
        '500': {description: Internal server error.}
    put:
      tags: [Game]
      summary: Update an existing Game
      description: Updates an existing Game.
      operationId: updateGame
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Game.
      requestBody:
        description: Updated Game details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/Game'}
      responses:
        '200':
          description: Game updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Game'}
        '400': {description: Invalid input.}
        '404': {description: Game not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [Game]
      summary: Delete a Game.
      description: Deletes a specific Game.
      operationId: deleteGame
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Game.
      responses:
        '204': {description: Game deleted successfully.}
        '404': {description: Game not found.}
        '500': {description: Internal server error.}
  /Weapon:
    get:
      tags: [Weapon]
      summary: Retrieve a list of Weapons
      description: Retrieves a list of Weapons.
      x-spring-cacheable: true
      operationId: getWeaponList
      responses:
        '200':
          description: Successfully retrieved the list of Weapons.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/Weapon'}
        '404': {description: No Weapons were found.}
        '500': {description: Internal server error.}
    post:
      tags: [Weapon]
      summary: Create a new Weapon
      description: Creates a new Weapon.
      operationId: postWeapon
      requestBody:
        description: Weapon details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/Weapon'}
      responses:
        '201':
          description: Weapon created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Weapon'}
        '400': {description: Invalid input.}
        '404': {description: Weapon not found.}
        '500': {description: Internal server error.}
  /Weapon/{id}:
    get:
      tags: [Weapon]
      summary: Retrieve a single Weapon
      description: Retrieves a single Weapon for a specific uid.
      x-spring-cacheable: true
      operationId: getWeapon
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Weapon.
      responses:
        '200':
          description: Successfully retrieved the Weapon.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Weapon'}
        '404': {description: Weapon not found.}
        '500': {description: Internal server error.}
    put:
      tags: [Weapon]
      summary: Update an existing Weapon
      description: Updates an existing Weapon.
      operationId: updateWeapon
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Weapon.
      requestBody:
        description: Updated Weapon details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/Weapon'}
      responses:
        '200':
          description: Weapon updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Weapon'}
        '400': {description: Invalid input.}
        '404': {description: Weapon not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [Weapon]
      summary: Delete a Weapon.
      description: Deletes a specific Weapon.
      operationId: deleteWeapon
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Weapon.
      responses:
        '204': {description: Weapon deleted successfully.}
        '404': {description: Weapon not found.}
        '500': {description: Internal server error.}
  /Level:
    get:
      tags: [Level]
      summary: Retrieve a list of Levels
      description: Retrieves a list of Levels.
      x-spring-cacheable: true
      operationId: getLevelList
      responses:
        '200':
          description: Successfully retrieved the list of Levels.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/Level'}
        '404': {description: No Levels were found.}
        '500': {description: Internal server error.}
    post:
      tags: [Level]
      summary: Create a new Level
      description: Creates a new Level.
      operationId: postLevel
      requestBody:
        description: Level details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/Level'}
      responses:
        '201':
          description: Level created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Level'}
        '400': {description: Invalid input.}
        '404': {description: Level not found.}
        '500': {description: Internal server error.}
  /Level/{id}:
    get:
      tags: [Level]
      summary: Retrieve a single Level
      description: Retrieves a single Level for a specific uid.
      x-spring-cacheable: true
      operationId: getLevel
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Level.
      responses:
        '200':
          description: Successfully retrieved the Level.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Level'}
        '404': {description: Level not found.}
        '500': {description: Internal server error.}
    put:
      tags: [Level]
      summary: Update an existing Level
      description: Updates an existing Level.
      operationId: updateLevel
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Level.
      requestBody:
        description: Updated Level details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/Level'}
      responses:
        '200':
          description: Level updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Level'}
        '400': {description: Invalid input.}
        '404': {description: Level not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [Level]
      summary: Delete a Level.
      description: Deletes a specific Level.
      operationId: deleteLevel
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Level.
      responses:
        '204': {description: Level deleted successfully.}
        '404': {description: Level not found.}
        '500': {description: Internal server error.}
  /Attack:
    get:
      tags: [Attack]
      summary: Retrieve a list of Attacks
      description: Retrieves a list of Attacks.
      x-spring-cacheable: true
      operationId: getAttackList
      responses:
        '200':
          description: Successfully retrieved the list of Attacks.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/Attack'}
        '404': {description: No Attacks were found.}
        '500': {description: Internal server error.}
    post:
      tags: [Attack]
      summary: Create a new Attack
      description: Creates a new Attack.
      operationId: postAttack
      requestBody:
        description: Attack details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/Attack'}
      responses:
        '201':
          description: Attack created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Attack'}
        '400': {description: Invalid input.}
        '404': {description: Attack not found.}
        '500': {description: Internal server error.}
  /Attack/{id}:
    get:
      tags: [Attack]
      summary: Retrieve a single Attack
      description: Retrieves a single Attack for a specific uid.
      x-spring-cacheable: true
      operationId: getAttack
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Attack.
      responses:
        '200':
          description: Successfully retrieved the Attack.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Attack'}
        '404': {description: Attack not found.}
        '500': {description: Internal server error.}
    put:
      tags: [Attack]
      summary: Update an existing Attack
      description: Updates an existing Attack.
      operationId: updateAttack
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Attack.
      requestBody:
        description: Updated Attack details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/Attack'}
      responses:
        '200':
          description: Attack updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Attack'}
        '400': {description: Invalid input.}
        '404': {description: Attack not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [Attack]
      summary: Delete a Attack.
      description: Deletes a specific Attack.
      operationId: deleteAttack
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Attack.
      responses:
        '204': {description: Attack deleted successfully.}
        '404': {description: Attack not found.}
        '500': {description: Internal server error.}
  /SecureKey:
    get:
      tags: [SecureKey]
      summary: Retrieve a list of SecureKeys
      description: Retrieves a list of SecureKeys.
      x-spring-cacheable: true
      operationId: getSecureKeyList
      responses:
        '200':
          description: Successfully retrieved the list of SecureKeys.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/SecureKey'}
        '404': {description: No SecureKeys were found.}
        '500': {description: Internal server error.}
    post:
      tags: [SecureKey]
      summary: Create a new SecureKey
      description: Creates a new SecureKey.
      operationId: postSecureKey
      requestBody:
        description: SecureKey details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/SecureKey'}
      responses:
        '201':
          description: SecureKey created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/SecureKey'}
        '400': {description: Invalid input.}
        '404': {description: SecureKey not found.}
        '500': {description: Internal server error.}
  /SecureKey/{id}:
    get:
      tags: [SecureKey]
      summary: Retrieve a single SecureKey
      description: Retrieves a single SecureKey for a specific uid.
      x-spring-cacheable: true
      operationId: getSecureKey
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the SecureKey.
      responses:
        '200':
          description: Successfully retrieved the SecureKey.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/SecureKey'}
        '404': {description: SecureKey not found.}
        '500': {description: Internal server error.}
    put:
      tags: [SecureKey]
      summary: Update an existing SecureKey
      description: Updates an existing SecureKey.
      operationId: updateSecureKey
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the SecureKey.
      requestBody:
        description: Updated SecureKey details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/SecureKey'}
      responses:
        '200':
          description: SecureKey updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/SecureKey'}
        '400': {description: Invalid input.}
        '404': {description: SecureKey not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [SecureKey]
      summary: Delete a SecureKey.
      description: Deletes a specific SecureKey.
      operationId: deleteSecureKey
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the SecureKey.
      responses:
        '204': {description: SecureKey deleted successfully.}
        '404': {description: SecureKey not found.}
        '500': {description: Internal server error.}
  /Workflow:
    get:
      tags: [Workflow]
      summary: Retrieve a list of Workflows
      description: Retrieves a list of Workflows.
      x-spring-cacheable: true
      operationId: getWorkflowList
      responses:
        '200':
          description: Successfully retrieved the list of Workflows.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/Workflow'}
        '404': {description: No Workflows were found.}
        '500': {description: Internal server error.}
    post:
      tags: [Workflow]
      summary: Create a new Workflow
      description: Creates a new Workflow.
      operationId: postWorkflow
      requestBody:
        description: Workflow details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/Workflow'}
      responses:
        '201':
          description: Workflow created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Workflow'}
        '400': {description: Invalid input.}
        '404': {description: Workflow not found.}
        '500': {description: Internal server error.}
  /Workflow/{id}:
    get:
      tags: [Workflow]
      summary: Retrieve a single Workflow
      description: Retrieves a single Workflow for a specific uid.
      x-spring-cacheable: true
      operationId: getWorkflow
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Workflow.
      responses:
        '200':
          description: Successfully retrieved the Workflow.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Workflow'}
        '404': {description: Workflow not found.}
        '500': {description: Internal server error.}
    put:
      tags: [Workflow]
      summary: Update an existing Workflow
      description: Updates an existing Workflow.
      operationId: updateWorkflow
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Workflow.
      requestBody:
        description: Updated Workflow details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/Workflow'}
      responses:
        '200':
          description: Workflow updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Workflow'}
        '400': {description: Invalid input.}
        '404': {description: Workflow not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [Workflow]
      summary: Delete a Workflow.
      description: Deletes a specific Workflow.
      operationId: deleteWorkflow
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Workflow.
      responses:
        '204': {description: Workflow deleted successfully.}
        '404': {description: Workflow not found.}
        '500': {description: Internal server error.}
  /WorkflowState:
    get:
      tags: [WorkflowState]
      summary: Retrieve a list of WorkflowStates
      description: Retrieves a list of WorkflowStates.
      x-spring-cacheable: true
      operationId: getWorkflowStateList
      responses:
        '200':
          description: Successfully retrieved the list of WorkflowStates.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/WorkflowState'}
        '404': {description: No WorkflowStates were found.}
        '500': {description: Internal server error.}
    post:
      tags: [WorkflowState]
      summary: Create a new WorkflowState
      description: Creates a new WorkflowState.
      operationId: postWorkflowState
      requestBody:
        description: WorkflowState details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/WorkflowState'}
      responses:
        '201':
          description: WorkflowState created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/WorkflowState'}
        '400': {description: Invalid input.}
        '404': {description: WorkflowState not found.}
        '500': {description: Internal server error.}
  /WorkflowState/{id}:
    get:
      tags: [WorkflowState]
      summary: Retrieve a single WorkflowState
      description: Retrieves a single WorkflowState for a specific uid.
      x-spring-cacheable: true
      operationId: getWorkflowState
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the WorkflowState.
      responses:
        '200':
          description: Successfully retrieved the WorkflowState.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/WorkflowState'}
        '404': {description: WorkflowState not found.}
        '500': {description: Internal server error.}
    put:
      tags: [WorkflowState]
      summary: Update an existing WorkflowState
      description: Updates an existing WorkflowState.
      operationId: updateWorkflowState
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the WorkflowState.
      requestBody:
        description: Updated WorkflowState details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/WorkflowState'}
      responses:
        '200':
          description: WorkflowState updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/WorkflowState'}
        '400': {description: Invalid input.}
        '404': {description: WorkflowState not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [WorkflowState]
      summary: Delete a WorkflowState.
      description: Deletes a specific WorkflowState.
      operationId: deleteWorkflowState
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the WorkflowState.
      responses:
        '204': {description: WorkflowState deleted successfully.}
        '404': {description: WorkflowState not found.}
        '500': {description: Internal server error.}
  /Task:
    get:
      tags: [Task]
      summary: Retrieve a list of Tasks
      description: Retrieves a list of Tasks.
      x-spring-cacheable: true
      operationId: getTaskList
      responses:
        '200':
          description: Successfully retrieved the list of Tasks.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/Task'}
        '404': {description: No Tasks were found.}
        '500': {description: Internal server error.}
    post:
      tags: [Task]
      summary: Create a new Task
      description: Creates a new Task.
      operationId: postTask
      requestBody:
        description: Task details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/Task'}
      responses:
        '201':
          description: Task created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Task'}
        '400': {description: Invalid input.}
        '404': {description: Task not found.}
        '500': {description: Internal server error.}
  /Task/{id}:
    get:
      tags: [Task]
      summary: Retrieve a single Task
      description: Retrieves a single Task for a specific uid.
      x-spring-cacheable: true
      operationId: getTask
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Task.
      responses:
        '200':
          description: Successfully retrieved the Task.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Task'}
        '404': {description: Task not found.}
        '500': {description: Internal server error.}
    put:
      tags: [Task]
      summary: Update an existing Task
      description: Updates an existing Task.
      operationId: updateTask
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Task.
      requestBody:
        description: Updated Task details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/Task'}
      responses:
        '200':
          description: Task updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Task'}
        '400': {description: Invalid input.}
        '404': {description: Task not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [Task]
      summary: Delete a Task.
      description: Deletes a specific Task.
      operationId: deleteTask
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Task.
      responses:
        '204': {description: Task deleted successfully.}
        '404': {description: Task not found.}
        '500': {description: Internal server error.}
  /ExecModule:
    get:
      tags: [ExecModule]
      summary: Retrieve a list of ExecModules
      description: Retrieves a list of ExecModules.
      x-spring-cacheable: true
      operationId: getExecModuleList
      responses:
        '200':
          description: Successfully retrieved the list of ExecModules.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/ExecModule'}
        '404': {description: No ExecModules were found.}
        '500': {description: Internal server error.}
    post:
      tags: [ExecModule]
      summary: Create a new ExecModule
      description: Creates a new ExecModule.
      operationId: postExecModule
      requestBody:
        description: ExecModule details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/ExecModule'}
      responses:
        '201':
          description: ExecModule created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ExecModule'}
        '400': {description: Invalid input.}
        '404': {description: ExecModule not found.}
        '500': {description: Internal server error.}
  /ExecModule/{id}:
    get:
      tags: [ExecModule]
      summary: Retrieve a single ExecModule
      description: Retrieves a single ExecModule for a specific uid.
      x-spring-cacheable: true
      operationId: getExecModule
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the ExecModule.
      responses:
        '200':
          description: Successfully retrieved the ExecModule.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ExecModule'}
        '404': {description: ExecModule not found.}
        '500': {description: Internal server error.}
    put:
      tags: [ExecModule]
      summary: Update an existing ExecModule
      description: Updates an existing ExecModule.
      operationId: updateExecModule
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the ExecModule.
      requestBody:
        description: Updated ExecModule details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/ExecModule'}
      responses:
        '200':
          description: ExecModule updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ExecModule'}
        '400': {description: Invalid input.}
        '404': {description: ExecModule not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [ExecModule]
      summary: Delete a ExecModule.
      description: Deletes a specific ExecModule.
      operationId: deleteExecModule
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the ExecModule.
      responses:
        '204': {description: ExecModule deleted successfully.}
        '404': {description: ExecModule not found.}
        '500': {description: Internal server error.}
  /EventLog:
    get:
      tags: [EventLog]
      summary: Retrieve a list of EventLogs
      description: Retrieves a list of EventLogs.
      x-spring-cacheable: true
      operationId: getEventLogList
      responses:
        '200':
          description: Successfully retrieved the list of EventLogs.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/EventLog'}
        '404': {description: No EventLogs were found.}
        '500': {description: Internal server error.}
    post:
      tags: [EventLog]
      summary: Create a new EventLog
      description: Creates a new EventLog.
      operationId: postEventLog
      requestBody:
        description: EventLog details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/EventLog'}
      responses:
        '201':
          description: EventLog created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/EventLog'}
        '400': {description: Invalid input.}
        '404': {description: EventLog not found.}
        '500': {description: Internal server error.}
  /EventLog/{id}:
    get:
      tags: [EventLog]
      summary: Retrieve a single EventLog
      description: Retrieves a single EventLog for a specific uid.
      x-spring-cacheable: true
      operationId: getEventLog
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the EventLog.
      responses:
        '200':
          description: Successfully retrieved the EventLog.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/EventLog'}
        '404': {description: EventLog not found.}
        '500': {description: Internal server error.}
    put:
      tags: [EventLog]
      summary: Update an existing EventLog
      description: Updates an existing EventLog.
      operationId: updateEventLog
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the EventLog.
      requestBody:
        description: Updated EventLog details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/EventLog'}
      responses:
        '200':
          description: EventLog updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/EventLog'}
        '400': {description: Invalid input.}
        '404': {description: EventLog not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [EventLog]
      summary: Delete a EventLog.
      description: Deletes a specific EventLog.
      operationId: deleteEventLog
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the EventLog.
      responses:
        '204': {description: EventLog deleted successfully.}
        '404': {description: EventLog not found.}
        '500': {description: Internal server error.}
  /IntegrationAccount:
    get:
      tags: [IntegrationAccount]
      summary: Retrieve a list of IntegrationAccounts
      description: Retrieves a list of IntegrationAccounts.
      x-spring-cacheable: true
      operationId: getIntegrationAccountList
      responses:
        '200':
          description: Successfully retrieved the list of IntegrationAccounts.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/IntegrationAccount'}
        '404': {description: No IntegrationAccounts were found.}
        '500': {description: Internal server error.}
    post:
      tags: [IntegrationAccount]
      summary: Create a new IntegrationAccount
      description: Creates a new IntegrationAccount.
      operationId: postIntegrationAccount
      requestBody:
        description: IntegrationAccount details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/IntegrationAccount'}
      responses:
        '201':
          description: IntegrationAccount created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/IntegrationAccount'}
        '400': {description: Invalid input.}
        '404': {description: IntegrationAccount not found.}
        '500': {description: Internal server error.}
  /IntegrationAccount/{id}:
    get:
      tags: [IntegrationAccount]
      summary: Retrieve a single IntegrationAccount
      description: Retrieves a single IntegrationAccount for a specific uid.
      x-spring-cacheable: true
      operationId: getIntegrationAccount
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the IntegrationAccount.
      responses:
        '200':
          description: Successfully retrieved the IntegrationAccount.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/IntegrationAccount'}
        '404': {description: IntegrationAccount not found.}
        '500': {description: Internal server error.}
    put:
      tags: [IntegrationAccount]
      summary: Update an existing IntegrationAccount
      description: Updates an existing IntegrationAccount.
      operationId: updateIntegrationAccount
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the IntegrationAccount.
      requestBody:
        description: Updated IntegrationAccount details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/IntegrationAccount'}
      responses:
        '200':
          description: IntegrationAccount updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/IntegrationAccount'}
        '400': {description: Invalid input.}
        '404': {description: IntegrationAccount not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [IntegrationAccount]
      summary: Delete a IntegrationAccount.
      description: Deletes a specific IntegrationAccount.
      operationId: deleteIntegrationAccount
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the IntegrationAccount.
      responses:
        '204': {description: IntegrationAccount deleted successfully.}
        '404': {description: IntegrationAccount not found.}
        '500': {description: Internal server error.}
  /LlmDetails:
    get:
      tags: [LlmDetails]
      summary: Retrieve a list of LlmDetailss
      description: Retrieves a list of LlmDetailss.
      x-spring-cacheable: true
      operationId: getLlmDetailsList
      responses:
        '200':
          description: Successfully retrieved the list of LlmDetailss.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/LlmDetails'}
        '404': {description: No LlmDetailss were found.}
        '500': {description: Internal server error.}
    post:
      tags: [LlmDetails]
      summary: Create a new LlmDetails
      description: Creates a new LlmDetails.
      operationId: postLlmDetails
      requestBody:
        description: LlmDetails details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/LlmDetails'}
      responses:
        '201':
          description: LlmDetails created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/LlmDetails'}
        '400': {description: Invalid input.}
        '404': {description: LlmDetails not found.}
        '500': {description: Internal server error.}
  /LlmDetails/{id}:
    get:
      tags: [LlmDetails]
      summary: Retrieve a single LlmDetails
      description: Retrieves a single LlmDetails for a specific uid.
      x-spring-cacheable: true
      operationId: getLlmDetails
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the LlmDetails.
      responses:
        '200':
          description: Successfully retrieved the LlmDetails.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/LlmDetails'}
        '404': {description: LlmDetails not found.}
        '500': {description: Internal server error.}
    put:
      tags: [LlmDetails]
      summary: Update an existing LlmDetails
      description: Updates an existing LlmDetails.
      operationId: updateLlmDetails
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the LlmDetails.
      requestBody:
        description: Updated LlmDetails details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/LlmDetails'}
      responses:
        '200':
          description: LlmDetails updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/LlmDetails'}
        '400': {description: Invalid input.}
        '404': {description: LlmDetails not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [LlmDetails]
      summary: Delete a LlmDetails.
      description: Deletes a specific LlmDetails.
      operationId: deleteLlmDetails
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the LlmDetails.
      responses:
        '204': {description: LlmDetails deleted successfully.}
        '404': {description: LlmDetails not found.}
        '500': {description: Internal server error.}
  /Application:
    get:
      tags: [Application]
      summary: Retrieve a list of Applications
      description: Retrieves a list of Applications.
      x-spring-cacheable: true
      operationId: getApplicationList
      responses:
        '200':
          description: Successfully retrieved the list of Applications.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/Application'}
        '404': {description: No Applications were found.}
        '500': {description: Internal server error.}
    post:
      tags: [Application]
      summary: Create a new Application
      description: Creates a new Application.
      operationId: postApplication
      requestBody:
        description: Application details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/Application'}
      responses:
        '201':
          description: Application created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Application'}
        '400': {description: Invalid input.}
        '404': {description: Application not found.}
        '500': {description: Internal server error.}
  /Application/{id}:
    get:
      tags: [Application]
      summary: Retrieve a single Application
      description: Retrieves a single Application for a specific uid.
      x-spring-cacheable: true
      operationId: getApplication
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Application.
      responses:
        '200':
          description: Successfully retrieved the Application.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Application'}
        '404': {description: Application not found.}
        '500': {description: Internal server error.}
    put:
      tags: [Application]
      summary: Update an existing Application
      description: Updates an existing Application.
      operationId: updateApplication
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Application.
      requestBody:
        description: Updated Application details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/Application'}
      responses:
        '200':
          description: Application updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Application'}
        '400': {description: Invalid input.}
        '404': {description: Application not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [Application]
      summary: Delete a Application.
      description: Deletes a specific Application.
      operationId: deleteApplication
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Application.
      responses:
        '204': {description: Application deleted successfully.}
        '404': {description: Application not found.}
        '500': {description: Internal server error.}
  /ContentData:
    get:
      tags: [ContentData]
      summary: Retrieve a list of ContentDatas
      description: Retrieves a list of ContentDatas.
      x-spring-cacheable: true
      operationId: getContentDataList
      responses:
        '200':
          description: Successfully retrieved the list of ContentDatas.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/ContentData'}
        '404': {description: No ContentDatas were found.}
        '500': {description: Internal server error.}
    post:
      tags: [ContentData]
      summary: Create a new ContentData
      description: Creates a new ContentData.
      operationId: postContentData
      requestBody:
        description: ContentData details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/ContentData'}
      responses:
        '201':
          description: ContentData created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ContentData'}
        '400': {description: Invalid input.}
        '404': {description: ContentData not found.}
        '500': {description: Internal server error.}
  /ContentData/{id}:
    get:
      tags: [ContentData]
      summary: Retrieve a single ContentData
      description: Retrieves a single ContentData for a specific uid.
      x-spring-cacheable: true
      operationId: getContentData
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the ContentData.
      responses:
        '200':
          description: Successfully retrieved the ContentData.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ContentData'}
        '404': {description: ContentData not found.}
        '500': {description: Internal server error.}
    put:
      tags: [ContentData]
      summary: Update an existing ContentData
      description: Updates an existing ContentData.
      operationId: updateContentData
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the ContentData.
      requestBody:
        description: Updated ContentData details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/ContentData'}
      responses:
        '200':
          description: ContentData updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ContentData'}
        '400': {description: Invalid input.}
        '404': {description: ContentData not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [ContentData]
      summary: Delete a ContentData.
      description: Deletes a specific ContentData.
      operationId: deleteContentData
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the ContentData.
      responses:
        '204': {description: ContentData deleted successfully.}
        '404': {description: ContentData not found.}
        '500': {description: Internal server error.}
  /ContentMediaLink:
    get:
      tags: [ContentMediaLink]
      summary: Retrieve a list of ContentMediaLinks
      description: Retrieves a list of ContentMediaLinks.
      x-spring-cacheable: true
      operationId: getContentMediaLinkList
      responses:
        '200':
          description: Successfully retrieved the list of ContentMediaLinks.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/ContentMediaLink'}
        '404': {description: No ContentMediaLinks were found.}
        '500': {description: Internal server error.}
    post:
      tags: [ContentMediaLink]
      summary: Create a new ContentMediaLink
      description: Creates a new ContentMediaLink.
      operationId: postContentMediaLink
      requestBody:
        description: ContentMediaLink details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/ContentMediaLink'}
      responses:
        '201':
          description: ContentMediaLink created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ContentMediaLink'}
        '400': {description: Invalid input.}
        '404': {description: ContentMediaLink not found.}
        '500': {description: Internal server error.}
  /ContentMediaLink/{id}:
    get:
      tags: [ContentMediaLink]
      summary: Retrieve a single ContentMediaLink
      description: Retrieves a single ContentMediaLink for a specific uid.
      x-spring-cacheable: true
      operationId: getContentMediaLink
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the ContentMediaLink.
      responses:
        '200':
          description: Successfully retrieved the ContentMediaLink.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ContentMediaLink'}
        '404': {description: ContentMediaLink not found.}
        '500': {description: Internal server error.}
    put:
      tags: [ContentMediaLink]
      summary: Update an existing ContentMediaLink
      description: Updates an existing ContentMediaLink.
      operationId: updateContentMediaLink
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the ContentMediaLink.
      requestBody:
        description: Updated ContentMediaLink details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/ContentMediaLink'}
      responses:
        '200':
          description: ContentMediaLink updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ContentMediaLink'}
        '400': {description: Invalid input.}
        '404': {description: ContentMediaLink not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [ContentMediaLink]
      summary: Delete a ContentMediaLink.
      description: Deletes a specific ContentMediaLink.
      operationId: deleteContentMediaLink
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the ContentMediaLink.
      responses:
        '204': {description: ContentMediaLink deleted successfully.}
        '404': {description: ContentMediaLink not found.}
        '500': {description: Internal server error.}
  /Rating:
    get:
      tags: [Rating]
      summary: Retrieve a list of Ratings
      description: Retrieves a list of Ratings.
      x-spring-cacheable: true
      operationId: getRatingList
      responses:
        '200':
          description: Successfully retrieved the list of Ratings.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/Rating'}
        '404': {description: No Ratings were found.}
        '500': {description: Internal server error.}
    post:
      tags: [Rating]
      summary: Create a new Rating
      description: Creates a new Rating.
      operationId: postRating
      requestBody:
        description: Rating details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/Rating'}
      responses:
        '201':
          description: Rating created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Rating'}
        '400': {description: Invalid input.}
        '404': {description: Rating not found.}
        '500': {description: Internal server error.}
  /Rating/{id}:
    get:
      tags: [Rating]
      summary: Retrieve a single Rating
      description: Retrieves a single Rating for a specific uid.
      x-spring-cacheable: true
      operationId: getRating
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Rating.
      responses:
        '200':
          description: Successfully retrieved the Rating.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Rating'}
        '404': {description: Rating not found.}
        '500': {description: Internal server error.}
    put:
      tags: [Rating]
      summary: Update an existing Rating
      description: Updates an existing Rating.
      operationId: updateRating
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Rating.
      requestBody:
        description: Updated Rating details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/Rating'}
      responses:
        '200':
          description: Rating updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Rating'}
        '400': {description: Invalid input.}
        '404': {description: Rating not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [Rating]
      summary: Delete a Rating.
      description: Deletes a specific Rating.
      operationId: deleteRating
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Rating.
      responses:
        '204': {description: Rating deleted successfully.}
        '404': {description: Rating not found.}
        '500': {description: Internal server error.}
  /ChatMessage:
    get:
      tags: [ChatMessage]
      summary: Retrieve a list of ChatMessages
      description: Retrieves a list of ChatMessages.
      x-spring-cacheable: true
      operationId: getChatMessageList
      responses:
        '200':
          description: Successfully retrieved the list of ChatMessages.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/ChatMessage'}
        '404': {description: No ChatMessages were found.}
        '500': {description: Internal server error.}
    post:
      tags: [ChatMessage]
      summary: Create a new ChatMessage
      description: Creates a new ChatMessage.
      operationId: postChatMessage
      requestBody:
        description: ChatMessage details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/ChatMessage'}
      responses:
        '201':
          description: ChatMessage created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ChatMessage'}
        '400': {description: Invalid input.}
        '404': {description: ChatMessage not found.}
        '500': {description: Internal server error.}
  /ChatMessage/{id}:
    get:
      tags: [ChatMessage]
      summary: Retrieve a single ChatMessage
      description: Retrieves a single ChatMessage for a specific uid.
      x-spring-cacheable: true
      operationId: getChatMessage
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the ChatMessage.
      responses:
        '200':
          description: Successfully retrieved the ChatMessage.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ChatMessage'}
        '404': {description: ChatMessage not found.}
        '500': {description: Internal server error.}
    put:
      tags: [ChatMessage]
      summary: Update an existing ChatMessage
      description: Updates an existing ChatMessage.
      operationId: updateChatMessage
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the ChatMessage.
      requestBody:
        description: Updated ChatMessage details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/ChatMessage'}
      responses:
        '200':
          description: ChatMessage updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ChatMessage'}
        '400': {description: Invalid input.}
        '404': {description: ChatMessage not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [ChatMessage]
      summary: Delete a ChatMessage.
      description: Deletes a specific ChatMessage.
      operationId: deleteChatMessage
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the ChatMessage.
      responses:
        '204': {description: ChatMessage deleted successfully.}
        '404': {description: ChatMessage not found.}
        '500': {description: Internal server error.}
  /ChatResponse:
    get:
      tags: [ChatResponse]
      summary: Retrieve a list of ChatResponses
      description: Retrieves a list of ChatResponses.
      x-spring-cacheable: true
      operationId: getChatResponseList
      responses:
        '200':
          description: Successfully retrieved the list of ChatResponses.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/ChatResponse'}
        '404': {description: No ChatResponses were found.}
        '500': {description: Internal server error.}
    post:
      tags: [ChatResponse]
      summary: Create a new ChatResponse
      description: Creates a new ChatResponse.
      operationId: postChatResponse
      requestBody:
        description: ChatResponse details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/ChatResponse'}
      responses:
        '201':
          description: ChatResponse created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ChatResponse'}
        '400': {description: Invalid input.}
        '404': {description: ChatResponse not found.}
        '500': {description: Internal server error.}
  /ChatResponse/{id}:
    get:
      tags: [ChatResponse]
      summary: Retrieve a single ChatResponse
      description: Retrieves a single ChatResponse for a specific uid.
      x-spring-cacheable: true
      operationId: getChatResponse
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the ChatResponse.
      responses:
        '200':
          description: Successfully retrieved the ChatResponse.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ChatResponse'}
        '404': {description: ChatResponse not found.}
        '500': {description: Internal server error.}
    put:
      tags: [ChatResponse]
      summary: Update an existing ChatResponse
      description: Updates an existing ChatResponse.
      operationId: updateChatResponse
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the ChatResponse.
      requestBody:
        description: Updated ChatResponse details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/ChatResponse'}
      responses:
        '200':
          description: ChatResponse updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ChatResponse'}
        '400': {description: Invalid input.}
        '404': {description: ChatResponse not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [ChatResponse]
      summary: Delete a ChatResponse.
      description: Deletes a specific ChatResponse.
      operationId: deleteChatResponse
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the ChatResponse.
      responses:
        '204': {description: ChatResponse deleted successfully.}
        '404': {description: ChatResponse not found.}
        '500': {description: Internal server error.}
  /Principal:
    get:
      tags: [Principal]
      summary: Retrieve a list of Principals
      description: Retrieves a list of Principals.
      x-spring-cacheable: true
      operationId: getPrincipalList
      responses:
        '200':
          description: Successfully retrieved the list of Principals.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/Principal'}
        '404': {description: No Principals were found.}
        '500': {description: Internal server error.}
    post:
      tags: [Principal]
      summary: Create a new Principal
      description: Creates a new Principal.
      operationId: postPrincipal
      requestBody:
        description: Principal details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/Principal'}
      responses:
        '201':
          description: Principal created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Principal'}
        '400': {description: Invalid input.}
        '404': {description: Principal not found.}
        '500': {description: Internal server error.}
  /Principal/{id}:
    get:
      tags: [Principal]
      summary: Retrieve a single Principal
      description: Retrieves a single Principal for a specific uid.
      x-spring-cacheable: true
      operationId: getPrincipal
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Principal.
      responses:
        '200':
          description: Successfully retrieved the Principal.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Principal'}
        '404': {description: Principal not found.}
        '500': {description: Internal server error.}
    put:
      tags: [Principal]
      summary: Update an existing Principal
      description: Updates an existing Principal.
      operationId: updatePrincipal
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Principal.
      requestBody:
        description: Updated Principal details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/Principal'}
      responses:
        '200':
          description: Principal updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Principal'}
        '400': {description: Invalid input.}
        '404': {description: Principal not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [Principal]
      summary: Delete a Principal.
      description: Deletes a specific Principal.
      operationId: deletePrincipal
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Principal.
      responses:
        '204': {description: Principal deleted successfully.}
        '404': {description: Principal not found.}
        '500': {description: Internal server error.}
  /Organization:
    get:
      tags: [Organization]
      summary: Retrieve a list of Organizations
      description: Retrieves a list of Organizations.
      x-spring-cacheable: true
      operationId: getOrganizationList
      responses:
        '200':
          description: Successfully retrieved the list of Organizations.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/Organization'}
        '404': {description: No Organizations were found.}
        '500': {description: Internal server error.}
    post:
      tags: [Organization]
      summary: Create a new Organization
      description: Creates a new Organization.
      operationId: postOrganization
      requestBody:
        description: Organization details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/Organization'}
      responses:
        '201':
          description: Organization created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Organization'}
        '400': {description: Invalid input.}
        '404': {description: Organization not found.}
        '500': {description: Internal server error.}
  /Organization/{id}:
    get:
      tags: [Organization]
      summary: Retrieve a single Organization
      description: Retrieves a single Organization for a specific uid.
      x-spring-cacheable: true
      operationId: getOrganization
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Organization.
      responses:
        '200':
          description: Successfully retrieved the Organization.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Organization'}
        '404': {description: Organization not found.}
        '500': {description: Internal server error.}
    put:
      tags: [Organization]
      summary: Update an existing Organization
      description: Updates an existing Organization.
      operationId: updateOrganization
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Organization.
      requestBody:
        description: Updated Organization details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/Organization'}
      responses:
        '200':
          description: Organization updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Organization'}
        '400': {description: Invalid input.}
        '404': {description: Organization not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [Organization]
      summary: Delete a Organization.
      description: Deletes a specific Organization.
      operationId: deleteOrganization
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Organization.
      responses:
        '204': {description: Organization deleted successfully.}
        '404': {description: Organization not found.}
        '500': {description: Internal server error.}
  /Address:
    get:
      tags: [Address]
      summary: Retrieve a list of Addresss
      description: Retrieves a list of Addresss.
      x-spring-cacheable: true
      operationId: getAddressList
      responses:
        '200':
          description: Successfully retrieved the list of Addresss.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/Address'}
        '404': {description: No Addresss were found.}
        '500': {description: Internal server error.}
    post:
      tags: [Address]
      summary: Create a new Address
      description: Creates a new Address.
      operationId: postAddress
      requestBody:
        description: Address details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/Address'}
      responses:
        '201':
          description: Address created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Address'}
        '400': {description: Invalid input.}
        '404': {description: Address not found.}
        '500': {description: Internal server error.}
  /Address/{id}:
    get:
      tags: [Address]
      summary: Retrieve a single Address
      description: Retrieves a single Address for a specific uid.
      x-spring-cacheable: true
      operationId: getAddress
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Address.
      responses:
        '200':
          description: Successfully retrieved the Address.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Address'}
        '404': {description: Address not found.}
        '500': {description: Internal server error.}
    put:
      tags: [Address]
      summary: Update an existing Address
      description: Updates an existing Address.
      operationId: updateAddress
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Address.
      requestBody:
        description: Updated Address details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/Address'}
      responses:
        '200':
          description: Address updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Address'}
        '400': {description: Invalid input.}
        '404': {description: Address not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [Address]
      summary: Delete a Address.
      description: Deletes a specific Address.
      operationId: deleteAddress
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Address.
      responses:
        '204': {description: Address deleted successfully.}
        '404': {description: Address not found.}
        '500': {description: Internal server error.}
  /Role:
    get:
      tags: [Role]
      summary: Retrieve a list of Roles
      description: Retrieves a list of Roles.
      x-spring-cacheable: true
      operationId: getRoleList
      responses:
        '200':
          description: Successfully retrieved the list of Roles.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/Role'}
        '404': {description: No Roles were found.}
        '500': {description: Internal server error.}
    post:
      tags: [Role]
      summary: Create a new Role
      description: Creates a new Role.
      operationId: postRole
      requestBody:
        description: Role details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/Role'}
      responses:
        '201':
          description: Role created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Role'}
        '400': {description: Invalid input.}
        '404': {description: Role not found.}
        '500': {description: Internal server error.}
  /Role/{id}:
    get:
      tags: [Role]
      summary: Retrieve a single Role
      description: Retrieves a single Role for a specific uid.
      x-spring-cacheable: true
      operationId: getRole
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Role.
      responses:
        '200':
          description: Successfully retrieved the Role.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Role'}
        '404': {description: Role not found.}
        '500': {description: Internal server error.}
    put:
      tags: [Role]
      summary: Update an existing Role
      description: Updates an existing Role.
      operationId: updateRole
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Role.
      requestBody:
        description: Updated Role details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/Role'}
      responses:
        '200':
          description: Role updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Role'}
        '400': {description: Invalid input.}
        '404': {description: Role not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [Role]
      summary: Delete a Role.
      description: Deletes a specific Role.
      operationId: deleteRole
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Role.
      responses:
        '204': {description: Role deleted successfully.}
        '404': {description: Role not found.}
        '500': {description: Internal server error.}
  /AclEntry:
    get:
      tags: [AclEntry]
      summary: Retrieve a list of AclEntrys
      description: Retrieves a list of AclEntrys.
      x-spring-cacheable: true
      operationId: getAclEntryList
      responses:
        '200':
          description: Successfully retrieved the list of AclEntrys.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/AclEntry'}
        '404': {description: No AclEntrys were found.}
        '500': {description: Internal server error.}
    post:
      tags: [AclEntry]
      summary: Create a new AclEntry
      description: Creates a new AclEntry.
      operationId: postAclEntry
      requestBody:
        description: AclEntry details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/AclEntry'}
      responses:
        '201':
          description: AclEntry created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/AclEntry'}
        '400': {description: Invalid input.}
        '404': {description: AclEntry not found.}
        '500': {description: Internal server error.}
  /AclEntry/{id}:
    get:
      tags: [AclEntry]
      summary: Retrieve a single AclEntry
      description: Retrieves a single AclEntry for a specific uid.
      x-spring-cacheable: true
      operationId: getAclEntry
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the AclEntry.
      responses:
        '200':
          description: Successfully retrieved the AclEntry.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/AclEntry'}
        '404': {description: AclEntry not found.}
        '500': {description: Internal server error.}
    put:
      tags: [AclEntry]
      summary: Update an existing AclEntry
      description: Updates an existing AclEntry.
      operationId: updateAclEntry
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the AclEntry.
      requestBody:
        description: Updated AclEntry details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/AclEntry'}
      responses:
        '200':
          description: AclEntry updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/AclEntry'}
        '400': {description: Invalid input.}
        '404': {description: AclEntry not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [AclEntry]
      summary: Delete a AclEntry.
      description: Deletes a specific AclEntry.
      operationId: deleteAclEntry
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the AclEntry.
      responses:
        '204': {description: AclEntry deleted successfully.}
        '404': {description: AclEntry not found.}
        '500': {description: Internal server error.}
  /Login:
    get:
      tags: [Login]
      summary: Retrieve a list of Logins
      description: Retrieves a list of Logins.
      x-spring-cacheable: true
      operationId: getLoginList
      responses:
        '200':
          description: Successfully retrieved the list of Logins.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/Login'}
        '404': {description: No Logins were found.}
        '500': {description: Internal server error.}
    post:
      tags: [Login]
      summary: Create a new Login
      description: Creates a new Login.
      operationId: postLogin
      requestBody:
        description: Login details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/Login'}
      responses:
        '201':
          description: Login created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Login'}
        '400': {description: Invalid input.}
        '404': {description: Login not found.}
        '500': {description: Internal server error.}
  /Login/{id}:
    get:
      tags: [Login]
      summary: Retrieve a single Login
      description: Retrieves a single Login for a specific uid.
      x-spring-cacheable: true
      operationId: getLogin
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Login.
      responses:
        '200':
          description: Successfully retrieved the Login.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Login'}
        '404': {description: Login not found.}
        '500': {description: Internal server error.}
    put:
      tags: [Login]
      summary: Update an existing Login
      description: Updates an existing Login.
      operationId: updateLogin
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Login.
      requestBody:
        description: Updated Login details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/Login'}
      responses:
        '200':
          description: Login updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Login'}
        '400': {description: Invalid input.}
        '404': {description: Login not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [Login]
      summary: Delete a Login.
      description: Deletes a specific Login.
      operationId: deleteLogin
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Login.
      responses:
        '204': {description: Login deleted successfully.}
        '404': {description: Login not found.}
        '500': {description: Internal server error.}
  /Logout:
    get:
      tags: [Logout]
      summary: Retrieve a list of Logouts
      description: Retrieves a list of Logouts.
      x-spring-cacheable: true
      operationId: getLogoutList
      responses:
        '200':
          description: Successfully retrieved the list of Logouts.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/Logout'}
        '404': {description: No Logouts were found.}
        '500': {description: Internal server error.}
    post:
      tags: [Logout]
      summary: Create a new Logout
      description: Creates a new Logout.
      operationId: postLogout
      requestBody:
        description: Logout details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/Logout'}
      responses:
        '201':
          description: Logout created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Logout'}
        '400': {description: Invalid input.}
        '404': {description: Logout not found.}
        '500': {description: Internal server error.}
  /Logout/{id}:
    get:
      tags: [Logout]
      summary: Retrieve a single Logout
      description: Retrieves a single Logout for a specific uid.
      x-spring-cacheable: true
      operationId: getLogout
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Logout.
      responses:
        '200':
          description: Successfully retrieved the Logout.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Logout'}
        '404': {description: Logout not found.}
        '500': {description: Internal server error.}
    put:
      tags: [Logout]
      summary: Update an existing Logout
      description: Updates an existing Logout.
      operationId: updateLogout
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Logout.
      requestBody:
        description: Updated Logout details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/Logout'}
      responses:
        '200':
          description: Logout updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Logout'}
        '400': {description: Invalid input.}
        '404': {description: Logout not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [Logout]
      summary: Delete a Logout.
      description: Deletes a specific Logout.
      operationId: deleteLogout
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Logout.
      responses:
        '204': {description: Logout deleted successfully.}
        '404': {description: Logout not found.}
        '500': {description: Internal server error.}
  /Customer:
    get:
      tags: [Customer]
      summary: Retrieve a list of Customers
      description: Retrieves a list of Customers.
      x-spring-cacheable: true
      operationId: getCustomerList
      responses:
        '200':
          description: Successfully retrieved the list of Customers.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/Customer'}
        '404': {description: No Customers were found.}
        '500': {description: Internal server error.}
    post:
      tags: [Customer]
      summary: Create a new Customer
      description: Creates a new Customer.
      operationId: postCustomer
      requestBody:
        description: Customer details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/Customer'}
      responses:
        '201':
          description: Customer created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Customer'}
        '400': {description: Invalid input.}
        '404': {description: Customer not found.}
        '500': {description: Internal server error.}
  /Customer/{id}:
    get:
      tags: [Customer]
      summary: Retrieve a single Customer
      description: Retrieves a single Customer for a specific uid.
      x-spring-cacheable: true
      operationId: getCustomer
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Customer.
      responses:
        '200':
          description: Successfully retrieved the Customer.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Customer'}
        '404': {description: Customer not found.}
        '500': {description: Internal server error.}
    put:
      tags: [Customer]
      summary: Update an existing Customer
      description: Updates an existing Customer.
      operationId: updateCustomer
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Customer.
      requestBody:
        description: Updated Customer details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/Customer'}
      responses:
        '200':
          description: Customer updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Customer'}
        '400': {description: Invalid input.}
        '404': {description: Customer not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [Customer]
      summary: Delete a Customer.
      description: Deletes a specific Customer.
      operationId: deleteCustomer
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Customer.
      responses:
        '204': {description: Customer deleted successfully.}
        '404': {description: Customer not found.}
        '500': {description: Internal server error.}
  /Opportunity:
    get:
      tags: [Opportunity]
      summary: Retrieve a list of Opportunitys
      description: Retrieves a list of Opportunitys.
      x-spring-cacheable: true
      operationId: getOpportunityList
      responses:
        '200':
          description: Successfully retrieved the list of Opportunitys.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/Opportunity'}
        '404': {description: No Opportunitys were found.}
        '500': {description: Internal server error.}
    post:
      tags: [Opportunity]
      summary: Create a new Opportunity
      description: Creates a new Opportunity.
      operationId: postOpportunity
      requestBody:
        description: Opportunity details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/Opportunity'}
      responses:
        '201':
          description: Opportunity created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Opportunity'}
        '400': {description: Invalid input.}
        '404': {description: Opportunity not found.}
        '500': {description: Internal server error.}
  /Opportunity/{id}:
    get:
      tags: [Opportunity]
      summary: Retrieve a single Opportunity
      description: Retrieves a single Opportunity for a specific uid.
      x-spring-cacheable: true
      operationId: getOpportunity
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Opportunity.
      responses:
        '200':
          description: Successfully retrieved the Opportunity.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Opportunity'}
        '404': {description: Opportunity not found.}
        '500': {description: Internal server error.}
    put:
      tags: [Opportunity]
      summary: Update an existing Opportunity
      description: Updates an existing Opportunity.
      operationId: updateOpportunity
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Opportunity.
      requestBody:
        description: Updated Opportunity details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/Opportunity'}
      responses:
        '200':
          description: Opportunity updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Opportunity'}
        '400': {description: Invalid input.}
        '404': {description: Opportunity not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [Opportunity]
      summary: Delete a Opportunity.
      description: Deletes a specific Opportunity.
      operationId: deleteOpportunity
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the Opportunity.
      responses:
        '204': {description: Opportunity deleted successfully.}
        '404': {description: Opportunity not found.}
        '500': {description: Internal server error.}
  /SalesActivity:
    get:
      tags: [SalesActivity]
      summary: Retrieve a list of SalesActivitys
      description: Retrieves a list of SalesActivitys.
      x-spring-cacheable: true
      operationId: getSalesActivityList
      responses:
        '200':
          description: Successfully retrieved the list of SalesActivitys.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/SalesActivity'}
        '404': {description: No SalesActivitys were found.}
        '500': {description: Internal server error.}
    post:
      tags: [SalesActivity]
      summary: Create a new SalesActivity
      description: Creates a new SalesActivity.
      operationId: postSalesActivity
      requestBody:
        description: SalesActivity details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/SalesActivity'}
      responses:
        '201':
          description: SalesActivity created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/SalesActivity'}
        '400': {description: Invalid input.}
        '404': {description: SalesActivity not found.}
        '500': {description: Internal server error.}
  /SalesActivity/{id}:
    get:
      tags: [SalesActivity]
      summary: Retrieve a single SalesActivity
      description: Retrieves a single SalesActivity for a specific uid.
      x-spring-cacheable: true
      operationId: getSalesActivity
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the SalesActivity.
      responses:
        '200':
          description: Successfully retrieved the SalesActivity.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/SalesActivity'}
        '404': {description: SalesActivity not found.}
        '500': {description: Internal server error.}
    put:
      tags: [SalesActivity]
      summary: Update an existing SalesActivity
      description: Updates an existing SalesActivity.
      operationId: updateSalesActivity
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the SalesActivity.
      requestBody:
        description: Updated SalesActivity details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/SalesActivity'}
      responses:
        '200':
          description: SalesActivity updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/SalesActivity'}
        '400': {description: Invalid input.}
        '404': {description: SalesActivity not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [SalesActivity]
      summary: Delete a SalesActivity.
      description: Deletes a specific SalesActivity.
      operationId: deleteSalesActivity
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the SalesActivity.
      responses:
        '204': {description: SalesActivity deleted successfully.}
        '404': {description: SalesActivity not found.}
        '500': {description: Internal server error.}
  /SalesPipeline:
    get:
      tags: [SalesPipeline]
      summary: Retrieve a list of SalesPipelines
      description: Retrieves a list of SalesPipelines.
      x-spring-cacheable: true
      operationId: getSalesPipelineList
      responses:
        '200':
          description: Successfully retrieved the list of SalesPipelines.
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/SalesPipeline'}
        '404': {description: No SalesPipelines were found.}
        '500': {description: Internal server error.}
    post:
      tags: [SalesPipeline]
      summary: Create a new SalesPipeline
      description: Creates a new SalesPipeline.
      operationId: postSalesPipeline
      requestBody:
        description: SalesPipeline details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/SalesPipeline'}
      responses:
        '201':
          description: SalesPipeline created successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/SalesPipeline'}
        '400': {description: Invalid input.}
        '404': {description: SalesPipeline not found.}
        '500': {description: Internal server error.}
  /SalesPipeline/{id}:
    get:
      tags: [SalesPipeline]
      summary: Retrieve a single SalesPipeline
      description: Retrieves a single SalesPipeline for a specific uid.
      x-spring-cacheable: true
      operationId: getSalesPipeline
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the SalesPipeline.
      responses:
        '200':
          description: Successfully retrieved the SalesPipeline.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/SalesPipeline'}
        '404': {description: SalesPipeline not found.}
        '500': {description: Internal server error.}
    put:
      tags: [SalesPipeline]
      summary: Update an existing SalesPipeline
      description: Updates an existing SalesPipeline.
      operationId: updateSalesPipeline
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the SalesPipeline.
      requestBody:
        description: Updated SalesPipeline details.
        required: true
        content:
          application/json:
            schema: {$ref: '#/components/schemas/SalesPipeline'}
      responses:
        '200':
          description: SalesPipeline updated successfully.
          content:
            application/json:
              schema: {$ref: '#/components/schemas/SalesPipeline'}
        '400': {description: Invalid input.}
        '404': {description: SalesPipeline not found.}
        '500': {description: Internal server error.}
    delete:
      tags: [SalesPipeline]
      summary: Delete a SalesPipeline.
      description: Deletes a specific SalesPipeline.
      operationId: deleteSalesPipeline
      parameters:
      - name: id
        schema: {type: string, format: uuid}
        in: path
        required: true
        description: Unique identifier for the SalesPipeline.
      responses:
        '204': {description: SalesPipeline deleted successfully.}
        '404': {description: SalesPipeline not found.}
        '500': {description: Internal server error.}
components:
  parameters:
    id:
      name: id
      in: path
      required: true
      description: The unique identifier of the object to retrieve.
      schema: {type: string, format: uuid}
  schemas:
    BackupConfig:
      type: object
      description: System backup configuration for backup jobs workstation and server
      properties:
        name: {type: string}
        description: {type: string, description: source code only backup of test workspace}
        remoteConfigUrl: {type: string, format: url, description: basically a callback
            url}
        runNumber: {type: integer, description: the number of times this has been
            run before}
        percentComplete: {type: integer, description: 0-100 percentage of compleion
            of this backup if known}
        type:
          description: the type of backup ie Workstation or Server
          type: string
          enum: [workstation, server, desktop, laptop, device]
        priorityLevel:
          type: string
          enum: [low, medium, high, critical]
        backupDir: {type: string, example: /users/jax/project-one, description: path
            to the folder that will be backed up}
        workingDir: {type: string, example: /users/jax/project-one, description: path
            to the folder that will be backed up}
        skiplist: {type: string, description: a json string describing the items to
            skip in the backup set, example: 'node_modules, etc.'}
        id:
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
          example: aaf87104-04a1-4239-844e-247cb6105969
        ownerId: {description: UUID of owner of the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.CREATED_BY,
            enabled = true)', format: uuid, example: f7755a99-2287-4b08-b10e-1b8c6da6c118}
        createdDate: {description: Date of object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time,
          example: '2025-01-03T16:21:41.585-0800'}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {description: Last user to access object, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_ACCESSED_BY,
            enabled = true)', format: uuid, example: 7ec04911-c235-4381-959d-f05e556a4881}
        lastAccessedDate: {description: Timestamp of last access of object, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_ACCESSED_DATE,
            enabled = true)', format: date-time, example: '2025-01-03T16:21:41.585-0800'}
        lastModifiedById: {description: Unique identifier for user who last modifed
            the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_BY, enabled = true)', format: uuid,
          example: 9b4774b7-2e2b-4f4e-b6d2-55d2f80c88de}
        lastModifiedDate: {description: Date of last object modification, type: string,
          x-field-extra-annotation: '    @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_DATE,
            enabled = true)', format: date-time, example: '2025-01-03T16:21:41.585-0800'}
    StrategicPriority:
      type: object
      description: Organization-Wide Strategic Priorities
      properties:
        name: {type: string}
        description: {type: string, description: high-level description of the strategic
            priority}
        priorityLevel:
          type: string
          enum: [low, medium, high, critical]
        imageUrl: {type: string, description: URL for the strategic priority, format: url,
          example: 'https://strategic-images.irl/image.png'}
        startDate: {type: string, format: date}
        targetDate: {type: string, format: date}
        goals:
          type: array
          items: {$ref: '#/components/schemas/Goal'}
        status:
          type: string
          enum: [Not-Started, In-Progress, Complete]
        id:
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
          example: fcb7f22d-8218-4520-873b-7745b7c62259
        ownerId: {description: UUID of owner of the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.CREATED_BY,
            enabled = true)', format: uuid, example: 95d2359b-8984-4779-b31a-03dfa3b6f475}
        createdDate: {description: Date of object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time,
          example: '2025-01-03T16:21:41.586-0800'}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {description: Last user to access object, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_ACCESSED_BY,
            enabled = true)', format: uuid, example: b6bb36ab-05e4-433a-8cba-a623adb6d860}
        lastAccessedDate: {description: Timestamp of last access of object, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_ACCESSED_DATE,
            enabled = true)', format: date-time, example: '2025-01-03T16:21:41.586-0800'}
        lastModifiedById: {description: Unique identifier for user who last modifed
            the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_BY, enabled = true)', format: uuid,
          example: 7b8145ba-18b0-48be-8005-7ba6e173c2a6}
        lastModifiedDate: {description: Date of last object modification, type: string,
          x-field-extra-annotation: '    @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_DATE,
            enabled = true)', format: date-time, example: '2025-01-03T16:21:41.586-0800'}
    KeyMetric:
      type: object
      description: A Key Metric for Tracking Strategy Results
      properties:
        goalId: {type: string, format: uuid}
        metricName: {type: string}
        metricValue: {type: float, description: actual value of the metric}
        targetValue: {type: float, description: expected value of the metric}
        id:
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
          example: d48355ce-9283-4437-a1d4-0665a3a9f9af
        ownerId: {description: UUID of owner of the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.CREATED_BY,
            enabled = true)', format: uuid, example: ea06f45c-5d3a-4b1c-8952-187af6682e18}
        createdDate: {description: Date of object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time,
          example: '2025-01-03T16:21:41.586-0800'}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {description: Last user to access object, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_ACCESSED_BY,
            enabled = true)', format: uuid, example: 51c25bf6-22ed-43a2-a0ce-3d157ebd2c28}
        lastAccessedDate: {description: Timestamp of last access of object, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_ACCESSED_DATE,
            enabled = true)', format: date-time, example: '2025-01-03T16:21:41.586-0800'}
        lastModifiedById: {description: Unique identifier for user who last modifed
            the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_BY, enabled = true)', format: uuid,
          example: c54babbc-7ef2-4c9f-a60e-a3c7f10cb2f3}
        lastModifiedDate: {description: Date of last object modification, type: string,
          x-field-extra-annotation: '    @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_DATE,
            enabled = true)', format: date-time, example: '2025-01-03T16:21:41.586-0800'}
    Goal:
      type: object
      description: A Strategic Goal
      properties:
        strategicPriorityId: {type: string, format: uuid, description: The strategic
            priority that this goal supports.}
        name: {type: string, description: the name of the goal}
        description: {type: string, description: the description of the goal}
        keyMetrics:
          type: array
          items: {$ref: '#/components/schemas/KeyMetric'}
          description: measurements used to track success
        goalDependencies:
          type: array
          items: {$ref: '#/components/schemas/GoalDependency'}
        expectedOutcome: {type: string, description: the positive expected outcome
            of the goal, example: faster code execution}
        risks: {type: string, description: description of the risk if the goal is
            not successful, example: lower stock price}
        timeline: {type: string}
        id:
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
          example: 5b1356eb-0ef0-4b8d-b822-3e3969e4f17e
        ownerId: {description: UUID of owner of the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.CREATED_BY,
            enabled = true)', format: uuid, example: d18e9265-7c0c-4285-b9e2-9bfcbc42d00b}
        createdDate: {description: Date of object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time,
          example: '2025-01-03T16:21:41.586-0800'}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {description: Last user to access object, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_ACCESSED_BY,
            enabled = true)', format: uuid, example: e51f413f-9ef9-4b12-b18f-fce57fcdd848}
        lastAccessedDate: {description: Timestamp of last access of object, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_ACCESSED_DATE,
            enabled = true)', format: date-time, example: '2025-01-03T16:21:41.586-0800'}
        lastModifiedById: {description: Unique identifier for user who last modifed
            the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_BY, enabled = true)', format: uuid,
          example: 8fa90a56-2720-46bd-95de-c20095c1d11e}
        lastModifiedDate: {description: Date of last object modification, type: string,
          x-field-extra-annotation: '    @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_DATE,
            enabled = true)', format: date-time, example: '2025-01-03T16:21:41.586-0800'}
    GoalDependency:
      type: object
      description: A dependency that a goal depends upon
      properties:
        goalId: {type: string, format: uuid}
        dependencyOrder: {type: integer, description: the order in which this dependency
            exists}
        dependencyName: {type: string, description: the name of the dependency}
        id:
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
          example: aa69b5cd-6773-4bd7-b923-6880238ede45
        ownerId: {description: UUID of owner of the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.CREATED_BY,
            enabled = true)', format: uuid, example: b5bfd1a7-6fe0-46b9-9ea7-e287df1b7d53}
        createdDate: {description: Date of object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time,
          example: '2025-01-03T16:21:41.586-0800'}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {description: Last user to access object, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_ACCESSED_BY,
            enabled = true)', format: uuid, example: b11c0ca4-6d9b-4433-8758-bf05df3fc049}
        lastAccessedDate: {description: Timestamp of last access of object, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_ACCESSED_DATE,
            enabled = true)', format: date-time, example: '2025-01-03T16:21:41.586-0800'}
        lastModifiedById: {description: Unique identifier for user who last modifed
            the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_BY, enabled = true)', format: uuid,
          example: 96e56a99-f729-44ab-98d2-d76856d2774c}
        lastModifiedDate: {description: Date of last object modification, type: string,
          x-field-extra-annotation: '    @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_DATE,
            enabled = true)', format: date-time, example: '2025-01-03T16:21:41.587-0800'}
    Game:
      type: object
      description: Percival the Dragon Slayer
      properties:
        name: {type: string, description: the name of the game}
        weapons:
          type: map
          items: {$ref: '#/components/schemas/GameWeaponIDX'}
        id:
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
          example: 2fc54c12-6913-478e-a087-e2222bf27ea5
        ownerId: {description: UUID of owner of the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.CREATED_BY,
            enabled = true)', format: uuid, example: 7d6f7412-2a3c-44f8-98be-b5b022b4829e}
        createdDate: {description: Date of object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time,
          example: '2025-01-03T16:21:41.587-0800'}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {description: Last user to access object, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_ACCESSED_BY,
            enabled = true)', format: uuid, example: 537dbb10-653a-4599-9049-0bc65a86babb}
        lastAccessedDate: {description: Timestamp of last access of object, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_ACCESSED_DATE,
            enabled = true)', format: date-time, example: '2025-01-03T16:21:41.587-0800'}
        lastModifiedById: {description: Unique identifier for user who last modifed
            the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_BY, enabled = true)', format: uuid,
          example: 2e2698cb-2812-4af2-9835-0307fb620b25}
        lastModifiedDate: {description: Date of last object modification, type: string,
          x-field-extra-annotation: '    @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_DATE,
            enabled = true)', format: date-time, example: '2025-01-03T16:21:41.587-0800'}
    GameWeaponIDX:
      type: object
      description: IDX object that links weapons to games
      properties:
        gameId: {type: string, format: uuid}
        weaponId: {type: string, format: uuid}
        id:
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
          example: 4b37eb03-82c6-4146-8e5b-b715c165f580
        ownerId: {description: UUID of owner of the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.CREATED_BY,
            enabled = true)', format: uuid, example: 80601c34-1c3e-4710-8527-a27c0737921f}
        createdDate: {description: Date of object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time,
          example: '2025-01-03T16:21:41.587-0800'}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {description: Last user to access object, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_ACCESSED_BY,
            enabled = true)', format: uuid, example: 619a6ba7-3f15-49db-a680-86f9f804ba73}
        lastAccessedDate: {description: Timestamp of last access of object, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_ACCESSED_DATE,
            enabled = true)', format: date-time, example: '2025-01-03T16:21:41.587-0800'}
        lastModifiedById: {description: Unique identifier for user who last modifed
            the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_BY, enabled = true)', format: uuid,
          example: 44b24cd5-32de-49d0-a1e0-943507f98605}
        lastModifiedDate: {description: Date of last object modification, type: string,
          x-field-extra-annotation: '    @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_DATE,
            enabled = true)', format: date-time, example: '2025-01-03T16:21:41.587-0800'}
    Attack:
      type: object
      description: DEMO attack of various type
      properties:
        name: {type: string, description: the name of the attack}
        type:
          type: string
          enum: [FRONTAL, SNEAK, FROM_ABOVE, FROM_BELOW, WATER, LAND, AIR]
        weapon: {$ref: '#/components/schemas/Weapon'}
        id:
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
          example: eb84046e-e66f-4cf1-bcca-a7fe1e9bd457
        ownerId: {description: UUID of owner of the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.CREATED_BY,
            enabled = true)', format: uuid, example: fb8355a4-16ac-4853-b869-bf4f9c2f9c63}
        createdDate: {description: Date of object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time,
          example: '2025-01-03T16:21:41.587-0800'}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {description: Last user to access object, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_ACCESSED_BY,
            enabled = true)', format: uuid, example: 69ed1b31-0da5-49b3-aaa7-2436283e93d6}
        lastAccessedDate: {description: Timestamp of last access of object, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_ACCESSED_DATE,
            enabled = true)', format: date-time, example: '2025-01-03T16:21:41.587-0800'}
        lastModifiedById: {description: Unique identifier for user who last modifed
            the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_BY, enabled = true)', format: uuid,
          example: 20886e51-82db-4d42-acf4-b165f8eaf2a2}
        lastModifiedDate: {description: Date of last object modification, type: string,
          x-field-extra-annotation: '    @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_DATE,
            enabled = true)', format: date-time, example: '2025-01-03T16:21:41.587-0800'}
    Weapon:
      type: object
      description: DEMO weapon that can be used for the game
      properties:
        attackId: {type: string, format: uuid}
        name: {type: string, description: the name of the weapon}
        game: {$ref: '#/components/schemas/GameWeaponIDX'}
        harmLevel: {type: integer, description: the the damage output level the weapon
            can have, minimum: 0, maximum: 100}
        weight: {type: integer, description: how much one of these weapons weighs
            in lbs}
        color:
          type: string
          enum: [BLACK, CAMO-AIRFORCE, CAMO-MARINE, CAMO-NAVY, CAMO-ARMY, GRAY, OLIVE,
            SILVER, GOLD, EXOTIC]
        weaponType:
          type: string
          enum: [BALLISTiC, PROJECTILE, FIRE, KINETIC, NUCLEAR, MUNITIONS, MELEE,
            AIRCRAFT, VESSELS, BOWS, SLINGS]
          description: the type of the weapon
        id:
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
          example: b20b611b-53a5-49c5-82ba-fd9c6a8f9f1a
        ownerId: {description: UUID of owner of the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.CREATED_BY,
            enabled = true)', format: uuid, example: b672d035-114a-4f68-b21f-2dc8aed6c332}
        createdDate: {description: Date of object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time,
          example: '2025-01-03T16:21:41.587-0800'}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {description: Last user to access object, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_ACCESSED_BY,
            enabled = true)', format: uuid, example: 53488ab9-0365-4c42-a033-e7396b4df88e}
        lastAccessedDate: {description: Timestamp of last access of object, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_ACCESSED_DATE,
            enabled = true)', format: date-time, example: '2025-01-03T16:21:41.588-0800'}
        lastModifiedById: {description: Unique identifier for user who last modifed
            the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_BY, enabled = true)', format: uuid,
          example: dd456faa-efaf-41d9-a3fe-661cc04564c5}
        lastModifiedDate: {description: Date of last object modification, type: string,
          x-field-extra-annotation: '    @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_DATE,
            enabled = true)', format: date-time, example: '2025-01-03T16:21:41.588-0800'}
    Level:
      type: object
      description: a game level
      properties:
        name: {type: string, description: the name of level}
        level: {type: integer, description: the sequential level index (if applicable),
          minimum: 0}
        scoreMultiplier: {type: integer, description: use to increment extra points
            for harder levels}
        color:
          type: string
          enum: [BLACK, CAMO-AIRFORCE, CAMO-MARINE, CAMO-NAVY, CAMO-ARMY, GRAY, OLIVE,
            SILVER, GOLD, EXOTIC]
        levelType:
          type: string
          enum: [MAP, ACHIEVEMENT, BATTLE, CINEMATIC]
          description: the type of the level
        id:
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
          example: ffef594f-a40e-43c3-a913-fb4294f8a897
        ownerId: {description: UUID of owner of the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.CREATED_BY,
            enabled = true)', format: uuid, example: fdbb825b-0db1-43bf-ab1f-485c482df862}
        createdDate: {description: Date of object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time,
          example: '2025-01-03T16:21:41.588-0800'}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {description: Last user to access object, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_ACCESSED_BY,
            enabled = true)', format: uuid, example: e13d1a53-bdf7-4ef8-9ce5-5d2c4bad654f}
        lastAccessedDate: {description: Timestamp of last access of object, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_ACCESSED_DATE,
            enabled = true)', format: date-time, example: '2025-01-03T16:21:41.588-0800'}
        lastModifiedById: {description: Unique identifier for user who last modifed
            the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_BY, enabled = true)', format: uuid,
          example: 941a62d0-68f0-42f6-a883-70bd5b776b58}
        lastModifiedDate: {description: Date of last object modification, type: string,
          x-field-extra-annotation: '    @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_DATE,
            enabled = true)', format: date-time, example: '2025-01-03T16:21:41.588-0800'}
    SecureKey:
      type: object
      description: SecureKey is the KMS for the SecureField keys
      x-valkyrai-service: microservice
      properties:
        notes: {description: any notes about the key, type: string, maxLength: 1000,
          example: This key was generated by the system, x-field-extra-annotation: '@Column(length
            = 1000)'}
        algorithm: {description: the algorithm used for encryption/decryption, type: string}
        version: {description: the version of this key, type: string}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        cipherWorkCost: {description: the exponential strength of the BCrypt hashing
            used by the Hashing cipher, example: 12, type: integer, minimum: 10, maximum: 35}
        keyValue: {description: the key itself, type: string, minLength: 10}
        status:
          type: string
          enum: [ACTIVE, DEFAULT, ARCHIVED, REVOKED, INVALID]
          x-enum-descriptions: [Key is actively used, Key is the default to use when
              no specif key is provided, Key is not being used but still valid, Key
              is revoked and MUST NOT be used, Key is invalid and will not work]
          x-enum-varnames: [keyActive, keyDefault, keyArchived, keyRevoked, keyInvalid]
        id:
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
          example: da141499-59df-46d2-96b1-7db9f839ae52
        ownerId: {description: UUID of owner of the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.CREATED_BY,
            enabled = true)', format: uuid, example: 9e896486-f5f7-41a8-bff4-e51ce437b503}
        createdDate: {description: Date of object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time,
          example: '2025-01-03T16:21:41.588-0800'}
        lastAccessedById: {description: Last user to access object, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_ACCESSED_BY,
            enabled = true)', format: uuid, example: 44bcd118-6595-439a-a9bd-1b99d0841763}
        lastAccessedDate: {description: Timestamp of last access of object, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_ACCESSED_DATE,
            enabled = true)', format: date-time, example: '2025-01-03T16:21:41.588-0800'}
        lastModifiedById: {description: Unique identifier for user who last modifed
            the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_BY, enabled = true)', format: uuid,
          example: 5332563e-860f-4475-910d-ef5ffa0077d3}
        lastModifiedDate: {description: Date of last object modification, type: string,
          x-field-extra-annotation: '    @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_DATE,
            enabled = true)', format: date-time, example: '2025-01-03T16:21:41.588-0800'}
      required: [algorithm, version, keyValue, status]
    Build:
      type: object
      description: Represents a ThorAPI build including success or failure
      properties:
        name: {type: string}
        applicationId: {type: string, format: uuid}
        status:
          type: string
          enum: [PENDING, RUNNING, SUCCESS, FAILURE]
        projectPath: {type: string}
        testEnumCodegen:
          type: integer
          format: int32
          enum: [0, 10, 1000]
          x-enum-descriptions: [zero balance, money for lunch, get on that plane]
          x-enum-varnames: [broke, poor, rich]
        mavenHome: {type: string}
        outputs:
          type: array
          items: {$ref: '#/components/schemas/BuildOutput'}
        dependencies:
          type: array
          items: {$ref: '#/components/schemas/Depend'}
        id:
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
          example: bae75923-cf02-4033-aed9-5d39c557a631
        ownerId: {description: UUID of owner of the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.CREATED_BY,
            enabled = true)', format: uuid, example: 8d2ba375-5f95-4a3b-bde5-f6bd8f814022}
        createdDate: {description: Date of object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time,
          example: '2025-01-03T16:21:41.589-0800'}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {description: Last user to access object, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_ACCESSED_BY,
            enabled = true)', format: uuid, example: efe380db-ebb5-48ec-a55b-63272c48fbad}
        lastAccessedDate: {description: Timestamp of last access of object, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_ACCESSED_DATE,
            enabled = true)', format: date-time, example: '2025-01-03T16:21:41.589-0800'}
        lastModifiedById: {description: Unique identifier for user who last modifed
            the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_BY, enabled = true)', format: uuid,
          example: 7a5a5711-5e84-436f-a944-8332f54748c1}
        lastModifiedDate: {description: Date of last object modification, type: string,
          x-field-extra-annotation: '    @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_DATE,
            enabled = true)', format: date-time, example: '2025-01-03T16:21:41.589-0800'}
      required: [name, status, projectPath, mavenHome]
    BuildOutput:
      type: object
      description: TODO BuildOutput CLASS DESCRIPTION
      properties:
        applicationId: {type: string, format: uuid}
        buildId: {type: string, format: uuid}
        lastSuccessfulRun: {type: string, format: date-time}
        success: {type: boolean}
        output: {type: string}
        solutions:
          type: array
          items: {$ref: '#/components/schemas/Solution'}
        id:
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
          example: 4c9185d2-b6be-49a9-a6f0-12ac00526ea7
        ownerId: {description: UUID of owner of the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.CREATED_BY,
            enabled = true)', format: uuid, example: 5e0a24d4-1d47-4295-a249-cf2d27ebb2d2}
        createdDate: {description: Date of object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time,
          example: '2025-01-03T16:21:41.589-0800'}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {description: Last user to access object, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_ACCESSED_BY,
            enabled = true)', format: uuid, example: a421ec6a-0fcf-4b60-9c39-536a111f75d3}
        lastAccessedDate: {description: Timestamp of last access of object, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_ACCESSED_DATE,
            enabled = true)', format: date-time, example: '2025-01-03T16:21:41.589-0800'}
        lastModifiedById: {description: Unique identifier for user who last modifed
            the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_BY, enabled = true)', format: uuid,
          example: 5b8bbd53-7763-4315-8ec0-c6bfb5a4e340}
        lastModifiedDate: {description: Date of last object modification, type: string,
          x-field-extra-annotation: '    @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_DATE,
            enabled = true)', format: date-time, example: '2025-01-03T16:21:41.590-0800'}
      required: [buildId, timestamp, success, output]
    Solution:
      type: object
      description: TODO Solution CLASS DESCRIPTION
      properties:
        buildOutputId: {type: string, format: uuid}
        description: {type: string}
        appliedFix: {type: boolean}
        id:
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
          example: 2f1d84c3-14ee-448d-bdfe-ab32aa63e65e
        ownerId: {description: UUID of owner of the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.CREATED_BY,
            enabled = true)', format: uuid, example: bcfd4898-6c0d-4851-afa9-ea50afae756a}
        createdDate: {description: Date of object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time,
          example: '2025-01-03T16:21:41.590-0800'}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {description: Last user to access object, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_ACCESSED_BY,
            enabled = true)', format: uuid, example: 027a46b8-1cd5-4f4d-b5c9-ffb26b1f851c}
        lastAccessedDate: {description: Timestamp of last access of object, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_ACCESSED_DATE,
            enabled = true)', format: date-time, example: '2025-01-03T16:21:41.590-0800'}
        lastModifiedById: {description: Unique identifier for user who last modifed
            the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_BY, enabled = true)', format: uuid,
          example: 1f2cef09-e2a9-4711-b36b-ffb31de7a53b}
        lastModifiedDate: {description: Date of last object modification, type: string,
          x-field-extra-annotation: '    @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_DATE,
            enabled = true)', format: date-time, example: '2025-01-03T16:21:41.590-0800'}
      required: [buildOutputId, description, appliedFix]
    Depend:
      type: object
      description: TODO Depend CLASS DESCRIPTION
      properties:
        groupId: {type: string}
        artifactId: {type: string}
        version: {type: string}
        scope: {type: string}
        status:
          type: string
          enum: [UP_TO_DATE, OUTDATED, MISSING]
        buildId: {type: string, format: uuid}
        id:
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
          example: 7a939498-f1ed-440a-9e03-20663e80687c
        ownerId: {description: UUID of owner of the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.CREATED_BY,
            enabled = true)', format: uuid, example: 98a15229-072c-4fff-8042-01d805c59670}
        createdDate: {description: Date of object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time,
          example: '2025-01-03T16:21:41.590-0800'}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {description: Last user to access object, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_ACCESSED_BY,
            enabled = true)', format: uuid, example: a62aeda2-6624-4cf1-bfa7-d042453c0312}
        lastAccessedDate: {description: Timestamp of last access of object, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_ACCESSED_DATE,
            enabled = true)', format: date-time, example: '2025-01-03T16:21:41.590-0800'}
        lastModifiedById: {description: Unique identifier for user who last modifed
            the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_BY, enabled = true)', format: uuid,
          example: 64394faf-ca2a-4bc0-9078-f43f4f55342a}
        lastModifiedDate: {description: Date of last object modification, type: string,
          x-field-extra-annotation: '    @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_DATE,
            enabled = true)', format: date-time, example: '2025-01-03T16:21:41.590-0800'}
      required: [groupId, artifactId, version]
    LlmDetails:
      type: object
      description: TODO LlmDetails CLASS DESCRIPTION
      properties:
        name: {type: string, description: The name of the LLM}
        version: {type: string, description: The vendor-specific version of the LLM,
          example: v3.0.3-B8}
        notes: {type: string, description: Notes on the LLM implementation}
        role:
          type: string
          enum: [user, assistant]
          description: the user role to set for the target LLM
        provider:
          type: string
          enum: [valkyrai, openai, llama, phi, gemma, mistral, claude, gemini, other]
        apiType:
          type: string
          enum: [openai, ollama, other]
        initialPrompt: {maxLength: 5000, minLength: 64, type: string, description: the
            initial prompt to instruct the LLM how to behave, example: You are a helpful
            assistant, x-field-extra-annotation: '@Column(length = 5000)'}
        apiKey:
          maxLength: 1024
          minLength: 16
          type: string
          description: the api-key to access the llm
          format: password
          example: D6ObBZ599Z3xkuohG3/cogxZYwhxdVyLlIAPanlO35I=
          x-thorapi-secureField: true
          x-field-extra-annotation: |-
            @SecureField(encryptionType = SecureField.EncryptionType.SYMMETRIC, strength = 5)
            @Column(length = 3072)
        credential: {type: string, description: the user name to access the LLM, x-thorapi-secureField: true,
          x-field-extra-annotation: '@SecureField(encryptionType = SecureField.EncryptionType.SYMMETRIC,
            strength = 5)'}
        credentialPassword:
          maxLength: 35
          minLength: 8
          type: string
          description: the password to access the LLM
          format: password
          example: c@nnotBeH@ckd!
          x-field-extra-annotation: |-
            @Column(length = 35)
            @SecureField(encryptionType = SecureField.EncryptionType.HASHED, strength = 10)
        url: {type: string, format: url, description: the URL to connect to the LLM
            api}
        requestParameters: {type: string, description: request parameters to send
            to the service}
        meta: {type: string, description: metadata in any text format to be used in
            client code}
        id:
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
          example: b3c75132-b3eb-458e-b8e2-9df5ff48c36c
        ownerId: {description: UUID of owner of the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.CREATED_BY,
            enabled = true)', format: uuid, example: 2570f2fd-5cf6-4d2e-b53e-49a052eb29b3}
        createdDate: {description: Date of object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time,
          example: '2025-01-03T16:21:41.590-0800'}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {description: Last user to access object, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_ACCESSED_BY,
            enabled = true)', format: uuid, example: d32122d6-3e7a-409d-acf2-588c797823fc}
        lastAccessedDate: {description: Timestamp of last access of object, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_ACCESSED_DATE,
            enabled = true)', format: date-time, example: '2025-01-03T16:21:41.590-0800'}
        lastModifiedById: {description: Unique identifier for user who last modifed
            the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_BY, enabled = true)', format: uuid,
          example: f92f6ca3-0741-47ef-be79-fe4e048e2b75}
        lastModifiedDate: {description: Date of last object modification, type: string,
          x-field-extra-annotation: '    @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_DATE,
            enabled = true)', format: date-time, example: '2025-01-03T16:21:41.590-0800'}
      xml: {name: LLMDetails}
    Workflow:
      type: object
      description: ValkyrAI Workflow object manages execution and state of automation
        workflows
      properties:
        name: {type: string, description: short description of this workflow, example: Customer
            Email Workflow}
        description: {type: string, description: detailed description of this workflow,
          example: this workflow is designed to keep customers in the loop}
        role:
          type: string
          enum: [user, assistant, system]
          description: the role with permissions to execute the workfow as
        schedule: {type: string, example: '*/20 * * * * ?', description: cron string
            to determine when this runs}
        meta: {type: string, description: metadata in any text format to be used in
            client code}
        tasks:
          description: an array of Tasks to be performed
          type: array
          items: {$ref: '#/components/schemas/Task'}
        state:
          description: an array stateful objects to be used in the workflow
          type: array
          items: {$ref: '#/components/schemas/WorkflowState'}
        status:
          description: last known status of the workflow
          type: string
          enum: [running, stopped, ready, warning, error, disabled]
        id:
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
          example: bdd61864-f164-4ecd-b92e-3b261527b4d2
        ownerId: {description: UUID of owner of the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.CREATED_BY,
            enabled = true)', format: uuid, example: e3415238-fa96-480b-9d57-1f41fbd7f5b1}
        createdDate: {description: Date of object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time,
          example: '2025-01-03T16:21:41.591-0800'}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {description: Last user to access object, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_ACCESSED_BY,
            enabled = true)', format: uuid, example: 1ced40ec-8db9-44cd-8b0c-96ff88c95a59}
        lastAccessedDate: {description: Timestamp of last access of object, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_ACCESSED_DATE,
            enabled = true)', format: date-time, example: '2025-01-03T16:21:41.591-0800'}
        lastModifiedById: {description: Unique identifier for user who last modifed
            the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_BY, enabled = true)', format: uuid,
          example: 2dcfeb88-4f40-4efa-8c4b-565e25f3025f}
        lastModifiedDate: {description: Date of last object modification, type: string,
          x-field-extra-annotation: '    @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_DATE,
            enabled = true)', format: date-time, example: '2025-01-03T16:21:41.591-0800'}
      xml: {name: Workflow}
    WorkflowState:
      type: object
      description: ValkyrAI Workflow State object holds the state container for a
        workflow
      properties:
        workflowId: {type: string, format: uuid, description: The workflow this state
            is participating in}
        name: {description: name of the property that holds the value, type: string}
        value:
          description: value of the property
          type: array
          items: {type: DataObject}
        id:
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
          example: 5dc825b4-cb9e-4393-9efc-132cdb42d7dc
        ownerId: {description: UUID of owner of the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.CREATED_BY,
            enabled = true)', format: uuid, example: bbcb7dff-ec66-4653-bdd6-70e85be7418e}
        createdDate: {description: Date of object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time,
          example: '2025-01-03T16:21:41.591-0800'}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {description: Last user to access object, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_ACCESSED_BY,
            enabled = true)', format: uuid, example: 4d5b0148-a2e5-4237-87c2-6ed656c9ef5e}
        lastAccessedDate: {description: Timestamp of last access of object, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_ACCESSED_DATE,
            enabled = true)', format: date-time, example: '2025-01-03T16:21:41.591-0800'}
        lastModifiedById: {description: Unique identifier for user who last modifed
            the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_BY, enabled = true)', format: uuid,
          example: c04a3ea4-8fbd-4615-937e-fb4cb5fb09a0}
        lastModifiedDate: {description: Date of last object modification, type: string,
          x-field-extra-annotation: '    @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_DATE,
            enabled = true)', format: date-time, example: '2025-01-03T16:21:41.591-0800'}
    Task:
      type: object
      description: ValkyrAI Task object manages execution and state of automation
        workflows
      properties:
        description: {type: string}
        workflowId: {type: string, format: uuid, description: The workflow this state
            is participating in}
        role:
          type: string
          enum: [user, assistant]
          description: override the workflow role for specific task -login to a system-
            the role with permissions -temporary user is created
        modules:
          description: an array of ExecModules to be processed
          type: array
          items: {$ref: '#/components/schemas/ExecModule'}
        status:
          description: last known status of the task
          type: string
          enum: [running, stopped, ready, good, warning, error, disabled]
        id:
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
          example: 0306f180-dd9f-4365-8509-e6ae000ee95e
        ownerId: {description: UUID of owner of the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.CREATED_BY,
            enabled = true)', format: uuid, example: 9fcb308d-2d5d-4ad6-a2a7-406e6e00b3a4}
        createdDate: {description: Date of object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time,
          example: '2025-01-03T16:21:41.591-0800'}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {description: Last user to access object, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_ACCESSED_BY,
            enabled = true)', format: uuid, example: 74a8eb08-53ba-403c-9e52-40cc195f4ac0}
        lastAccessedDate: {description: Timestamp of last access of object, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_ACCESSED_DATE,
            enabled = true)', format: date-time, example: '2025-01-03T16:21:41.591-0800'}
        lastModifiedById: {description: Unique identifier for user who last modifed
            the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_BY, enabled = true)', format: uuid,
          example: e4ed1f11-eed0-44e9-8d3a-9e0f1a2c700f}
        lastModifiedDate: {description: Date of last object modification, type: string,
          x-field-extra-annotation: '    @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_DATE,
            enabled = true)', format: date-time, example: '2025-01-03T16:21:41.591-0800'}
      xml: {name: Task}
    ExecModule:
      type: object
      description: ExecModule is the execution unit of the ValkyrAI Workflow Engine
      properties:
        systemId: {type: string, format: uuid, description: UUID of the system object
            being mutated/read (if any)}
        taskId: {type: string, format: uuid, description: The task this module is
            executing in}
        role:
          description: the RBAC role to use in mutating/reading any system object
          type: string
          enum: [anonymous, user, admin]
        name: {description: the name of the module, example: 'EmailSendModule, OpenApiSpecImportModule',
          type: string}
        notes: {description: notes about the module, type: string}
        integrationAccount: {$ref: '#/components/schemas/IntegrationAccount'}
        className: {description: the name of the implementation class for this module,
          example: 'EmailModule, PipelineModule, RestApiModule', type: string, x-thorapi-dataField: pick~getAvailableVmodules,
          x-field-extra-annotation: '@DataField(unique = false, hidden = false, advanced
            = false, relationshipTable="pick~getAvailableVmodules")'}
        moduleType:
          description: the type of module
          type: string
          enum: [broadcast, io, reader, writer, transformer]
        moduleData: {type: string, maxLength: 3000, description: json for configuring
            the module, x-field-extra-annotation: '@Column(length = 3000)'}
        status:
          description: last known status of the module
          type: string
          enum: [running, stopped, ready, good, warning, error, disabled]
        id:
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
          example: 21019af6-6e83-4148-b290-0fe61e5d1e30
        ownerId: {description: UUID of owner of the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.CREATED_BY,
            enabled = true)', format: uuid, example: 0ae05055-3e5a-43ce-92b2-6e8e1595f7ae}
        createdDate: {description: Date of object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time,
          example: '2025-01-03T16:21:41.591-0800'}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {description: Last user to access object, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_ACCESSED_BY,
            enabled = true)', format: uuid, example: ba9273f4-5fad-45f6-9430-15bcdd7794f7}
        lastAccessedDate: {description: Timestamp of last access of object, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_ACCESSED_DATE,
            enabled = true)', format: date-time, example: '2025-01-03T16:21:41.591-0800'}
        lastModifiedById: {description: Unique identifier for user who last modifed
            the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_BY, enabled = true)', format: uuid,
          example: 6be1f028-58a4-496e-a9ff-67964eb7dc6a}
        lastModifiedDate: {description: Date of last object modification, type: string,
          x-field-extra-annotation: '    @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_DATE,
            enabled = true)', format: date-time, example: '2025-01-03T16:21:41.591-0800'}
      xml: {name: ExecModule}
    EventLog:
      type: object
      description: Logs specific Workflow Related Events
      properties:
        eventDetails: {type: string, description: detailed event description}
        status:
          type: string
          enum: [ok, error, disabled]
          description: status for event
        id:
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
          example: 87b6b34b-2dbb-4b24-a91f-a8745dcd113c
        ownerId: {description: UUID of owner of the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.CREATED_BY,
            enabled = true)', format: uuid, example: 156ecb64-3a71-428c-ab6f-e374afe38c90}
        createdDate: {description: Date of object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time,
          example: '2025-01-03T16:21:41.592-0800'}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {description: Last user to access object, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_ACCESSED_BY,
            enabled = true)', format: uuid, example: 290acc79-36c5-44cb-be2c-8e5eb154830c}
        lastAccessedDate: {description: Timestamp of last access of object, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_ACCESSED_DATE,
            enabled = true)', format: date-time, example: '2025-01-03T16:21:41.592-0800'}
        lastModifiedById: {description: Unique identifier for user who last modifed
            the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_BY, enabled = true)', format: uuid,
          example: 4d0ad46d-7288-4a65-9739-597b9b9ba051}
        lastModifiedDate: {description: Date of last object modification, type: string,
          x-field-extra-annotation: '    @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_DATE,
            enabled = true)', format: date-time, example: '2025-01-03T16:21:41.592-0800'}
      xml: {name: EventLog}
    Application:
      type: object
      description: Application represents a logical system
      properties:
        name: {type: string, description: name of the application}
        description: {type: string, description: detailed description of the application}
        isTemplate: {type: boolean, description: whether this Application is a Template}
        type:
          type: string
          enum: [full-stack, automation, agent, service, front-end, mobile, ci-cd,
            lambda]
          description: type of application
        status:
          type: string
          enum: [ready, deployed, staging, error, disabled]
          description: status for event
        entrypointUrl: {type: string, format: url, description: the url to the 'homepage'
            or service endpoint}
        contentMedia:
          type: array
          items: {$ref: '#/components/schemas/ContentMediaLink'}
        id:
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
          example: 9744cc06-1817-4d43-a25c-6940c3795aa1
        ownerId: {description: UUID of owner of the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.CREATED_BY,
            enabled = true)', format: uuid, example: be82da4e-c266-424b-b040-56dd0df0dd77}
        createdDate: {description: Date of object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time,
          example: '2025-01-03T16:21:41.592-0800'}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {description: Last user to access object, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_ACCESSED_BY,
            enabled = true)', format: uuid, example: 4a87751a-c2ed-42e2-b6fd-aeb730717a3c}
        lastAccessedDate: {description: Timestamp of last access of object, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_ACCESSED_DATE,
            enabled = true)', format: date-time, example: '2025-01-03T16:21:41.592-0800'}
        lastModifiedById: {description: Unique identifier for user who last modifed
            the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_BY, enabled = true)', format: uuid,
          example: 08099e6f-4156-4ca9-aeb0-2a0a04a66b59}
        lastModifiedDate: {description: Date of last object modification, type: string,
          x-field-extra-annotation: '    @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_DATE,
            enabled = true)', format: date-time, example: '2025-01-03T16:21:41.592-0800'}
      xml: {name: Application}
    ChatMessage:
      type: object
      description: A Chat message sent to a recipient
      properties:
        sessionId: {type: string}
        connected: {type: boolean, description: if this chat message is conencted
            to a service (ws)}
        json: {type: string, maxLength: 3000, x-field-extra-annotation: '@Column(length
            = 3000)'}
        sourceType:
          type: string
          description: type of the message source
          enum: [api, server_log, p2p]
        sourceOwner: {type: string, format: uuid}
        role:
          type: string
          enum: [user, assistant]
        content: {maxLength: 100000, minLength: 10, type: string, description: the
            message to send to the chat service, example: 'What is the next step for
            our adventure?', x-field-extra-annotation: '@Column(length = 100000)'}
        id:
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
          example: 843865cf-aeeb-4e86-87a4-e6e6e4c0fa91
        ownerId: {description: UUID of owner of the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.CREATED_BY,
            enabled = true)', format: uuid, example: 48318675-0de4-4cc0-9598-601df73c48b0}
        createdDate: {description: Date of object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time,
          example: '2025-01-03T16:21:41.592-0800'}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {description: Last user to access object, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_ACCESSED_BY,
            enabled = true)', format: uuid, example: 9c13ea7e-7254-47bf-881a-a62740fc8742}
        lastAccessedDate: {description: Timestamp of last access of object, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_ACCESSED_DATE,
            enabled = true)', format: date-time, example: '2025-01-03T16:21:41.592-0800'}
        lastModifiedById: {description: Unique identifier for user who last modifed
            the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_BY, enabled = true)', format: uuid,
          example: a448f2ce-98d1-4871-9623-f7fdd6bd49b2}
        lastModifiedDate: {description: Date of last object modification, type: string,
          x-field-extra-annotation: '    @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_DATE,
            enabled = true)', format: date-time, example: '2025-01-03T16:21:41.592-0800'}
    ChatResponse:
      type: object
      description: Chatresponse from the other side of the communication
      properties:
        sessionId: {type: string}
        json: {type: string, maxLength: 3000, x-field-extra-annotation: '@Column(length
            = 3000)'}
        sourceType:
          type: string
          description: type of the message source
          enum: [api, server_log, p2p]
        sourceOwner: {type: string, format: uuid}
        role:
          type: string
          enum: [user, assistant]
        content: {maxLength: 100000, minLength: 10, type: string, description: the
            response fro the chat service, example: We must cross the mighty Mississippi,
          x-field-extra-annotation: '@Column(length = 100000)'}
        id:
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
          example: ff6c8d64-d659-4099-8cbd-8841811d1320
        ownerId: {description: UUID of owner of the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.CREATED_BY,
            enabled = true)', format: uuid, example: 37b8c8b9-b206-47c3-941b-752eb23a706c}
        createdDate: {description: Date of object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time,
          example: '2025-01-03T16:21:41.594-0800'}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {description: Last user to access object, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_ACCESSED_BY,
            enabled = true)', format: uuid, example: a88dc9eb-ad87-4247-903e-5a2ad302929c}
        lastAccessedDate: {description: Timestamp of last access of object, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_ACCESSED_DATE,
            enabled = true)', format: date-time, example: '2025-01-03T16:21:41.594-0800'}
        lastModifiedById: {description: Unique identifier for user who last modifed
            the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_BY, enabled = true)', format: uuid,
          example: ac846de8-26e9-42f8-9da9-36db6b0b5b47}
        lastModifiedDate: {description: Date of last object modification, type: string,
          x-field-extra-annotation: '    @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_DATE,
            enabled = true)', format: date-time, example: '2025-01-03T16:21:41.594-0800'}
    Reaction:
      required: [target, value]
      type: object
      description: Reaction allows for tagging any content in the system with an emoji
      properties:
        targetObject: {type: string, format: uuid, description: UUID of the system
            object, example: ABC234}
        reaction:
          type: string
          description: the reaction to the item
          enum: [like, dislike, neutral, angry, sad, question]
          example: neutral
        id:
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
          example: 748824b7-8b30-40f8-b099-46fbd1fbc739
        ownerId: {description: UUID of owner of the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.CREATED_BY,
            enabled = true)', format: uuid, example: 90ed9ad0-9364-42a5-8109-601066daf3ea}
        createdDate: {description: Date of object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time,
          example: '2025-01-03T16:21:41.594-0800'}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {description: Last user to access object, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_ACCESSED_BY,
            enabled = true)', format: uuid, example: 738630bd-a6e2-4bf1-921b-70ce51df13bf}
        lastAccessedDate: {description: Timestamp of last access of object, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_ACCESSED_DATE,
            enabled = true)', format: date-time, example: '2025-01-03T16:21:41.594-0800'}
        lastModifiedById: {description: Unique identifier for user who last modifed
            the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_BY, enabled = true)', format: uuid,
          example: 81f990ca-8e7a-467d-aad0-8ce6c5533025}
        lastModifiedDate: {description: Date of last object modification, type: string,
          x-field-extra-annotation: '    @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_DATE,
            enabled = true)', format: date-time, example: '2025-01-03T16:21:41.594-0800'}
    Principal:
      required: [email, password, username]
      type: object
      description: The Valkyr Principal. Represents a user, service, or agent in the
        system with preferences and privileges.
      properties:
        firstName:
          type: string
          description: first name of user (encrypted)
          example: Peace
          x-thorapi-dataField: fieldGroup=personal-details
          x-thorapi-secureField: true
          x-field-extra-annotation: |-
            @DataField(unique = false, hidden = false, advanced = false, relationshipTable="fieldGroup=personal-details")
            @SecureField(encryptionType = SecureField.EncryptionType.SYMMETRIC, strength = 5)
        middleName:
          type: string
          description: middle name of user
          example: Love
          x-thorapi-dataField: fieldGroup=personal-details
          x-thorapi-secureField: true
          x-field-extra-annotation: |-
            @DataField(unique = false, hidden = false, advanced = false, relationshipTable="fieldGroup=personal-details")
            @SecureField(encryptionType = SecureField.EncryptionType.SYMMETRIC, strength = 5)
        lastName: {type: string, description: last name of user (encrypted), example: Harmony,
          x-thorapi-secureField: true, x-field-extra-annotation: '@SecureField(encryptionType
            = SecureField.EncryptionType.SYMMETRIC, strength = 5)'}
        username:
          maxLength: 60
          minLength: 5
          type: string
          description: Your account user name
          example: Sparky
          x-thorapi-dataField: fieldGroup=personal-details, unique=true
          x-field-extra-annotation: |-
            @DataField(unique = false, hidden = false, advanced = false, relationshipTable="fieldGroup=personal-details, unique=true")
            @Column(length = 60)
        password: {minLength: 8, type: string, description: Your account password,
          format: password, example: HardToGuess1980, x-field-extra-annotation: '@SecureField(encryptionType
            = SecureField.EncryptionType.HASHED, strength = 10)'}
        fingerprint:
          type: string
          description: Encrypted identity (Facial Recognition, Fingerprint Scanner,
            etc.)
          readOnly: true
          example: DK$DFSJaraDD
          x-thorapi-dataField: advanced=true
          x-thorapi-secureField: true
          x-field-extra-annotation: |-
            @DataField(unique = false, hidden = false, advanced = false, relationshipTable="advanced=true")
            @SecureField(encryptionType = SecureField.EncryptionType.SYMMETRIC, strength = 5)
        federalIdentification: {pattern: '^\d{3}-\d{2}-\d{4}$', default: 333-22-4444,
          type: string, description: SSN or a 10 digit federal government ID (encrypted),
          example: 111-22-3333, x-thorapi-secureField: true, x-field-extra-annotation: '@SecureField(encryptionType
            = SecureField.EncryptionType.SYMMETRIC, strength = 5)'}
        residenceCountry:
          minLength: 3
          type: string
          description: Country of residence 3-character code
          example: USA
          x-thorapi-dataField: advanced=true
          x-thorapi-secureField: true
          x-field-extra-annotation: |-
            @DataField(unique = false, hidden = false, advanced = false, relationshipTable="advanced=true")
            @SecureField(encryptionType = SecureField.EncryptionType.SYMMETRIC, strength = 5)
        stateIdentification:
          minLength: 10
          pattern: ^\d{10}$
          type: string
          description: Driver's License or a 10 digit state government ID
          example: 3333333333
          default: 2222222222
          x-thorapi-dataField: advanced=true
          x-thorapi-secureField: true
          x-field-extra-annotation: |-
            @DataField(unique = false, hidden = false, advanced = false, relationshipTable="advanced=true")
            @SecureField(encryptionType = SecureField.EncryptionType.SYMMETRIC, strength = 5)
        residenceState:
          minLength: 2
          type: string
          description: State of residence 2-character code (USA)
          example: CA
          x-thorapi-dataField: advanced=true
          x-thorapi-secureField: true
          x-field-extra-annotation: |-
            @DataField(unique = false, hidden = false, advanced = false, relationshipTable="advanced=true")
            @SecureField(encryptionType = SecureField.EncryptionType.SYMMETRIC, strength = 5)
        email: {pattern: '^.+@[^.].*.[a-z]{2,}$', type: string, description: The main
            email address for the user (encrypted), format: email, example: wiley.coyote@acme-corp.com,
          x-thorapi-dataField: unique=true, x-field-extra-annotation: '@DataField(unique
            = false, hidden = false, advanced = false, relationshipTable="unique=true")'}
        social: {type: string, description: The username for your primary social account
            (if any), format: url, example: 'https://twitter.com/ValkyrAI', x-thorapi-secureField: true,
          x-field-extra-annotation: '@SecureField(encryptionType = SecureField.EncryptionType.SYMMETRIC,
            strength = 5)'}
        bio: {type: string, description: More in-depth information about you and your
            account, maxLength: 100000, x-field-extra-annotation: '@Column(length
            = 100000)'}
        notes: {type: string, example: Notes about this account, maxLength: 100000,
          x-field-extra-annotation: '@Column(length = 100000)'}
        avatarUrl: {type: string, description: URL for the user avatar image, format: url,
          example: 'https://img.com/mypic.png'}
        organizationId: {type: string, format: uuid}
        organization: {$ref: '#/components/schemas/Organization'}
        addresses:
          type: array
          items: {$ref: '#/components/schemas/Address'}
        acceptedCookies: {type: boolean, description: Whether the user accepted the
            use of cookies, default: false, x-thorapi-dataField: 'advanced=true, fieldGroup=signup',
          x-field-extra-annotation: '@DataField(unique = false, hidden = false, advanced
            = false, relationshipTable="advanced=true, fieldGroup=signup")'}
        acceptedTos: {type: boolean, description: Whether the user accepted the terms
            of service, default: false, x-thorapi-dataField: 'advanced=true, fieldGroup=signup',
          x-field-extra-annotation: '@DataField(unique = false, hidden = false, advanced
            = false, relationshipTable="advanced=true, fieldGroup=signup")'}
        enabled: {type: boolean, description: Spring Security User field whether the
            user is enabled, default: true, x-thorapi-dataField: 'advanced=true, fieldGroup=accountStatus',
          x-field-extra-annotation: '@DataField(unique = false, hidden = false, advanced
            = false, relationshipTable="advanced=true, fieldGroup=accountStatus")'}
        credentialNonExpired: {type: boolean, description: Spring Security User field
            whether the user's login credentials have expired, default: true, x-thorapi-dataField: 'advanced=true,
            fieldGroup=accountStatus', x-field-extra-annotation: '@DataField(unique
            = false, hidden = false, advanced = false, relationshipTable="advanced=true,
            fieldGroup=accountStatus")'}
        accountEnabled: {type: boolean, description: Spring Security User field whether
            the user account is enabled, default: true, x-thorapi-dataField: 'advanced=true,
            fieldGroup=accountStatus', x-field-extra-annotation: '@DataField(unique
            = false, hidden = false, advanced = false, relationshipTable="advanced=true,
            fieldGroup=accountStatus")'}
        accountNonLocked: {type: boolean, description: Spring Security User field
            whether the user account is locked, default: true, x-thorapi-dataField: 'advanced=true,
            fieldGroup=accountStatus', x-field-extra-annotation: '@DataField(unique
            = false, hidden = false, advanced = false, relationshipTable="advanced=true,
            fieldGroup=accountStatus")'}
        accountNonExpired: {type: boolean, description: Spring Security User field
            whether the user account has expired, default: false, x-thorapi-dataField: 'advanced=true,
            fieldGroup=accountStatus', x-field-extra-annotation: '@DataField(unique
            = false, hidden = false, advanced = false, relationshipTable="advanced=true,
            fieldGroup=accountStatus")'}
        roles:
          x-thorapi-dataField: advanced=true, fieldGroup=accountStatus
          description: the granted roles (or null if the granted authority cannot
            be expressed as a String with sufficient precision).
          type: array
          items: {$ref: '#/components/schemas/Role'}
          x-field-extra-annotation: '@DataField(unique = false, hidden = false, advanced
            = false, relationshipTable="advanced=true, fieldGroup=accountStatus")'
        authorityList:
          x-thorapi-dataField: advanced=true, fieldGroup=accountStatus
          description: the granted authorities (or null if the granted authority cannot
            be expressed as a String with sufficient precision).
          type: array
          items: {$ref: '#/components/schemas/Authority'}
          x-field-extra-annotation: '@DataField(unique = false, hidden = false, advanced
            = false, relationshipTable="advanced=true, fieldGroup=accountStatus")'
        id:
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
          example: c62b9065-3bc5-445c-88ee-efeee05f207c
        ownerId: {description: UUID of owner of the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.CREATED_BY,
            enabled = true)', format: uuid, example: ed29628e-caf1-419f-9985-f8ecc6394b1e}
        createdDate: {description: Date of object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time,
          example: '2025-01-03T16:21:41.594-0800'}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {description: Last user to access object, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_ACCESSED_BY,
            enabled = true)', format: uuid, example: 1417708a-45ad-43cd-a294-521766640255}
        lastAccessedDate: {description: Timestamp of last access of object, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_ACCESSED_DATE,
            enabled = true)', format: date-time, example: '2025-01-03T16:21:41.594-0800'}
        lastModifiedById: {description: Unique identifier for user who last modifed
            the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_BY, enabled = true)', format: uuid,
          example: b3bcecd5-3344-46c0-90c5-f1bfabee65b6}
        lastModifiedDate: {description: Date of last object modification, type: string,
          x-field-extra-annotation: '    @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_DATE,
            enabled = true)', format: date-time, example: '2025-01-03T16:21:41.594-0800'}
      xml: {name: User}
    Organization:
      required: [name]
      type: object
      description: TODO Organization CLASS DESCRIPTION
      properties:
        name: {type: string, example: ACME Corp Inc.}
        homePage: {type: string, format: url, example: 'https://www.acme-corp.com'}
        phone: {type: string, example: 415-867-5309}
        addressId: {type: string, format: uuid}
        address: {$ref: '#/components/schemas/Address'}
        id:
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
          example: 96040b16-458f-46f6-8a90-6b163b2d6e12
        ownerId: {description: UUID of owner of the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.CREATED_BY,
            enabled = true)', format: uuid, example: 07c45e12-d2e8-49ed-9e26-192e868673bc}
        createdDate: {description: Date of object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time,
          example: '2025-01-03T16:21:41.594-0800'}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {description: Last user to access object, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_ACCESSED_BY,
            enabled = true)', format: uuid, example: bbf6c89f-0f93-435f-871a-d2985bd90dbb}
        lastAccessedDate: {description: Timestamp of last access of object, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_ACCESSED_DATE,
            enabled = true)', format: date-time, example: '2025-01-03T16:21:41.594-0800'}
        lastModifiedById: {description: Unique identifier for user who last modifed
            the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_BY, enabled = true)', format: uuid,
          example: 2f3719a1-091e-47ab-89f9-9359e01e6feb}
        lastModifiedDate: {description: Date of last object modification, type: string,
          x-field-extra-annotation: '    @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_DATE,
            enabled = true)', format: date-time, example: '2025-01-03T16:21:41.594-0800'}
      xml: {name: Organization}
    Address:
      required: [city, name, state, street1, postal_code]
      type: object
      description: TODO Address CLASS DESCRIPTION
      properties:
        hasWifi: {type: boolean}
        principalId: {type: string, format: uuid}
        addressType:
          type: string
          description: The type of address
          enum: [home, mail, work, school, other]
          example: home
        name:
          type: string
          description: full name of addressee
          example: Henry Johnson
          x-thorapi-dataField: advanced=true
          x-thorapi-secureField: true
          x-field-extra-annotation: |-
            @DataField(unique = false, hidden = false, advanced = false, relationshipTable="advanced=true")
            @SecureField(encryptionType = SecureField.EncryptionType.SYMMETRIC, strength = 5)
        street1: {type: string, description: street address line 1, example: 123 Daydream
            Blvd.}
        street2: {type: string, description: street address line 2, example: Apt.
            7}
        city:
          type: string
          description: full name of city
          example: San Francisco
          x-thorapi-dataField: advanced=true
          x-thorapi-secureField: true
          x-field-extra-annotation: |-
            @DataField(unique = false, hidden = false, advanced = false, relationshipTable="advanced=true")
            @SecureField(encryptionType = SecureField.EncryptionType.SYMMETRIC, strength = 5)
        state:
          minLength: 2
          type: string
          description: State of residence 2-character code (USA)
          example: CA
          x-thorapi-dataField: advanced=true
          x-thorapi-secureField: true
          x-field-extra-annotation: |-
            @DataField(unique = false, hidden = false, advanced = false, relationshipTable="advanced=true")
            @SecureField(encryptionType = SecureField.EncryptionType.SYMMETRIC, strength = 5)
        country: {maxLength: 3, minLength: 3, example: USA, type: string, description: 3
            character country code (upper case), x-field-extra-annotation: '@Column(length
            = 3)'}
        postal_code: {maxLength: 10, minLength: 10, type: string, pattern: '^\d{5}-\d{4}$',
          description: 5+4 digit zip code, example: 94210-0000, x-field-extra-annotation: '@Column(length
            = 10)'}
        id:
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
          example: 3773d666-dea1-4d02-b430-11ca52e266a8
        ownerId: {description: UUID of owner of the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.CREATED_BY,
            enabled = true)', format: uuid, example: 5297b19d-fd2a-4007-9aef-f0b7264cd539}
        createdDate: {description: Date of object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time,
          example: '2025-01-03T16:21:41.594-0800'}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {description: Last user to access object, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_ACCESSED_BY,
            enabled = true)', format: uuid, example: ef297a29-e742-4535-82c6-6ef6211bca12}
        lastAccessedDate: {description: Timestamp of last access of object, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_ACCESSED_DATE,
            enabled = true)', format: date-time, example: '2025-01-03T16:21:41.595-0800'}
        lastModifiedById: {description: Unique identifier for user who last modifed
            the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_BY, enabled = true)', format: uuid,
          example: ba749007-a05a-4505-a434-d92c7cf9712d}
        lastModifiedDate: {description: Date of last object modification, type: string,
          x-field-extra-annotation: '    @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_DATE,
            enabled = true)', format: date-time, example: '2025-01-03T16:21:41.595-0800'}
      xml: {name: Address}
    ContentData:
      type: object
      description: TODO ContentData CLASS DESCRIPTION
      required: [name]
      properties:
        authorName: {type: string, example: Jimjam McYoyo}
        title: {type: string, example: Amazing Things Happened}
        subtitle: {type: string, example: Many detailed things about all the things
            that hapened.}
        contentUrl: {type: string, example: The url to the location of the full content,
          maxLength: 500, minLength: 8, x-field-extra-annotation: '@Column(length
            = 500)'}
        contentData: {type: string, example: The full content, maxLength: 500000,
          minLength: 1, x-field-extra-annotation: '@Column(length = 500000)'}
        contentType:
          type: string
          example: CodeGen
          enum: [plaintext, markdown, json, yaml, audio, video, url, binary]
        thumbnailImage: {type: string, description: The large image (optional) for
            your content, format: url, example: 'https://valkyrlabs.com/assets/VALKYR_LABS_INC_LOGO-BKV9JIdt.png'}
        largeImage: {type: string, description: The large image (optional) for your
            content, format: url, example: 'https://valkyrlabs.com/assets/VALKYR_LABS_INC_LOGO-BKV9JIdt.png'}
        category:
          type: string
          example: CodeGen
          enum: [CodeGen, DOCS, BLOG, Product, SECURITY, Event]
        status:
          type: string
          example: editing
          enum: [holding, editing, published]
        releaseDate: {type: string, format: date-time, description: the release date
            (used to automate publishing)}
        contentMedia:
          type: array
          description: media contained in or referenced by the content
          items: {$ref: '#/components/schemas/ContentMediaLink'}
        principalId: {description: the author or attibuted entity, type: string, format: uuid}
        principal: {description: the author object, $ref: '#/components/schemas/Principal'}
        id:
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
          example: dc734ea0-5fa6-4147-b867-fba9849ce127
        ownerId: {description: UUID of owner of the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.CREATED_BY,
            enabled = true)', format: uuid, example: bbf5fafc-2e00-4167-ad99-3abce968f129}
        createdDate: {description: Date of object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time,
          example: '2025-01-03T16:21:41.595-0800'}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {description: Last user to access object, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_ACCESSED_BY,
            enabled = true)', format: uuid, example: 9dda17f7-3dad-4e27-af12-c2fc49cf31e1}
        lastAccessedDate: {description: Timestamp of last access of object, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_ACCESSED_DATE,
            enabled = true)', format: date-time, example: '2025-01-03T16:21:41.595-0800'}
        lastModifiedById: {description: Unique identifier for user who last modifed
            the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_BY, enabled = true)', format: uuid,
          example: 12d1e1b5-56db-42ea-9c02-e21facea7544}
        lastModifiedDate: {description: Date of last object modification, type: string,
          x-field-extra-annotation: '    @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_DATE,
            enabled = true)', format: date-time, example: '2025-01-03T16:21:41.595-0800'}
      xml: {name: ContentData}
    ContentMediaLink:
      type: object
      description: link to images, videos, audio, and other content media
      required: [contentId]
      properties:
        applicationId: {type: string, format: uuid, description: used when linked
            to an Application}
        contentDataId: {type: string, format: uuid, description: used when linked
            to ContentData}
        contentUse:
          type: string
          description: specialized usage for the media object if any
          enum: [none, screenshot, selfie, portrait, promotional, informational, entertainment,
            product, support, training]
        contentType:
          type: string
          description: content type of the media object
          enum: [image, icon, video, audio, text, json, yaml, xml, markdown, spreadsheet,
            pdf]
        mediaUrl: {type: string, format: url, description: url to the media object}
        id:
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
          example: db3b4973-11f0-4789-a296-c612f0c5e4a0
        ownerId: {description: UUID of owner of the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.CREATED_BY,
            enabled = true)', format: uuid, example: 209291e8-4da1-459c-b369-03cd93b15707}
        createdDate: {description: Date of object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time,
          example: '2025-01-03T16:21:41.595-0800'}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {description: Last user to access object, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_ACCESSED_BY,
            enabled = true)', format: uuid, example: e37f321d-d34f-4516-907b-f4626e955645}
        lastAccessedDate: {description: Timestamp of last access of object, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_ACCESSED_DATE,
            enabled = true)', format: date-time, example: '2025-01-03T16:21:41.595-0800'}
        lastModifiedById: {description: Unique identifier for user who last modifed
            the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_BY, enabled = true)', format: uuid,
          example: 85b9ccff-ee11-4973-bbef-0082a6886e2e}
        lastModifiedDate: {description: Date of last object modification, type: string,
          x-field-extra-annotation: '    @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_DATE,
            enabled = true)', format: date-time, example: '2025-01-03T16:21:41.595-0800'}
    Rating:
      type: object
      description: TODO Rating CLASS DESCRIPTION
      required: [contentId]
      properties:
        targetType:
          type: string
          enum: [homepage, blog, product, none]
          description: target object for the rating and comments
        contentId: {type: string, format: uuid, description: The unique identifier
            for the content item}
        comments: {type: string, example: Your real feelings, maxLength: 100000, x-field-extra-annotation: '@Column(length
            = 100000)'}
        url: {type: string, example: The URL of the rating record is about, maxLength: 500,
          x-field-extra-annotation: '@Column(length = 500)'}
        rating: {type: integer, format: int64, minimum: 0, maximum: 10}
        id:
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
          example: 52a083a8-6282-4978-abdd-ebbf0856f613
        ownerId: {description: UUID of owner of the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.CREATED_BY,
            enabled = true)', format: uuid, example: c73f05d3-555b-466f-9d7b-fe5c76633b7d}
        createdDate: {description: Date of object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time,
          example: '2025-01-03T16:21:41.595-0800'}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {description: Last user to access object, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_ACCESSED_BY,
            enabled = true)', format: uuid, example: 09193484-6993-4617-9850-42e011231d46}
        lastAccessedDate: {description: Timestamp of last access of object, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_ACCESSED_DATE,
            enabled = true)', format: date-time, example: '2025-01-03T16:21:41.595-0800'}
        lastModifiedById: {description: Unique identifier for user who last modifed
            the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_BY, enabled = true)', format: uuid,
          example: 57a7c75b-71de-4f3a-95ad-032223b0cc6d}
        lastModifiedDate: {description: Date of last object modification, type: string,
          x-field-extra-annotation: '    @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_DATE,
            enabled = true)', format: date-time, example: '2025-01-03T16:21:41.595-0800'}
      xml: {name: Rating}
    UserPreferences:
      type: object
      description: Various System User Preferences
      properties:
        preference: {type: string, description: The value of the User Preferences,
          example: darquartz}
        preferenceType:
          type: string
          description: The type of the preference
          enum: [ux-layout, ux-mode, ux-theme, measurement]
        id:
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
          example: 42740a2f-2c17-413b-a698-2142dfecac17
        ownerId: {description: UUID of owner of the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.CREATED_BY,
            enabled = true)', format: uuid, example: 3eac2cd6-99ce-4784-b984-a61b63c98c1f}
        createdDate: {description: Date of object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time,
          example: '2025-01-03T16:21:41.595-0800'}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {description: Last user to access object, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_ACCESSED_BY,
            enabled = true)', format: uuid, example: 08b4e011-d9ea-4996-9e94-0992d2abc636}
        lastAccessedDate: {description: Timestamp of last access of object, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_ACCESSED_DATE,
            enabled = true)', format: date-time, example: '2025-01-03T16:21:41.595-0800'}
        lastModifiedById: {description: Unique identifier for user who last modifed
            the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_BY, enabled = true)', format: uuid,
          example: d0feaa45-80b8-43e5-9ae1-7a442bf50735}
        lastModifiedDate: {description: Date of last object modification, type: string,
          x-field-extra-annotation: '    @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_DATE,
            enabled = true)', format: date-time, example: '2025-01-03T16:21:41.596-0800'}
    Login:
      type: object
      description: TODO Login CLASS DESCRIPTION
      properties:
        username: {type: string, maxLength: 64, x-field-extra-annotation: '@Column(length
            = 64)'}
        password: {type: string, x-starter-secureField: true}
        description: {type: string}
        id:
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
          example: 3cb40daa-6d45-4c2b-9f50-744a51569c8c
        ownerId: {description: UUID of owner of the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.CREATED_BY,
            enabled = true)', format: uuid, example: f1d30892-3d4d-47d7-b169-556ee41de2a9}
        createdDate: {description: Date of object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time,
          example: '2025-01-03T16:21:41.596-0800'}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {description: Last user to access object, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_ACCESSED_BY,
            enabled = true)', format: uuid, example: 85d6f022-8a45-4cda-bcf8-df73fd27015d}
        lastAccessedDate: {description: Timestamp of last access of object, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_ACCESSED_DATE,
            enabled = true)', format: date-time, example: '2025-01-03T16:21:41.596-0800'}
        lastModifiedById: {description: Unique identifier for user who last modifed
            the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_BY, enabled = true)', format: uuid,
          example: 310674e0-b7b1-4e08-aaf6-c535400d281f}
        lastModifiedDate: {description: Date of last object modification, type: string,
          x-field-extra-annotation: '    @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_DATE,
            enabled = true)', format: date-time, example: '2025-01-03T16:21:41.596-0800'}
    Logout:
      type: object
      description: Logout functionality
      properties:
        description: {type: string}
        id:
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
          example: 8ec508fe-99a6-4a98-b47e-e28d057b6284
        ownerId: {description: UUID of owner of the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.CREATED_BY,
            enabled = true)', format: uuid, example: 29cfd419-c81a-47ae-8600-79ac5d8cc6c7}
        createdDate: {description: Date of object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time,
          example: '2025-01-03T16:21:41.596-0800'}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {description: Last user to access object, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_ACCESSED_BY,
            enabled = true)', format: uuid, example: 93850cc7-673e-48ea-a594-385bde8e9fca}
        lastAccessedDate: {description: Timestamp of last access of object, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_ACCESSED_DATE,
            enabled = true)', format: date-time, example: '2025-01-03T16:21:41.596-0800'}
        lastModifiedById: {description: Unique identifier for user who last modifed
            the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_BY, enabled = true)', format: uuid,
          example: 60418982-a1ea-4832-8848-d37adf120363}
        lastModifiedDate: {description: Date of last object modification, type: string,
          x-field-extra-annotation: '    @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_DATE,
            enabled = true)', format: date-time, example: '2025-01-03T16:21:41.596-0800'}
    PersistentLogin:
      type: object
      description: Persistent Login for Spring Security
      properties:
        username: {type: string, maxLength: 64, x-field-extra-annotation: '@Column(length
            = 64)'}
        series: {type: string, maxLength: 64, x-field-extra-annotation: '@Column(length
            = 64)'}
        token: {type: string, maxLength: 64, x-field-extra-annotation: '@Column(length
            = 64)'}
        lastUsed: {type: string, format: date-time}
        id:
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
          example: e316b560-cfde-4342-a7bd-d63d1384c8b7
        ownerId: {description: UUID of owner of the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.CREATED_BY,
            enabled = true)', format: uuid, example: 9daa89b5-0be7-4c22-9191-686721812c87}
        createdDate: {description: Date of object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time,
          example: '2025-01-03T16:21:41.596-0800'}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {description: Last user to access object, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_ACCESSED_BY,
            enabled = true)', format: uuid, example: 43aade25-538d-4c0b-a6da-63737bfc6b7a}
        lastAccessedDate: {description: Timestamp of last access of object, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_ACCESSED_DATE,
            enabled = true)', format: date-time, example: '2025-01-03T16:21:41.596-0800'}
        lastModifiedById: {description: Unique identifier for user who last modifed
            the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_BY, enabled = true)', format: uuid,
          example: f82a7b82-ac2a-4f4b-a01e-1c02ab5eaf71}
        lastModifiedDate: {description: Date of last object modification, type: string,
          x-field-extra-annotation: '    @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_DATE,
            enabled = true)', format: date-time, example: '2025-01-03T16:21:41.596-0800'}
      required: [username, series, token, last_used]
    Role:
      type: object
      description: A Role for a Principal in the system
      properties:
        principalId: {type: string, format: uuid}
        roleName:
          type: string
          description: the role
          enum: [ANONYMOUS, USER, STAFF, ADMIN]
          x-enum-descriptions: [Anonymous User, Authenticated User, Staff Role, Admin
              Role]
          x-enum-varnames: [ROLE_ANONYMOUS, ROLE_USER, ROLE_STAFF, ROLE_ADMIN]
          default: ANONYMOUS
        id:
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
          example: 5b7c95bb-95c1-4cf9-86ca-c7d5f1d0a3b8
        ownerId: {description: UUID of owner of the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.CREATED_BY,
            enabled = true)', format: uuid, example: 77d060ed-e686-4102-8a69-937a7e385efb}
        createdDate: {description: Date of object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time,
          example: '2025-01-03T16:21:41.596-0800'}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {description: Last user to access object, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_ACCESSED_BY,
            enabled = true)', format: uuid, example: e9b571b9-7603-4eba-822e-aa0005aff37a}
        lastAccessedDate: {description: Timestamp of last access of object, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_ACCESSED_DATE,
            enabled = true)', format: date-time, example: '2025-01-03T16:21:41.596-0800'}
        lastModifiedById: {description: Unique identifier for user who last modifed
            the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_BY, enabled = true)', format: uuid,
          example: cd99207c-073f-46f6-94f1-a9419d67befa}
        lastModifiedDate: {description: Date of last object modification, type: string,
          x-field-extra-annotation: '    @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_DATE,
            enabled = true)', format: date-time, example: '2025-01-03T16:21:41.596-0800'}
    Authority:
      type: object
      description: TODO Authority CLASS DESCRIPTION
      properties:
        principalId: {type: string, format: uuid}
        username: {type: string, maxLength: 50, x-field-extra-annotation: '@Column(length
            = 50)'}
        authority: {type: string, maxLength: 50, x-field-extra-annotation: '@Column(length
            = 50)'}
        id:
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
          example: 7741596e-c29d-41fd-94eb-08ac186bf3bc
        ownerId: {description: UUID of owner of the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.CREATED_BY,
            enabled = true)', format: uuid, example: 0e05e4d9-5c2e-40ac-b92d-3166daf592c4}
        createdDate: {description: Date of object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time,
          example: '2025-01-03T16:21:41.596-0800'}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {description: Last user to access object, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_ACCESSED_BY,
            enabled = true)', format: uuid, example: 65f9c26b-a776-453f-9d13-e3f8abfdc615}
        lastAccessedDate: {description: Timestamp of last access of object, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_ACCESSED_DATE,
            enabled = true)', format: date-time, example: '2025-01-03T16:21:41.596-0800'}
        lastModifiedById: {description: Unique identifier for user who last modifed
            the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_BY, enabled = true)', format: uuid,
          example: 2d209bfb-1703-42f6-a2e2-c44c3be2f163}
        lastModifiedDate: {description: Date of last object modification, type: string,
          x-field-extra-annotation: '    @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_DATE,
            enabled = true)', format: date-time, example: '2025-01-03T16:21:41.596-0800'}
      required: [username, authority]
    AclSid:
      type: object
      description: System ID of the ACL
      properties:
        sid: {type: string, maxLength: 245, nullable: true, x-field-extra-annotation: '@Column(length
            = 245)'}
        principal: {type: string, format: uuid, nullable: true}
        id:
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
          example: 04cd1d00-b4c5-49ec-8a58-a00c57c019e0
        ownerId: {description: UUID of owner of the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.CREATED_BY,
            enabled = true)', format: uuid, example: aecace96-9b51-45cd-9abd-271b9efaccf0}
        createdDate: {description: Date of object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time,
          example: '2025-01-03T16:21:41.597-0800'}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {description: Last user to access object, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_ACCESSED_BY,
            enabled = true)', format: uuid, example: 1e8b2125-23a7-4d15-b2f6-f8634de97252}
        lastAccessedDate: {description: Timestamp of last access of object, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_ACCESSED_DATE,
            enabled = true)', format: date-time, example: '2025-01-03T16:21:41.597-0800'}
        lastModifiedById: {description: Unique identifier for user who last modifed
            the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_BY, enabled = true)', format: uuid,
          example: 76ab4be8-d99f-42ee-a161-bd0275f4695b}
        lastModifiedDate: {description: Date of last object modification, type: string,
          x-field-extra-annotation: '    @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_DATE,
            enabled = true)', format: date-time, example: '2025-01-03T16:21:41.597-0800'}
    AclClass:
      type: object
      description: Problematic class for ACL
      properties:
        className: {type: string, maxLength: 245, nullable: true, x-field-extra-annotation: '@Column(length
            = 245)'}
        id:
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
          example: 59bf3752-c3f6-4167-958f-f047c3508b12
        ownerId: {description: UUID of owner of the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.CREATED_BY,
            enabled = true)', format: uuid, example: 2a296b96-4099-4bf6-a2be-71d961a76017}
        createdDate: {description: Date of object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time,
          example: '2025-01-03T16:21:41.597-0800'}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {description: Last user to access object, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_ACCESSED_BY,
            enabled = true)', format: uuid, example: b8e2a2b6-1cb5-4455-90bb-660d79949890}
        lastAccessedDate: {description: Timestamp of last access of object, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_ACCESSED_DATE,
            enabled = true)', format: date-time, example: '2025-01-03T16:21:41.597-0800'}
        lastModifiedById: {description: Unique identifier for user who last modifed
            the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_BY, enabled = true)', format: uuid,
          example: 68f883a1-fcc4-45ca-9991-7e82f8b0371c}
        lastModifiedDate: {description: Date of last object modification, type: string,
          x-field-extra-annotation: '    @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_DATE,
            enabled = true)', format: date-time, example: '2025-01-03T16:21:41.597-0800'}
    AclObjectIdentity:
      type: object
      description: ACL identity for an object
      properties:
        objectIdClass: {type: string, format: uuid, nullable: true}
        objectIdIdentity: {type: string, format: uuid, nullable: true}
        parentObject: {type: string, format: uuid, nullable: true}
        ownerSid: {type: string, format: uuid, nullable: true}
        entriesInheriting: {type: integer, format: int32, nullable: true}
        id:
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
          example: d5156291-8bfd-48e1-86c4-b7410caa1e21
        ownerId: {description: UUID of owner of the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.CREATED_BY,
            enabled = true)', format: uuid, example: b2df36b1-1ae5-4dac-b1d7-f9972a5ad5be}
        createdDate: {description: Date of object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time,
          example: '2025-01-03T16:21:41.597-0800'}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {description: Last user to access object, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_ACCESSED_BY,
            enabled = true)', format: uuid, example: 32414f52-7019-4948-b5d0-f2843057c5bf}
        lastAccessedDate: {description: Timestamp of last access of object, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_ACCESSED_DATE,
            enabled = true)', format: date-time, example: '2025-01-03T16:21:41.597-0800'}
        lastModifiedById: {description: Unique identifier for user who last modifed
            the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_BY, enabled = true)', format: uuid,
          example: 916157d1-7695-431e-b37e-32321c646272}
        lastModifiedDate: {description: Date of last object modification, type: string,
          x-field-extra-annotation: '    @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_DATE,
            enabled = true)', format: date-time, example: '2025-01-03T16:21:41.597-0800'}
    AclEntry:
      type: object
      description: TODO AclEntry CLASS DESCRIPTION
      properties:
        aclObjectOdentity: {type: string, format: uuid, nullable: true}
        aceOrder: {type: integer, format: int32, nullable: true}
        sid: {type: string, format: uuid, nullable: true}
        mask: {type: integer, format: int32, nullable: true}
        granting: {type: integer, format: int32, nullable: true}
        auditSuccess: {type: integer, format: int32, nullable: true}
        auditFailure: {type: integer, format: int32, nullable: true}
        id:
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
          example: 7413f82e-9a3a-4d5d-8d2e-916e8afbe8ff
        ownerId: {description: UUID of owner of the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.CREATED_BY,
            enabled = true)', format: uuid, example: 2c1fed55-df40-4850-b97f-48867b50b339}
        createdDate: {description: Date of object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time,
          example: '2025-01-03T16:21:41.597-0800'}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {description: Last user to access object, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_ACCESSED_BY,
            enabled = true)', format: uuid, example: bc414fd8-a228-441a-b606-edd49cc0bbef}
        lastAccessedDate: {description: Timestamp of last access of object, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_ACCESSED_DATE,
            enabled = true)', format: date-time, example: '2025-01-03T16:21:41.597-0800'}
        lastModifiedById: {description: Unique identifier for user who last modifed
            the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_BY, enabled = true)', format: uuid,
          example: 53283013-1c3d-4728-8d1f-0aef4f0089a9}
        lastModifiedDate: {description: Date of last object modification, type: string,
          x-field-extra-annotation: '    @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_DATE,
            enabled = true)', format: date-time, example: '2025-01-03T16:21:41.597-0800'}
    IntegrationAccount:
      type: object
      description: An integration account to authenticate workflows with various systems
      properties:
        execModuleId: {type: string, format: uuid}
        accountName: {type: string, description: account name, example: 'STRIPE, Shopify,
            Gmail, X.com'}
        username: {type: string, description: account username, example: 'STRIPE,
            Shopify, Gmail, X.com'}
        password: {type: string, description: account password - encrypted, x-starter-secureField: true}
        accountId: {type: string, x-starter-secureField: true}
        status:
          type: string
          description: Integration Connection Status
          enum: [ready, closed, executed, error]
        verified: {type: boolean, default: false}
        id:
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
          example: 3aab3b9d-9abd-404d-9967-4be5b2e7f257
        ownerId: {description: UUID of owner of the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.CREATED_BY,
            enabled = true)', format: uuid, example: 643f7177-ba27-4840-b985-e81832ac9490}
        createdDate: {description: Date of object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time,
          example: '2025-01-03T16:21:41.597-0800'}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {description: Last user to access object, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_ACCESSED_BY,
            enabled = true)', format: uuid, example: beca4524-9242-42f6-a802-37ec0ec8cf30}
        lastAccessedDate: {description: Timestamp of last access of object, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_ACCESSED_DATE,
            enabled = true)', format: date-time, example: '2025-01-03T16:21:41.597-0800'}
        lastModifiedById: {description: Unique identifier for user who last modifed
            the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_BY, enabled = true)', format: uuid,
          example: e92be91c-82d3-47d6-866a-287ca082f091}
        lastModifiedDate: {description: Date of last object modification, type: string,
          x-field-extra-annotation: '    @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_DATE,
            enabled = true)', format: date-time, example: '2025-01-03T16:21:41.597-0800'}
      xml: {name: Account}
    Customer:
      description: Represents a customer entity for CRM.
      properties:
        customerId: {type: string, format: uuid, description: Associated customer
            Principal ID.}
        customer: {$ref: '#/components/schemas/Principal'}
        status:
          type: string
          enum: [active, inactive, prospect]
          description: Status of the customer.
        role:
          type: string
          enum: [ceo, management, procurement, technical]
          description: Role of the contact person within the customer account (e.g.,
            CEO, Procurement, Technical Lead).
        id:
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
          example: c0baba1c-adeb-46d9-a3bf-9abd77b96ee2
        ownerId: {description: UUID of owner of the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.CREATED_BY,
            enabled = true)', format: uuid, example: aabd4bac-f0b3-428d-a94c-2bcb1ccab417}
        createdDate: {description: Date of object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time,
          example: '2025-01-03T16:21:41.597-0800'}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {description: Last user to access object, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_ACCESSED_BY,
            enabled = true)', format: uuid, example: 09309af7-d8d4-424d-91d4-98fb2fe1331c}
        lastAccessedDate: {description: Timestamp of last access of object, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_ACCESSED_DATE,
            enabled = true)', format: date-time, example: '2025-01-03T16:21:41.598-0800'}
        lastModifiedById: {description: Unique identifier for user who last modifed
            the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_BY, enabled = true)', format: uuid,
          example: fb86dcdc-dd42-4699-99e0-817962f03fe7}
        lastModifiedDate: {description: Date of last object modification, type: string,
          x-field-extra-annotation: '    @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_DATE,
            enabled = true)', format: date-time, example: '2025-01-03T16:21:41.598-0800'}
      required: [customerId]
    Opportunity:
      type: object
      description: Represents a sales opportunity related to a customer.
      properties:
        customerId: {type: string, format: uuid, description: The customer associated
            with the opportunity.}
        customer: {$ref: '#/components/schemas/Customer'}
        description: {type: string, description: Description of the opportunity.}
        totalValue: {type: number, format: double, description: Expected total value
            of the opportunity.}
        currentStatus:
          type: string
          enum: [won, open, lost, inactive, revive, legal, blocked]
          description: Status of the opportunity.
        estimatedCloseDate: {type: string, format: date-time, description: Estimated
            closing date for the opportunity.}
        id:
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
          example: 6393da08-9aeb-4a76-bafe-10bd0e4e6f8a
        ownerId: {description: UUID of owner of the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.CREATED_BY,
            enabled = true)', format: uuid, example: e315ba20-0dd2-41b1-a12a-f9d29e3ca284}
        createdDate: {description: Date of object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time,
          example: '2025-01-03T16:21:41.598-0800'}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {description: Last user to access object, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_ACCESSED_BY,
            enabled = true)', format: uuid, example: 5f4e99ba-e96c-4457-8a25-dd4512bb102d}
        lastAccessedDate: {description: Timestamp of last access of object, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_ACCESSED_DATE,
            enabled = true)', format: date-time, example: '2025-01-03T16:21:41.598-0800'}
        lastModifiedById: {description: Unique identifier for user who last modifed
            the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_BY, enabled = true)', format: uuid,
          example: ce1bf6de-cdbb-4c9d-86b2-6360c734f651}
        lastModifiedDate: {description: Date of last object modification, type: string,
          x-field-extra-annotation: '    @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_DATE,
            enabled = true)', format: date-time, example: '2025-01-03T16:21:41.598-0800'}
      required: [customerId, description, status]
    SalesActivity:
      type: object
      description: Represents a sales activity or engagement related to an opportunity.
      properties:
        opportunityId: {type: string, format: uuid, description: The associated opportunity.}
        type:
          type: string
          enum: [call, meeting, email, follow-up]
          description: Type of the sales activity.
        details: {type: string, description: Details about the activity.}
        activityDate: {type: string, format: date-time, description: Date and time
            of the activity.}
        performedBy: {type: string, format: uuid, description: The user who performed
            the activity.}
        id:
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
          example: d1291c3e-0260-4bc5-92e9-8931b67fc35a
        ownerId: {description: UUID of owner of the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.CREATED_BY,
            enabled = true)', format: uuid, example: 2b9f9be4-683a-4113-ac6d-7067d94037bc}
        createdDate: {description: Date of object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time,
          example: '2025-01-03T16:21:41.598-0800'}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {description: Last user to access object, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_ACCESSED_BY,
            enabled = true)', format: uuid, example: bba43247-148c-44b5-b60e-3eca205c491d}
        lastAccessedDate: {description: Timestamp of last access of object, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_ACCESSED_DATE,
            enabled = true)', format: date-time, example: '2025-01-03T16:21:41.598-0800'}
        lastModifiedById: {description: Unique identifier for user who last modifed
            the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_BY, enabled = true)', format: uuid,
          example: 5600d31a-f57e-499f-8454-20c54f0eba79}
        lastModifiedDate: {description: Date of last object modification, type: string,
          x-field-extra-annotation: '    @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_DATE,
            enabled = true)', format: date-time, example: '2025-01-03T16:21:41.598-0800'}
      required: [opportunityId, type, activityDate, performedBy]
    SalesPipeline:
      type: object
      description: Represents the stages in a sales pipeline.
      properties:
        name:
          type: string
          enum: [lead, qualification, proposal, negotiation, closed]
          description: Name of the sales stage (e.g., Lead, Qualification, Proposal,
            Negotiation, Closed).
        sequenceOrder: {type: integer, description: The order in which the stages
            are followed in the sales process.}
        id:
          description: Unique identifier for object in the system
          type: string
          x-field-extra-annotation: "@Id  \n        @GeneratedValue(generator = \"\
            UUID\")\n"
          format: uuid
          example: a067c6de-22da-4587-ba54-6d1e9eea4203
        ownerId: {description: UUID of owner of the object in the system, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.CREATED_BY,
            enabled = true)', format: uuid, example: 51c5dc16-88fc-4853-a202-ecb6872e6b35}
        createdDate: {description: Date of object creation, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.CREATED_DATE, enabled = true)', format: date-time,
          example: '2025-01-03T16:21:41.598-0800'}
        keyHash: {description: 'Data, including hash of the key(s) used to encrypt
            this record.', type: string}
        lastAccessedById: {description: Last user to access object, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_ACCESSED_BY,
            enabled = true)', format: uuid, example: becf9b99-c3d8-445f-8665-fcb60f5e4092}
        lastAccessedDate: {description: Timestamp of last access of object, type: string,
          x-field-extra-annotation: '        @AuditingField(fieldType = AuditingField.FieldType.LAST_ACCESSED_DATE,
            enabled = true)', format: date-time, example: '2025-01-03T16:21:41.598-0800'}
        lastModifiedById: {description: Unique identifier for user who last modifed
            the object in the system, type: string, x-field-extra-annotation: '        @AuditingField(fieldType
            = AuditingField.FieldType.LAST_MODIFIED_BY, enabled = true)', format: uuid,
          example: 89c07579-0151-457a-ad75-562dfe817488}
        lastModifiedDate: {description: Date of last object modification, type: string,
          x-field-extra-annotation: '    @AuditingField(fieldType = AuditingField.FieldType.LAST_MODIFIED_DATE,
            enabled = true)', format: date-time, example: '2025-01-03T16:21:41.598-0800'}
      required: [name, order]
  securitySchemes:
    thorapi_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://{username}.valkyrlabs.com:{port}/oauth
          scopes: {'write:items': modify owned items, 'read:items': read owned items}
