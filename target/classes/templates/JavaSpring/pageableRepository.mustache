package {{apiPackage}};

import {{modelPackage}}.{{classname}};

import {{javaxPackage}}.validation.constraints.*;
import {{javaxPackage}}.validation.Valid;
import java.io.Serializable;
import java.time.OffsetDateTime;
import java.util.UUID;
import java.util.List;
import org.springframework.data.repository.PagingAndSortingRepository;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Example;

{{#imports}}
import {{import}};
{{/imports}}
/** 
    ThorAPI/Spring Data Methods

    AUTO IMPLEMENTED by Spring as bean: {{classname}}Repository
    
    CRUD is Create, Read, Update, Delete
*/
public interface {{classname}}PageableRepository extends Serializable, PagingAndSortingRepository<{{classname}}, UUID> {

    // ThorAPI Generated search methods for each property on {{classname}}
    {{#models}}
{{#model}}
{{#allVars}}
    /** Find a {{classname}} by {{name}} with pagination
        {{name}} ** | {{#isEnum}}[**{{datatypeWithEnum}}**](#{{datatypeWithEnum}}){{/isEnum}}{{^isEnum}}{{#isContainer}}{{#isArray}}{{#items}}{{#isModel}}[{{/isModel}}{{/items}}**{{baseType}}{{#items}}<{{dataType}}>**{{#isModel}}]({{^baseType}}{{dataType}}{{/baseType}}{{baseType}}.md){{/isModel}}{{/items}}{{/isArray}}{{#isMap}}{{#items}}{{#isModel}}[{{/isModel}}**Map&lt;String, {{dataType}}&gt;**{{#isModel}}]({{^baseType}}{{dataType}}{{/baseType}}{{baseType}}.md){{/isModel}}{{/items}}{{/isMap}}{{/isContainer}}{{^isContainer}}{{#isModel}}[{{/isModel}}**{{dataType}}**{{#isModel}}]({{^baseType}}{{dataType}}{{/baseType}}{{baseType}}.md){{/isModel}}{{/isContainer}}{{/isEnum}} | {{description}} | {{^required}} [optional]{{/required}}{{#isReadOnly}} [readonly]{{/isReadOnly}}
        * @param {{name}} {{datatypeWithEnum}} {{description}} {{#isNullable}}(nullable){{/isNullable}}
        * @param pageable pagination configuration
        * @return Page<{{#lambda.titlecase}}{{classname}}{{/lambda.titlecase}}>
    */
    public Page<{{#lambda.titlecase}}{{classname}}{{/lambda.titlecase}}> findBy{{#lambda.pascalcase}}{{name}}{{/lambda.pascalcase}}({{#isEnum}}{{classname}}.{{datatypeWithEnum}}{{/isEnum}}{{^isEnum}}{{{dataType}}}{{/isEnum}} {{name}}, Pageable pageable);
{{/allVars}}

{{/model}}
{{/models}}

    /** 
     * Find all instances of {{classname}} as a list.
     * 
     * Retrieves all entities without pagination.
     * 
     * @return List of {{classname}} instances
     */
    List<{{classname}}> findAll();

    /** 
     * Find all instances of {{classname}} with pagination.
     * 
     * Retrieves all entities in a paginated format.
     * 
     * @param pageable the pagination configuration
     * @return Page of {{classname}} instances
     */
    Page<{{classname}}> findAll(Pageable pageable);

    /** 
     * Find all instances of AclEntry with pagination.
     * 
     * Retrieves all entities in a paginated format.
     * 
     * @param eample an example object to use for search
     * @param pageable the pagination configuration
     * @return Page of AclEntry instances
     */
    Page<{{classname}}> findAll(Example<{{classname}}> example, Pageable pageable);

    // end search methods
}
