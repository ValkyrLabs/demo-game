package {{package}};


import {{modelPackage}}.{{baseName}}Service;

// ValkyrLabs Section

import com.valkyrlabs.valkyrai.audit.AuditingField;
import com.valkyrlabs.valkyrai.audit.AuditedClass;
import com.valkyrlabs.valkyrai.service.SecureField;
// End ValkyrLabs Section

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.access.prepost.PostFilter;
import org.springframework.stereotype.Controller;
import org.springframework.web.context.request.NativeWebRequest;

// End ThorAPI Section

{{#imports}}
import {{import}};
{{/imports}}
{{#useResponseEntity}}
import org.springframework.http.ResponseEntity;
{{/useResponseEntity}}
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
{{#reactive}}
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import org.springframework.http.codec.multipart.Part;
{{/reactive}}
import org.springframework.beans.factory.annotation.Autowired;
{{#useBeanValidation}}
import {{javaxPackage}}.validation.constraints.*;
import {{javaxPackage}}.validation.Valid;
{{/useBeanValidation}}
import java.util.List;
import java.util.Map;
import java.util.Optional;
{{#async}}
import java.util.concurrent.CompletableFuture;
{{/async}}

// import {{javaxPackage}}.annotation.Generated;
import org.springframework.stereotype.Controller;

{{#operations}}
/**
* A delegate to be called by the {@link {{classname}}Controller}}.
* Implement this interface with a {@link org.springframework.stereotype.Service} annotated class.
*/
@Controller
// {{>generatedAnnotation}}
public class {{classname}}Delegate {

    protected static final Logger	logger	= LoggerFactory.getLogger({{classname}}Delegate.class);

    @Autowired
    private {{baseName}}Service {{#lambda.camelcase}}{{baseName}}{{/lambda.camelcase}}Service;

    public Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    {{#operation}}
        /**
        * {{httpMethod}} {{{path}}}{{#summary}} : {{.}}{{/summary}}
    {{#notes}}
            * {{.}}
    {{/notes}}
        *
    {{#allParams}}
            * @param {{paramName}} {{description}}{{#required}} (required){{/required}}{{^required}} (optional{{#defaultValue}}, default to {{.}}{{/defaultValue}}){{/required}}
    {{/allParams}}
        * @return {{#responses}}{{message}} (status code {{code}}){{^-last}}
            *         or {{/-last}}{{/responses}}
    {{#isDeprecated}}
            * @deprecated
    {{/isDeprecated}}
    {{#externalDocs}}
            * {{description}}
            * @see <a href="{{url}}">{{summary}} Documentation</a>
    {{/externalDocs}}
        * @see {{classname}}#{{operationId}}
        */
    {{#isDeprecated}}
            @Deprecated
{{/isDeprecated}}

    // THORApi Permissions
    {{#hasParams}}
        {{#hasBodyParam}}
            {{#hasPathParams}}
    // ThorAPI UPDATE
    //@PreAuthorize("hasPermission(#id, 'update')")
    
            {{/hasPathParams}}
            {{^hasPathParams}}
    // ThorAPI CREATE
    //@PreAuthorize("hasPermission(#id, 'insert')")
            {{/hasPathParams}}
        {{/hasBodyParam}}
            {{#examples}}
        {{^hasBodyParam}}
            {{#hasPathParams}}
    // ThorAPI GET
    //@PreAuthorize("hasPermission(#id, 'read')")
            {{/hasPathParams}}
        {{/hasBodyParam}}
    {{/examples}}

    {{^examples}}
        {{#hasPathParams}}
    // ThorAPI DELETE
    //@PreAuthorize("hasPermission(#id, 'delete')")
        {{/hasPathParams}}
    {{/examples}}



    {{/hasParams}}
    {{^hasParams}}
    // ThorAPI LIST
    // @PostFilter("hasPermission(filterObject, 'READ')")
    {{/hasParams}}
    public {{>responseType}} {{operationId}}({{#allParams}}{{^isFile}}{{^isBodyParam}}{{>optionalDataType}}{{/isBodyParam}}{{#isBodyParam}}{{^reactive}}{{>optionalDataType}}{{/reactive}}{{#reactive}}{{^isArray}}Mono<{{{dataType}}}>{{/isArray}}{{#isArray}}Flux<{{{baseType}}}>{{/isArray}}{{/reactive}}{{/isBodyParam}}{{/isFile}}{{#isFile}}{{#isArray}}List<{{/isArray}}{{#reactive}}Flux<Part>{{/reactive}}{{^reactive}}MultipartFile{{/reactive}}{{#isArray}}>{{/isArray}}{{/isFile}} {{paramName}}{{^-last}},
    {{/-last}}{{/allParams}}{{#reactive}}{{#hasParams}},
    {{/hasParams}}ServerWebExchange exchange{{/reactive}}{{#vendorExtensions.x-spring-paginated}}{{#hasParams}}, {{/hasParams}}{{^hasParams}}{{#reactive}}, {{/reactive}}{{/hasParams}}final Pageable pageable{{/vendorExtensions.x-spring-paginated}}){{#unhandledException}} throws Exception{{/unhandledException}}{{^jdk8-default-interface}};{{/jdk8-default-interface}}{{#jdk8-default-interface}} {
    {{>methodBody}}
    }{{/jdk8-default-interface}}
    {{/operation}}
    }
{{/operations}}
