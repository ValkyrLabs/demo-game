package {{package}};

import {{apiPackage}}.*;
import java.util.Optional;
import java.util.List;
import java.util.UUID;
import {{javaxPackage}}.validation.constraints.*;
import {{javaxPackage}}.validation.Valid;
{{#imports}}import {{import}};
{{/imports}}

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Example;

import org.springframework.transaction.annotation.Transactional;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;


/** 
*
*  ThorAPI Service Methods
*
*/
@Service
// @Transactional(readOnly = false)
public class {{classname}}Service {

    @Autowired
    private {{classname}}Repository {{#lambda.lowercase}}{{classname}}{{/lambda.lowercase}}Repository;

    @Autowired
    private {{classname}}PageableRepository {{#lambda.lowercase}}{{classname}}{{/lambda.lowercase}}PageableRepositoryRepository;

    /** 
     * Find all instances of {{classname}} with pagination.
     * 
     * Retrieves all entities in a paginated format.
     * 
     * @param pageable the pagination configuration
     * @return Page of {{classname}} instances
     */
    public Page<{{classname}}> findAll(Pageable pageable){
        return {{#lambda.lowercase}}{{classname}}{{/lambda.lowercase}}PageableRepositoryRepository.findAll(pageable);
    }

    /** 
     * Find all instances of AclEntry with pagination.
     * 
     * Retrieves all entities in a paginated format.
     * 
     * @param eample an example object to use for search
     * @param pageable the pagination configuration
     * @return Page of AclEntry instances
     */
    public Page<{{classname}}> findAll(Example<{{classname}}> example, Pageable pageable){
        return {{#lambda.lowercase}}{{classname}}{{/lambda.lowercase}}PageableRepositoryRepository.findAll(example, pageable);
    }


    public {{classname}}Repository getRepository(){
        return {{#lambda.lowercase}}{{classname}}{{/lambda.lowercase}}Repository;
    }

    // Create or Update a {{classname}}
    public {{classname}} saveOrUpdate({{classname}} {{#lambda.lowercase}}{{classname}}{{/lambda.lowercase}}) {
        return {{#lambda.lowercase}}{{classname}}{{/lambda.lowercase}}Repository.save( {{#lambda.lowercase}}{{classname}}{{/lambda.lowercase}} ); // This method handles both creation and update
        // {{#lambda.lowercase}}{{classname}}{{/lambda.lowercase}}Repository.flush();
        // return ret;
    }

    // Find a {{classname}} by ID
    public Optional<{{#lambda.titlecase}}{{classname}}{{/lambda.titlecase}}>  findById(UUID id) {
        return {{#lambda.lowercase}}{{classname}}{{/lambda.lowercase}}Repository.findById(id);
    }

    // Find all {{classname}}s
    public Iterable<{{#lambda.titlecase}}{{classname}}{{/lambda.titlecase}}> findAll() {
        return {{#lambda.lowercase}}{{classname}}{{/lambda.lowercase}}Repository.findAll();
    }

    
{{#models}}
{{#model}}
{{#allVars}}
    /** Find a {{classname}} by {{name}} 
        
        * @param {{name}} {{#isEnum}} {{datatypeWithEnum}}  {{datatypeWithEnum}}){{/isEnum}}{{^isEnum}}{{#isContainer}}{{#isArray}}{{#items}}{{#isModel}}[{{/isModel}}{{/items}} {{baseType}}{{#items}} <{{dataType}}> {{#isModel}}]({{^baseType}}{{dataType}}{{/baseType}}{{baseType}}){{/isModel}}{{/items}}{{/isArray}}{{#isMap}}{{#items}}{{#isModel}}[{{/isModel}}Map<String, {{dataType}}>{{#isModel}}]({{^baseType}}{{dataType}}{{/baseType}}{{baseType}}){{/isModel}}{{/items}}{{/isMap}}{{/isContainer}}{{^isContainer}}{{#isModel}}[{{/isModel}}{{dataType}}{{#isModel}}]({{^baseType}}{{dataType}}{{/baseType}}{{baseType}}.md){{/isModel}}{{/isContainer}}{{/isEnum}} {{description}}{{^required}} [optional]{{/required}}{{#isReadOnly}} [readonly]{{/isReadOnly}}
        * @return List<{{#lambda.titlecase}}{{classname}}{{/lambda.titlecase}}>
    */

    public List<{{#lambda.titlecase}}{{classname}}{{/lambda.titlecase}}>  find{{#lambda.titlecase}}{{classname}}{{/lambda.titlecase}}By{{#lambda.pascalcase}}{{name}}{{/lambda.pascalcase}}( {{#isEnum}}{{classname}}.{{datatypeWithEnum}}{{/isEnum}}{{^isEnum}} {{>nullableDataTypeBeanValidation}} {{/isEnum}} {{name}}){
        return {{#lambda.lowercase}}{{classname}}{{/lambda.lowercase}}Repository.find{{classname}}By{{#lambda.pascalcase}}{{name}}{{/lambda.pascalcase}}( {{#isNullable}} {{name}} {{/isNullable}}{{^isNullable}}{{name}} {{/isNullable}} );
    }
{{/allVars}}
{{/model}}
{{/models}}

    // Delete a {{classname}} by ID
    public void deleteById(UUID id) {
        {{#lambda.lowercase}}{{classname}}{{/lambda.lowercase}}Repository.deleteById(id);
    }
}
