
/**
############################## DO NOT EDIT: GENERATED FILE ##############################

Generated by Valkyr Labs ThorAPI: https://valkyrlabs.com

Powered by Swagger Codegen: http://swagger.io

Generator version: ({{{generatorVersion}}})

Template file: typescript-redux-query/store.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################

Description: {{#description}}{{.}}{{/description}}{{^description}}{{classname}}{{/description}}
*/

import { Middleware, combineReducers, configureStore } from "@reduxjs/toolkit";
import { exists, mapValues } from '../src/runtime';

// IMPORTant
{{#apiInfo}}
{{#apis}}
{{#operations}}
import { {{baseName}}Service } from './services/{{baseName}}Service';
{{/operations}}
{{/apis}}
{{/apiInfo}}

export const getQueries = (state) => state.queries;
export const getEntities = (state) => state.entities;

const reducer = combineReducers({
  {{#apiInfo}}
{{#apis}}
{{#operations}}
  [{{baseName}}Service.reducerPath]: {{baseName}}Service.reducer,
  {{/operations}}
{{/apis}}
{{/apiInfo}}
});

export const store = configureStore({
  reducer,
  middleware: (getDefaultMiddleware) =>
    getDefaultMiddleware()
    {{#apiInfo}}
{{#apis}}
{{#operations}}
    .concat({{baseName}}Service.middleware as Middleware)
  {{/operations}}
{{/apis}}
{{/apiInfo}}
});

// see `setupListeners` docs - takes an optional callback as the 2nd arg for customization
// setupListeners(store.dispatch)

export default store;

// Get the type of our store variable
export type AppStore = typeof store;

// Infer the `RootState` and `AppDispatch` types from the store itself
export type RootState = ReturnType<AppStore["getState"]>;

// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}
export type AppDispatch = AppStore["dispatch"];
