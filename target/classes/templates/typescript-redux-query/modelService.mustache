import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'
import { {{classname}} } from '../../model'
import { BASE_PATH } from '../../src'
import customBaseQuery from '../customBaseQuery'; // Import the custom base query

type {{classname}}Response = {{classname}}[]

export const {{classname}}Service = createApi({
  reducerPath: '{{classname}}', // This should remain unique
  baseQuery: customBaseQuery,
  tagTypes: ['{{classname}}'],
  endpoints: (build) => ({
    lazyGet{{classname}}s: build.query<{{classname}}Response, { page: number; limit?: number }>({
      query: ({ page, limit = 20 }) => `{{classname}}?page=${page}&limit=${limit}`,
      providesTags: (result, page) =>
        result
          ? [
            ...result.map(({ id }) => ({ type: '{{classname}}' as const, id })),
            { type: '{{classname}}', id: `PAGE_${page}` },
          ]
          : [],
    }),
    get{{classname}}s: build.query<{{classname}}Response, void>({
      query: () => '{{classname}}',
      providesTags: (result) =>
        result
          ? [
              ...result.map(({ id }) => ({ type: '{{classname}}' as const, id })),
              { type: '{{classname}}', id: 'LIST' },
            ]
          : [{ type: '{{classname}}', id: 'LIST' }],
    }),
    add{{classname}}: build.mutation<{{classname}}, Partial<{{classname}}>>({
      query: (body) => ({
        url: `{{classname}}`,
        method: 'POST',
        body,
      }),
      invalidatesTags: [{ type: '{{classname}}', id: 'LIST' }],
    }),
    get{{classname}}: build.query<{{classname}}, string>({
      query: (id) => `{{classname}}/${id}`,
      providesTags: (result, error, id) => [{ type: '{{classname}}', id }],
    }),
    update{{classname}}: build.mutation<void, Pick<{{classname}}, 'id'> & Partial<{{classname}}>>({
      query: ({ id, ...patch }) => ({
        url: `{{classname}}/${id}`,
        method: 'PUT',
        body: patch,
      }),
      async onQueryStarted({ id, ...patch }, { dispatch, queryFulfilled }) {
        if (id) {
          const patchResult = dispatch(
            {{classname}}Service.util.updateQueryData('get{{classname}}', id, (draft) => {
              Object.assign(draft, patch)
            }),
          )
          try {
            await queryFulfilled
          } catch {
            patchResult.undo()
          }
        }
      },
      invalidatesTags: (result, error, { id }) => [{ type: '{{classname}}', id }],
    }),
    delete{{classname}}: build.mutation<{ success: boolean; id: number }, number>({
      query(id) {
        return {
          url: `{{classname}}/${id}`,
          method: 'DELETE',
        }
      },
      invalidatesTags: (result, error, id) => [{ type: '{{classname}}', id }],
    }),
  }),
})

export const {
  useLazyGet{{classname}}sQuery,
  useGet{{classname}}Query,
  useGet{{classname}}sQuery,
  useAdd{{classname}}Mutation,
  useUpdate{{classname}}Mutation,
  useDelete{{classname}}Mutation,
} = {{classname}}Service
