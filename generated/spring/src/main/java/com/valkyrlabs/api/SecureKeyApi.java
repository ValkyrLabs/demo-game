/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.5.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.valkyrlabs.api;

import com.valkyrlabs.model.SecureKey;
import java.util.UUID;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CompletableFuture;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-01-03T16:22:46.987665-08:00[America/Los_Angeles]", comments = "Generator version: 7.5.0")
@Validated
@Tag(name = "SecureKey", description = "the SecureKey API")
public interface SecureKeyApi {

    default SecureKeyApiDelegate getDelegate() {
        return new SecureKeyApiDelegate() {};
    }

    /**
     * DELETE /SecureKey/{id} : Delete a SecureKey.
     * Deletes a specific SecureKey.
     *
     * @param id Unique identifier for the SecureKey. (required)
     * @return SecureKey deleted successfully. (status code 204)
     *         or SecureKey not found. (status code 404)
     *         or Internal server error. (status code 500)
     */
    @Operation(
        operationId = "deleteSecureKey",
        summary = "Delete a SecureKey.",
        description = "Deletes a specific SecureKey.",
        tags = { "SecureKey" },
        responses = {
            @ApiResponse(responseCode = "204", description = "SecureKey deleted successfully."),
            @ApiResponse(responseCode = "404", description = "SecureKey not found."),
            @ApiResponse(responseCode = "500", description = "Internal server error.")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/SecureKey/{id}"
    )
    
    default CompletableFuture<ResponseEntity<Void>> deleteSecureKey(
        @Parameter(name = "id", description = "Unique identifier for the SecureKey.", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id
    ) {
        return getDelegate().deleteSecureKey(id);
    }


    /**
     * GET /SecureKey/{id} : Retrieve a single SecureKey
     * Retrieves a single SecureKey for a specific uid.
     *
     * @param id Unique identifier for the SecureKey. (required)
     * @return Successfully retrieved the SecureKey. (status code 200)
     *         or SecureKey not found. (status code 404)
     *         or Internal server error. (status code 500)
     */
    @Operation(
        operationId = "getSecureKey",
        summary = "Retrieve a single SecureKey",
        description = "Retrieves a single SecureKey for a specific uid.",
        tags = { "SecureKey" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved the SecureKey.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SecureKey.class))
            }),
            @ApiResponse(responseCode = "404", description = "SecureKey not found."),
            @ApiResponse(responseCode = "500", description = "Internal server error.")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/SecureKey/{id}",
        produces = { "application/json" }
    )
    
    default CompletableFuture<ResponseEntity<SecureKey>> getSecureKey(
        @Parameter(name = "id", description = "Unique identifier for the SecureKey.", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id
    ) {
        return getDelegate().getSecureKey(id);
    }


    /**
     * GET /SecureKey : Retrieve a list of SecureKeys
     * Retrieves a list of SecureKeys.
     *
     * @return Successfully retrieved the list of SecureKeys. (status code 200)
     *         or No SecureKeys were found. (status code 404)
     *         or Internal server error. (status code 500)
     */
    @Operation(
        operationId = "getSecureKeyList",
        summary = "Retrieve a list of SecureKeys",
        description = "Retrieves a list of SecureKeys.",
        tags = { "SecureKey" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved the list of SecureKeys.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = SecureKey.class)))
            }),
            @ApiResponse(responseCode = "404", description = "No SecureKeys were found."),
            @ApiResponse(responseCode = "500", description = "Internal server error.")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/SecureKey",
        produces = { "application/json" }
    )
    
    default CompletableFuture<ResponseEntity<List<SecureKey>>> getSecureKeyList(
        
    ) {
        return getDelegate().getSecureKeyList();
    }


    /**
     * POST /SecureKey : Create a new SecureKey
     * Creates a new SecureKey.
     *
     * @param secureKey SecureKey details. (required)
     * @return SecureKey created successfully. (status code 201)
     *         or Invalid input. (status code 400)
     *         or SecureKey not found. (status code 404)
     *         or Internal server error. (status code 500)
     */
    @Operation(
        operationId = "postSecureKey",
        summary = "Create a new SecureKey",
        description = "Creates a new SecureKey.",
        tags = { "SecureKey" },
        responses = {
            @ApiResponse(responseCode = "201", description = "SecureKey created successfully.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SecureKey.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid input."),
            @ApiResponse(responseCode = "404", description = "SecureKey not found."),
            @ApiResponse(responseCode = "500", description = "Internal server error.")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/SecureKey",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default CompletableFuture<ResponseEntity<SecureKey>> postSecureKey(
        @Parameter(name = "SecureKey", description = "SecureKey details.", required = true) @Valid @RequestBody SecureKey secureKey
    ) {
        return getDelegate().postSecureKey(secureKey);
    }


    /**
     * PUT /SecureKey/{id} : Update an existing SecureKey
     * Updates an existing SecureKey.
     *
     * @param id Unique identifier for the SecureKey. (required)
     * @param secureKey Updated SecureKey details. (required)
     * @return SecureKey updated successfully. (status code 200)
     *         or Invalid input. (status code 400)
     *         or SecureKey not found. (status code 404)
     *         or Internal server error. (status code 500)
     */
    @Operation(
        operationId = "updateSecureKey",
        summary = "Update an existing SecureKey",
        description = "Updates an existing SecureKey.",
        tags = { "SecureKey" },
        responses = {
            @ApiResponse(responseCode = "200", description = "SecureKey updated successfully.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SecureKey.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid input."),
            @ApiResponse(responseCode = "404", description = "SecureKey not found."),
            @ApiResponse(responseCode = "500", description = "Internal server error.")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/SecureKey/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default CompletableFuture<ResponseEntity<SecureKey>> updateSecureKey(
        @Parameter(name = "id", description = "Unique identifier for the SecureKey.", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id,
        @Parameter(name = "SecureKey", description = "Updated SecureKey details.", required = true) @Valid @RequestBody SecureKey secureKey
    ) {
        return getDelegate().updateSecureKey(id, secureKey);
    }

}
