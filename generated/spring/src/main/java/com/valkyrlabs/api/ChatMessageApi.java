/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.5.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.valkyrlabs.api;

import com.valkyrlabs.model.ChatMessage;
import java.util.UUID;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CompletableFuture;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-01-03T16:22:46.987665-08:00[America/Los_Angeles]", comments = "Generator version: 7.5.0")
@Validated
@Tag(name = "ChatMessage", description = "the ChatMessage API")
public interface ChatMessageApi {

    default ChatMessageApiDelegate getDelegate() {
        return new ChatMessageApiDelegate() {};
    }

    /**
     * DELETE /ChatMessage/{id} : Delete a ChatMessage.
     * Deletes a specific ChatMessage.
     *
     * @param id Unique identifier for the ChatMessage. (required)
     * @return ChatMessage deleted successfully. (status code 204)
     *         or ChatMessage not found. (status code 404)
     *         or Internal server error. (status code 500)
     */
    @Operation(
        operationId = "deleteChatMessage",
        summary = "Delete a ChatMessage.",
        description = "Deletes a specific ChatMessage.",
        tags = { "ChatMessage" },
        responses = {
            @ApiResponse(responseCode = "204", description = "ChatMessage deleted successfully."),
            @ApiResponse(responseCode = "404", description = "ChatMessage not found."),
            @ApiResponse(responseCode = "500", description = "Internal server error.")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/ChatMessage/{id}"
    )
    
    default CompletableFuture<ResponseEntity<Void>> deleteChatMessage(
        @Parameter(name = "id", description = "Unique identifier for the ChatMessage.", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id
    ) {
        return getDelegate().deleteChatMessage(id);
    }


    /**
     * GET /ChatMessage/{id} : Retrieve a single ChatMessage
     * Retrieves a single ChatMessage for a specific uid.
     *
     * @param id Unique identifier for the ChatMessage. (required)
     * @return Successfully retrieved the ChatMessage. (status code 200)
     *         or ChatMessage not found. (status code 404)
     *         or Internal server error. (status code 500)
     */
    @Operation(
        operationId = "getChatMessage",
        summary = "Retrieve a single ChatMessage",
        description = "Retrieves a single ChatMessage for a specific uid.",
        tags = { "ChatMessage" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved the ChatMessage.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ChatMessage.class))
            }),
            @ApiResponse(responseCode = "404", description = "ChatMessage not found."),
            @ApiResponse(responseCode = "500", description = "Internal server error.")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/ChatMessage/{id}",
        produces = { "application/json" }
    )
    
    default CompletableFuture<ResponseEntity<ChatMessage>> getChatMessage(
        @Parameter(name = "id", description = "Unique identifier for the ChatMessage.", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id
    ) {
        return getDelegate().getChatMessage(id);
    }


    /**
     * GET /ChatMessage : Retrieve a list of ChatMessages
     * Retrieves a list of ChatMessages.
     *
     * @return Successfully retrieved the list of ChatMessages. (status code 200)
     *         or No ChatMessages were found. (status code 404)
     *         or Internal server error. (status code 500)
     */
    @Operation(
        operationId = "getChatMessageList",
        summary = "Retrieve a list of ChatMessages",
        description = "Retrieves a list of ChatMessages.",
        tags = { "ChatMessage" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved the list of ChatMessages.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ChatMessage.class)))
            }),
            @ApiResponse(responseCode = "404", description = "No ChatMessages were found."),
            @ApiResponse(responseCode = "500", description = "Internal server error.")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/ChatMessage",
        produces = { "application/json" }
    )
    
    default CompletableFuture<ResponseEntity<List<ChatMessage>>> getChatMessageList(
        
    ) {
        return getDelegate().getChatMessageList();
    }


    /**
     * POST /ChatMessage : Create a new ChatMessage
     * Creates a new ChatMessage.
     *
     * @param chatMessage ChatMessage details. (required)
     * @return ChatMessage created successfully. (status code 201)
     *         or Invalid input. (status code 400)
     *         or ChatMessage not found. (status code 404)
     *         or Internal server error. (status code 500)
     */
    @Operation(
        operationId = "postChatMessage",
        summary = "Create a new ChatMessage",
        description = "Creates a new ChatMessage.",
        tags = { "ChatMessage" },
        responses = {
            @ApiResponse(responseCode = "201", description = "ChatMessage created successfully.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ChatMessage.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid input."),
            @ApiResponse(responseCode = "404", description = "ChatMessage not found."),
            @ApiResponse(responseCode = "500", description = "Internal server error.")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/ChatMessage",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default CompletableFuture<ResponseEntity<ChatMessage>> postChatMessage(
        @Parameter(name = "ChatMessage", description = "ChatMessage details.", required = true) @Valid @RequestBody ChatMessage chatMessage
    ) {
        return getDelegate().postChatMessage(chatMessage);
    }


    /**
     * PUT /ChatMessage/{id} : Update an existing ChatMessage
     * Updates an existing ChatMessage.
     *
     * @param id Unique identifier for the ChatMessage. (required)
     * @param chatMessage Updated ChatMessage details. (required)
     * @return ChatMessage updated successfully. (status code 200)
     *         or Invalid input. (status code 400)
     *         or ChatMessage not found. (status code 404)
     *         or Internal server error. (status code 500)
     */
    @Operation(
        operationId = "updateChatMessage",
        summary = "Update an existing ChatMessage",
        description = "Updates an existing ChatMessage.",
        tags = { "ChatMessage" },
        responses = {
            @ApiResponse(responseCode = "200", description = "ChatMessage updated successfully.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ChatMessage.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid input."),
            @ApiResponse(responseCode = "404", description = "ChatMessage not found."),
            @ApiResponse(responseCode = "500", description = "Internal server error.")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/ChatMessage/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default CompletableFuture<ResponseEntity<ChatMessage>> updateChatMessage(
        @Parameter(name = "id", description = "Unique identifier for the ChatMessage.", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id,
        @Parameter(name = "ChatMessage", description = "Updated ChatMessage details.", required = true) @Valid @RequestBody ChatMessage chatMessage
    ) {
        return getDelegate().updateChatMessage(id, chatMessage);
    }

}
