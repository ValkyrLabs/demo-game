/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.5.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.valkyrlabs.api;

import com.valkyrlabs.model.LlmDetails;
import java.util.UUID;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CompletableFuture;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-01-03T16:22:46.987665-08:00[America/Los_Angeles]", comments = "Generator version: 7.5.0")
@Validated
@Tag(name = "LlmDetails", description = "the LlmDetails API")
public interface LlmDetailsApi {

    default LlmDetailsApiDelegate getDelegate() {
        return new LlmDetailsApiDelegate() {};
    }

    /**
     * DELETE /LlmDetails/{id} : Delete a LlmDetails.
     * Deletes a specific LlmDetails.
     *
     * @param id Unique identifier for the LlmDetails. (required)
     * @return LlmDetails deleted successfully. (status code 204)
     *         or LlmDetails not found. (status code 404)
     *         or Internal server error. (status code 500)
     */
    @Operation(
        operationId = "deleteLlmDetails",
        summary = "Delete a LlmDetails.",
        description = "Deletes a specific LlmDetails.",
        tags = { "LlmDetails" },
        responses = {
            @ApiResponse(responseCode = "204", description = "LlmDetails deleted successfully."),
            @ApiResponse(responseCode = "404", description = "LlmDetails not found."),
            @ApiResponse(responseCode = "500", description = "Internal server error.")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/LlmDetails/{id}"
    )
    
    default CompletableFuture<ResponseEntity<Void>> deleteLlmDetails(
        @Parameter(name = "id", description = "Unique identifier for the LlmDetails.", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id
    ) {
        return getDelegate().deleteLlmDetails(id);
    }


    /**
     * GET /LlmDetails/{id} : Retrieve a single LlmDetails
     * Retrieves a single LlmDetails for a specific uid.
     *
     * @param id Unique identifier for the LlmDetails. (required)
     * @return Successfully retrieved the LlmDetails. (status code 200)
     *         or LlmDetails not found. (status code 404)
     *         or Internal server error. (status code 500)
     */
    @Operation(
        operationId = "getLlmDetails",
        summary = "Retrieve a single LlmDetails",
        description = "Retrieves a single LlmDetails for a specific uid.",
        tags = { "LlmDetails" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved the LlmDetails.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = LlmDetails.class))
            }),
            @ApiResponse(responseCode = "404", description = "LlmDetails not found."),
            @ApiResponse(responseCode = "500", description = "Internal server error.")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/LlmDetails/{id}",
        produces = { "application/json" }
    )
    
    default CompletableFuture<ResponseEntity<LlmDetails>> getLlmDetails(
        @Parameter(name = "id", description = "Unique identifier for the LlmDetails.", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id
    ) {
        return getDelegate().getLlmDetails(id);
    }


    /**
     * GET /LlmDetails : Retrieve a list of LlmDetailss
     * Retrieves a list of LlmDetailss.
     *
     * @return Successfully retrieved the list of LlmDetailss. (status code 200)
     *         or No LlmDetailss were found. (status code 404)
     *         or Internal server error. (status code 500)
     */
    @Operation(
        operationId = "getLlmDetailsList",
        summary = "Retrieve a list of LlmDetailss",
        description = "Retrieves a list of LlmDetailss.",
        tags = { "LlmDetails" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved the list of LlmDetailss.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = LlmDetails.class)))
            }),
            @ApiResponse(responseCode = "404", description = "No LlmDetailss were found."),
            @ApiResponse(responseCode = "500", description = "Internal server error.")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/LlmDetails",
        produces = { "application/json" }
    )
    
    default CompletableFuture<ResponseEntity<List<LlmDetails>>> getLlmDetailsList(
        
    ) {
        return getDelegate().getLlmDetailsList();
    }


    /**
     * POST /LlmDetails : Create a new LlmDetails
     * Creates a new LlmDetails.
     *
     * @param llmDetails LlmDetails details. (required)
     * @return LlmDetails created successfully. (status code 201)
     *         or Invalid input. (status code 400)
     *         or LlmDetails not found. (status code 404)
     *         or Internal server error. (status code 500)
     */
    @Operation(
        operationId = "postLlmDetails",
        summary = "Create a new LlmDetails",
        description = "Creates a new LlmDetails.",
        tags = { "LlmDetails" },
        responses = {
            @ApiResponse(responseCode = "201", description = "LlmDetails created successfully.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = LlmDetails.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid input."),
            @ApiResponse(responseCode = "404", description = "LlmDetails not found."),
            @ApiResponse(responseCode = "500", description = "Internal server error.")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/LlmDetails",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default CompletableFuture<ResponseEntity<LlmDetails>> postLlmDetails(
        @Parameter(name = "LlmDetails", description = "LlmDetails details.", required = true) @Valid @RequestBody LlmDetails llmDetails
    ) {
        return getDelegate().postLlmDetails(llmDetails);
    }


    /**
     * PUT /LlmDetails/{id} : Update an existing LlmDetails
     * Updates an existing LlmDetails.
     *
     * @param id Unique identifier for the LlmDetails. (required)
     * @param llmDetails Updated LlmDetails details. (required)
     * @return LlmDetails updated successfully. (status code 200)
     *         or Invalid input. (status code 400)
     *         or LlmDetails not found. (status code 404)
     *         or Internal server error. (status code 500)
     */
    @Operation(
        operationId = "updateLlmDetails",
        summary = "Update an existing LlmDetails",
        description = "Updates an existing LlmDetails.",
        tags = { "LlmDetails" },
        responses = {
            @ApiResponse(responseCode = "200", description = "LlmDetails updated successfully.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = LlmDetails.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid input."),
            @ApiResponse(responseCode = "404", description = "LlmDetails not found."),
            @ApiResponse(responseCode = "500", description = "Internal server error.")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/LlmDetails/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default CompletableFuture<ResponseEntity<LlmDetails>> updateLlmDetails(
        @Parameter(name = "id", description = "Unique identifier for the LlmDetails.", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id,
        @Parameter(name = "LlmDetails", description = "Updated LlmDetails details.", required = true) @Valid @RequestBody LlmDetails llmDetails
    ) {
        return getDelegate().updateLlmDetails(id, llmDetails);
    }

}
