/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.5.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.valkyrlabs.api;

import com.valkyrlabs.model.Application;
import java.util.UUID;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CompletableFuture;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-01-03T16:22:46.987665-08:00[America/Los_Angeles]", comments = "Generator version: 7.5.0")
@Validated
@Tag(name = "Application", description = "the Application API")
public interface ApplicationApi {

    default ApplicationApiDelegate getDelegate() {
        return new ApplicationApiDelegate() {};
    }

    /**
     * DELETE /Application/{id} : Delete a Application.
     * Deletes a specific Application.
     *
     * @param id Unique identifier for the Application. (required)
     * @return Application deleted successfully. (status code 204)
     *         or Application not found. (status code 404)
     *         or Internal server error. (status code 500)
     */
    @Operation(
        operationId = "deleteApplication",
        summary = "Delete a Application.",
        description = "Deletes a specific Application.",
        tags = { "Application" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Application deleted successfully."),
            @ApiResponse(responseCode = "404", description = "Application not found."),
            @ApiResponse(responseCode = "500", description = "Internal server error.")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/Application/{id}"
    )
    
    default CompletableFuture<ResponseEntity<Void>> deleteApplication(
        @Parameter(name = "id", description = "Unique identifier for the Application.", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id
    ) {
        return getDelegate().deleteApplication(id);
    }


    /**
     * GET /Application/{id} : Retrieve a single Application
     * Retrieves a single Application for a specific uid.
     *
     * @param id Unique identifier for the Application. (required)
     * @return Successfully retrieved the Application. (status code 200)
     *         or Application not found. (status code 404)
     *         or Internal server error. (status code 500)
     */
    @Operation(
        operationId = "getApplication",
        summary = "Retrieve a single Application",
        description = "Retrieves a single Application for a specific uid.",
        tags = { "Application" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved the Application.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Application.class))
            }),
            @ApiResponse(responseCode = "404", description = "Application not found."),
            @ApiResponse(responseCode = "500", description = "Internal server error.")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/Application/{id}",
        produces = { "application/json" }
    )
    
    default CompletableFuture<ResponseEntity<Application>> getApplication(
        @Parameter(name = "id", description = "Unique identifier for the Application.", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id
    ) {
        return getDelegate().getApplication(id);
    }


    /**
     * GET /Application : Retrieve a list of Applications
     * Retrieves a list of Applications.
     *
     * @return Successfully retrieved the list of Applications. (status code 200)
     *         or No Applications were found. (status code 404)
     *         or Internal server error. (status code 500)
     */
    @Operation(
        operationId = "getApplicationList",
        summary = "Retrieve a list of Applications",
        description = "Retrieves a list of Applications.",
        tags = { "Application" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved the list of Applications.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Application.class)))
            }),
            @ApiResponse(responseCode = "404", description = "No Applications were found."),
            @ApiResponse(responseCode = "500", description = "Internal server error.")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/Application",
        produces = { "application/json" }
    )
    
    default CompletableFuture<ResponseEntity<List<Application>>> getApplicationList(
        
    ) {
        return getDelegate().getApplicationList();
    }


    /**
     * POST /Application : Create a new Application
     * Creates a new Application.
     *
     * @param application Application details. (required)
     * @return Application created successfully. (status code 201)
     *         or Invalid input. (status code 400)
     *         or Application not found. (status code 404)
     *         or Internal server error. (status code 500)
     */
    @Operation(
        operationId = "postApplication",
        summary = "Create a new Application",
        description = "Creates a new Application.",
        tags = { "Application" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Application created successfully.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Application.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid input."),
            @ApiResponse(responseCode = "404", description = "Application not found."),
            @ApiResponse(responseCode = "500", description = "Internal server error.")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/Application",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default CompletableFuture<ResponseEntity<Application>> postApplication(
        @Parameter(name = "Application", description = "Application details.", required = true) @Valid @RequestBody Application application
    ) {
        return getDelegate().postApplication(application);
    }


    /**
     * PUT /Application/{id} : Update an existing Application
     * Updates an existing Application.
     *
     * @param id Unique identifier for the Application. (required)
     * @param application Updated Application details. (required)
     * @return Application updated successfully. (status code 200)
     *         or Invalid input. (status code 400)
     *         or Application not found. (status code 404)
     *         or Internal server error. (status code 500)
     */
    @Operation(
        operationId = "updateApplication",
        summary = "Update an existing Application",
        description = "Updates an existing Application.",
        tags = { "Application" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Application updated successfully.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Application.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid input."),
            @ApiResponse(responseCode = "404", description = "Application not found."),
            @ApiResponse(responseCode = "500", description = "Internal server error.")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/Application/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default CompletableFuture<ResponseEntity<Application>> updateApplication(
        @Parameter(name = "id", description = "Unique identifier for the Application.", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id,
        @Parameter(name = "Application", description = "Updated Application details.", required = true) @Valid @RequestBody Application application
    ) {
        return getDelegate().updateApplication(id, application);
    }

}
