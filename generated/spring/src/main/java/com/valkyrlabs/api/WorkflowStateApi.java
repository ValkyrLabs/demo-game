/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.5.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.valkyrlabs.api;

import java.util.UUID;
import com.valkyrlabs.model.WorkflowState;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CompletableFuture;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-01-03T16:22:46.987665-08:00[America/Los_Angeles]", comments = "Generator version: 7.5.0")
@Validated
@Tag(name = "WorkflowState", description = "the WorkflowState API")
public interface WorkflowStateApi {

    default WorkflowStateApiDelegate getDelegate() {
        return new WorkflowStateApiDelegate() {};
    }

    /**
     * DELETE /WorkflowState/{id} : Delete a WorkflowState.
     * Deletes a specific WorkflowState.
     *
     * @param id Unique identifier for the WorkflowState. (required)
     * @return WorkflowState deleted successfully. (status code 204)
     *         or WorkflowState not found. (status code 404)
     *         or Internal server error. (status code 500)
     */
    @Operation(
        operationId = "deleteWorkflowState",
        summary = "Delete a WorkflowState.",
        description = "Deletes a specific WorkflowState.",
        tags = { "WorkflowState" },
        responses = {
            @ApiResponse(responseCode = "204", description = "WorkflowState deleted successfully."),
            @ApiResponse(responseCode = "404", description = "WorkflowState not found."),
            @ApiResponse(responseCode = "500", description = "Internal server error.")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/WorkflowState/{id}"
    )
    
    default CompletableFuture<ResponseEntity<Void>> deleteWorkflowState(
        @Parameter(name = "id", description = "Unique identifier for the WorkflowState.", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id
    ) {
        return getDelegate().deleteWorkflowState(id);
    }


    /**
     * GET /WorkflowState/{id} : Retrieve a single WorkflowState
     * Retrieves a single WorkflowState for a specific uid.
     *
     * @param id Unique identifier for the WorkflowState. (required)
     * @return Successfully retrieved the WorkflowState. (status code 200)
     *         or WorkflowState not found. (status code 404)
     *         or Internal server error. (status code 500)
     */
    @Operation(
        operationId = "getWorkflowState",
        summary = "Retrieve a single WorkflowState",
        description = "Retrieves a single WorkflowState for a specific uid.",
        tags = { "WorkflowState" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved the WorkflowState.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = WorkflowState.class))
            }),
            @ApiResponse(responseCode = "404", description = "WorkflowState not found."),
            @ApiResponse(responseCode = "500", description = "Internal server error.")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/WorkflowState/{id}",
        produces = { "application/json" }
    )
    
    default CompletableFuture<ResponseEntity<WorkflowState>> getWorkflowState(
        @Parameter(name = "id", description = "Unique identifier for the WorkflowState.", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id
    ) {
        return getDelegate().getWorkflowState(id);
    }


    /**
     * GET /WorkflowState : Retrieve a list of WorkflowStates
     * Retrieves a list of WorkflowStates.
     *
     * @return Successfully retrieved the list of WorkflowStates. (status code 200)
     *         or No WorkflowStates were found. (status code 404)
     *         or Internal server error. (status code 500)
     */
    @Operation(
        operationId = "getWorkflowStateList",
        summary = "Retrieve a list of WorkflowStates",
        description = "Retrieves a list of WorkflowStates.",
        tags = { "WorkflowState" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved the list of WorkflowStates.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = WorkflowState.class)))
            }),
            @ApiResponse(responseCode = "404", description = "No WorkflowStates were found."),
            @ApiResponse(responseCode = "500", description = "Internal server error.")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/WorkflowState",
        produces = { "application/json" }
    )
    
    default CompletableFuture<ResponseEntity<List<WorkflowState>>> getWorkflowStateList(
        
    ) {
        return getDelegate().getWorkflowStateList();
    }


    /**
     * POST /WorkflowState : Create a new WorkflowState
     * Creates a new WorkflowState.
     *
     * @param workflowState WorkflowState details. (required)
     * @return WorkflowState created successfully. (status code 201)
     *         or Invalid input. (status code 400)
     *         or WorkflowState not found. (status code 404)
     *         or Internal server error. (status code 500)
     */
    @Operation(
        operationId = "postWorkflowState",
        summary = "Create a new WorkflowState",
        description = "Creates a new WorkflowState.",
        tags = { "WorkflowState" },
        responses = {
            @ApiResponse(responseCode = "201", description = "WorkflowState created successfully.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = WorkflowState.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid input."),
            @ApiResponse(responseCode = "404", description = "WorkflowState not found."),
            @ApiResponse(responseCode = "500", description = "Internal server error.")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/WorkflowState",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default CompletableFuture<ResponseEntity<WorkflowState>> postWorkflowState(
        @Parameter(name = "WorkflowState", description = "WorkflowState details.", required = true) @Valid @RequestBody WorkflowState workflowState
    ) {
        return getDelegate().postWorkflowState(workflowState);
    }


    /**
     * PUT /WorkflowState/{id} : Update an existing WorkflowState
     * Updates an existing WorkflowState.
     *
     * @param id Unique identifier for the WorkflowState. (required)
     * @param workflowState Updated WorkflowState details. (required)
     * @return WorkflowState updated successfully. (status code 200)
     *         or Invalid input. (status code 400)
     *         or WorkflowState not found. (status code 404)
     *         or Internal server error. (status code 500)
     */
    @Operation(
        operationId = "updateWorkflowState",
        summary = "Update an existing WorkflowState",
        description = "Updates an existing WorkflowState.",
        tags = { "WorkflowState" },
        responses = {
            @ApiResponse(responseCode = "200", description = "WorkflowState updated successfully.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = WorkflowState.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid input."),
            @ApiResponse(responseCode = "404", description = "WorkflowState not found."),
            @ApiResponse(responseCode = "500", description = "Internal server error.")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/WorkflowState/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default CompletableFuture<ResponseEntity<WorkflowState>> updateWorkflowState(
        @Parameter(name = "id", description = "Unique identifier for the WorkflowState.", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id,
        @Parameter(name = "WorkflowState", description = "Updated WorkflowState details.", required = true) @Valid @RequestBody WorkflowState workflowState
    ) {
        return getDelegate().updateWorkflowState(id, workflowState);
    }

}
