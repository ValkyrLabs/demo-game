/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.5.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.valkyrlabs.api;

import com.valkyrlabs.model.Game;
import java.util.UUID;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CompletableFuture;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-01-03T16:22:46.987665-08:00[America/Los_Angeles]", comments = "Generator version: 7.5.0")
@Validated
@Tag(name = "Game", description = "the Game API")
public interface GameApi {

    default GameApiDelegate getDelegate() {
        return new GameApiDelegate() {};
    }

    /**
     * DELETE /Game/{id} : Delete a Game.
     * Deletes a specific Game.
     *
     * @param id Unique identifier for the Game. (required)
     * @return Game deleted successfully. (status code 204)
     *         or Game not found. (status code 404)
     *         or Internal server error. (status code 500)
     */
    @Operation(
        operationId = "deleteGame",
        summary = "Delete a Game.",
        description = "Deletes a specific Game.",
        tags = { "Game" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Game deleted successfully."),
            @ApiResponse(responseCode = "404", description = "Game not found."),
            @ApiResponse(responseCode = "500", description = "Internal server error.")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/Game/{id}"
    )
    
    default CompletableFuture<ResponseEntity<Void>> deleteGame(
        @Parameter(name = "id", description = "Unique identifier for the Game.", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id
    ) {
        return getDelegate().deleteGame(id);
    }


    /**
     * GET /Game/{id} : Retrieve a single Game
     * Retrieves a single Game for a specific uid.
     *
     * @param id Unique identifier for the Game. (required)
     * @return Successfully retrieved the Game. (status code 200)
     *         or Game not found. (status code 404)
     *         or Internal server error. (status code 500)
     */
    @Operation(
        operationId = "getGame",
        summary = "Retrieve a single Game",
        description = "Retrieves a single Game for a specific uid.",
        tags = { "Game" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved the Game.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Game.class))
            }),
            @ApiResponse(responseCode = "404", description = "Game not found."),
            @ApiResponse(responseCode = "500", description = "Internal server error.")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/Game/{id}",
        produces = { "application/json" }
    )
    
    default CompletableFuture<ResponseEntity<Game>> getGame(
        @Parameter(name = "id", description = "Unique identifier for the Game.", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id
    ) {
        return getDelegate().getGame(id);
    }


    /**
     * GET /Game : Retrieve a list of Games
     * Retrieves a list of Games.
     *
     * @return Successfully retrieved the list of Games. (status code 200)
     *         or No Games were found. (status code 404)
     *         or Internal server error. (status code 500)
     */
    @Operation(
        operationId = "getGameList",
        summary = "Retrieve a list of Games",
        description = "Retrieves a list of Games.",
        tags = { "Game" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved the list of Games.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Game.class)))
            }),
            @ApiResponse(responseCode = "404", description = "No Games were found."),
            @ApiResponse(responseCode = "500", description = "Internal server error.")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/Game",
        produces = { "application/json" }
    )
    
    default CompletableFuture<ResponseEntity<List<Game>>> getGameList(
        
    ) {
        return getDelegate().getGameList();
    }


    /**
     * POST /Game : Create a new Game
     * Creates a new Game.
     *
     * @param game Game details. (required)
     * @return Game created successfully. (status code 201)
     *         or Invalid input. (status code 400)
     *         or Game not found. (status code 404)
     *         or Internal server error. (status code 500)
     */
    @Operation(
        operationId = "postGame",
        summary = "Create a new Game",
        description = "Creates a new Game.",
        tags = { "Game" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Game created successfully.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Game.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid input."),
            @ApiResponse(responseCode = "404", description = "Game not found."),
            @ApiResponse(responseCode = "500", description = "Internal server error.")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/Game",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default CompletableFuture<ResponseEntity<Game>> postGame(
        @Parameter(name = "Game", description = "Game details.", required = true) @Valid @RequestBody Game game
    ) {
        return getDelegate().postGame(game);
    }


    /**
     * PUT /Game/{id} : Update an existing Game
     * Updates an existing Game.
     *
     * @param id Unique identifier for the Game. (required)
     * @param game Updated Game details. (required)
     * @return Game updated successfully. (status code 200)
     *         or Invalid input. (status code 400)
     *         or Game not found. (status code 404)
     *         or Internal server error. (status code 500)
     */
    @Operation(
        operationId = "updateGame",
        summary = "Update an existing Game",
        description = "Updates an existing Game.",
        tags = { "Game" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Game updated successfully.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Game.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid input."),
            @ApiResponse(responseCode = "404", description = "Game not found."),
            @ApiResponse(responseCode = "500", description = "Internal server error.")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/Game/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default CompletableFuture<ResponseEntity<Game>> updateGame(
        @Parameter(name = "id", description = "Unique identifier for the Game.", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id,
        @Parameter(name = "Game", description = "Updated Game details.", required = true) @Valid @RequestBody Game game
    ) {
        return getDelegate().updateGame(id, game);
    }

}
